<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>操作系统 on Example Site</title>
        <link>https://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
        <description>Recent content in 操作系统 on Example Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Wed, 30 Jul 2025 21:40:00 +0800</lastBuildDate><atom:link href="https://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>操作系统</title>
        <link>https://example.com/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Wed, 30 Jul 2025 21:40:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
        <description>&lt;h1 id=&#34;操作系统&#34;&gt;操作系统
&lt;/h1&gt;&lt;h2 id=&#34;基本信息介绍&#34;&gt;基本信息介绍
&lt;/h2&gt;&lt;h3 id=&#34;操作系统信息&#34;&gt;操作系统信息
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在经典的五级结构划分中，计算机组成结构包含&lt;strong&gt;数字逻辑层&lt;/strong&gt;、&lt;strong&gt;微体系结构层&lt;/strong&gt;、&lt;strong&gt;指令集架构层&lt;/strong&gt;、&lt;strong&gt;操作系统层&lt;/strong&gt;、&lt;strong&gt;应用程序层&lt;/strong&gt;。其中前三层属于&amp;quot;硬件层&amp;quot;，最后一层属于&amp;quot;软件层&amp;quot;。操作系统的地位就是硬件和软件之间的媒介。扮演资源分配器和控制程序的角色。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;计算机系统的四个组成部分&#34;&gt;计算机系统的四个组成部分
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;硬件(Hardware)&lt;/strong&gt;：提供基本的计算资源
&lt;ul&gt;
&lt;li&gt;CPU、内存、I/O设备等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统(Operating System)&lt;/strong&gt;：控制和协调硬件在用户之间的使用
&lt;ul&gt;
&lt;li&gt;资源分配器：管理所有资源，决定冲突请求的处理以实现高效和公平的资源共享&lt;/li&gt;
&lt;li&gt;控制程序：控制程序执行以防止错误和系统的不当使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用程序(Application Programs)&lt;/strong&gt;：使用系统资源解决计算问题
&lt;ul&gt;
&lt;li&gt;如文字处理器、编译器、Web浏览器等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户(Users)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;人、机器、其他计算机等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;操作系统定义与视角&#34;&gt;操作系统定义与视角
&lt;/h3&gt;&lt;h4 id=&#34;用户视角-vs-系统视角&#34;&gt;用户视角 vs 系统视角
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户视角&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户需要便利性和易用性&lt;/li&gt;
&lt;li&gt;不太关心资源利用率&lt;/li&gt;
&lt;li&gt;共享计算机（如主机）必须让所有用户满意&lt;/li&gt;
&lt;li&gt;手持设备资源受限，优化可用性和电池寿命&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统视角&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;操作系统是资源分配器&lt;/li&gt;
&lt;li&gt;操作系统是控制程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;操作系统定义&#34;&gt;操作系统定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;近似定义&lt;/strong&gt;：&amp;ldquo;当你订购操作系统时，供应商提供的所有东西&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;没有普遍接受的定义&lt;/li&gt;
&lt;li&gt;供应商提供的内容可能差异很大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核(Kernel)&lt;/strong&gt;：&amp;ldquo;始终在计算机上运行的一个程序&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;其他都是系统程序或应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统在不同上下文中可能有不同含义&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;计算机系统组成&#34;&gt;计算机系统组成
&lt;/h2&gt;&lt;h3 id=&#34;硬件组件&#34;&gt;硬件组件
&lt;/h3&gt;&lt;h4 id=&#34;基本结构&#34;&gt;基本结构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU和设备控制器&lt;/strong&gt;通过总线连接共享内存&lt;/li&gt;
&lt;li&gt;CPU和设备&lt;strong&gt;并发执行&lt;/strong&gt;，竞争内存周期&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;设备控制器&#34;&gt;设备控制器
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个设备控制器负责特定类型的设备
&lt;ul&gt;
&lt;li&gt;磁盘控制器、USB控制器等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每个设备控制器都有&lt;strong&gt;本地缓冲区&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O过程&lt;/strong&gt;：在设备和控制器本地缓冲区之间进行&lt;/li&gt;
&lt;li&gt;CPU在主内存和控制器缓冲区之间移动数据&lt;/li&gt;
&lt;li&gt;I/O设备和CPU可以&lt;strong&gt;并发执行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;直接内存访问dma&#34;&gt;直接内存访问(DMA)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：用于能够以接近内存速度传输信息的高速I/O设备
&lt;ul&gt;
&lt;li&gt;如以太网、硬盘、CD-ROM等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作流程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;设备驱动程序向控制器发送I/O描述符&lt;/li&gt;
&lt;li&gt;I/O描述符包含：操作类型、内存地址等&lt;/li&gt;
&lt;li&gt;控制器在其本地缓冲区和主内存之间传输数据块，无需CPU干预&lt;/li&gt;
&lt;li&gt;整个I/O请求完成时只产生一个中断&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中断与陷阱&#34;&gt;中断与陷阱
&lt;/h3&gt;&lt;h4 id=&#34;中断与陷阱讲解&#34;&gt;中断与陷阱讲解
&lt;/h4&gt;&lt;h5 id=&#34;中断interrupt&#34;&gt;中断（Interrupt）
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：中断是由外部硬件设备产生的异步事件，用来通知CPU某个事件已经发生&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;异步发生：不可预知的时间点&lt;/li&gt;
&lt;li&gt;由外部硬件触发（如键盘输入、鼠标点击、网络数据到达等）&lt;/li&gt;
&lt;li&gt;CPU可以选择性地响应或屏蔽某些中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;硬件中断&lt;/strong&gt;：由硬件设备产生（如定时器中断、I/O完成中断）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;软件中断&lt;/strong&gt;：由软件指令产生（如系统调用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理流程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;硬件检测到中断信号&lt;/li&gt;
&lt;li&gt;CPU完成当前指令执行&lt;/li&gt;
&lt;li&gt;保存当前程序状态（寄存器、程序计数器等）&lt;/li&gt;
&lt;li&gt;跳转到中断服务程序（ISR）&lt;/li&gt;
&lt;li&gt;执行中断处理&lt;/li&gt;
&lt;li&gt;恢复被中断程序的状态&lt;/li&gt;
&lt;li&gt;继续执行被中断的程序&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;陷阱trap&#34;&gt;陷阱（Trap）
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：陷阱是由正在执行的程序内部产生的同步事件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;同步发生：在特定指令执行时产生&lt;/li&gt;
&lt;li&gt;由当前执行的程序触发&lt;/li&gt;
&lt;li&gt;通常用于系统调用和异常处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统调用陷阱&lt;/strong&gt;：用户程序请求操作系统服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常陷阱&lt;/strong&gt;：程序执行错误（如除零错误、非法内存访问等）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试陷阱&lt;/strong&gt;：用于程序调试（如断点）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理流程&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;程序执行特定指令（如系统调用指令）&lt;/li&gt;
&lt;li&gt;CPU立即响应陷阱&lt;/li&gt;
&lt;li&gt;切换到内核模式&lt;/li&gt;
&lt;li&gt;跳转到相应的陷阱处理程序&lt;/li&gt;
&lt;li&gt;执行系统服务或异常处理&lt;/li&gt;
&lt;li&gt;返回用户模式（如果适用）&lt;/li&gt;
&lt;li&gt;继续执行程序&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;中断与陷阱的区别&#34;&gt;中断与陷阱的区别
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;触发源&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;中断：外部硬件设备&lt;/li&gt;
&lt;li&gt;陷阱：程序内部指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时机&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;中断：异步，不可预测&lt;/li&gt;
&lt;li&gt;陷阱：同步，可预测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;中断：处理外部事件，提高系统响应性&lt;/li&gt;
&lt;li&gt;陷阱：实现系统调用，处理程序异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可屏蔽性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;中断：部分可屏蔽&lt;/li&gt;
&lt;li&gt;陷阱：通常不可屏蔽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;重要性&#34;&gt;重要性
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提高系统效率&lt;/strong&gt;：避免CPU空等，实现并发处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现系统调用&lt;/strong&gt;：用户程序与内核通信的桥梁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误处理&lt;/strong&gt;：及时处理程序运行时错误&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时响应&lt;/strong&gt;：确保系统能够及时响应外部事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;操作系统对中断的处理&#34;&gt;操作系统对中断的处理
&lt;/h4&gt;&lt;h5 id=&#34;中断处理机制&#34;&gt;中断处理机制
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;中断向量表(Interrupt Vector Table)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;存储中断服务程序入口地址的表格&lt;/li&gt;
&lt;li&gt;每个中断类型对应一个终端号和处理程序地址&lt;/li&gt;
&lt;li&gt;通常位于内存的固定位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断优先级&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可屏蔽中断(Maskable Interrupt)&lt;/strong&gt;：可以被CPU忽略或延迟处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可屏蔽中断(Non-Maskable Interrupt, NMI)&lt;/strong&gt;：必须立即处理的紧急中断&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优先级排序&lt;/strong&gt;：高优先级中断可以打断低优先级中断的处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;中断处理步骤&#34;&gt;中断处理步骤
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;中断识别&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;硬件产生中断信号&lt;/li&gt;
&lt;li&gt;CUPU在每个指令周期结束时检查中断请求&lt;/li&gt;
&lt;li&gt;确定中断源和中断类型】&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现场保护&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;自动保存：CPU自动保存程序状态字&lt;/li&gt;
&lt;li&gt;手动保存：中断服务程序保存其他寄存器内容&lt;/li&gt;
&lt;li&gt;保存到内核栈或进程控制块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断分发&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;根据中断号查找中断向量表&lt;/li&gt;
&lt;li&gt;跳转到对应的中断服务程序(ISR)&lt;/li&gt;
&lt;li&gt;切换到内核模式（如果尚未切换）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断处理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;执行具体的中断服务代码&lt;/li&gt;
&lt;li&gt;处理硬件设备的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现场恢复&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;恢复之前保存的寄存器内容&lt;/li&gt;
&lt;li&gt;恢复程序状态字和程序计数器&lt;/li&gt;
&lt;li&gt;返回被中断的程序继续执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;中断处理策略&#34;&gt;中断处理策略
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;立即处理（Immediate Processing）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中断发生时立即处理&lt;/li&gt;
&lt;li&gt;适用于紧急和高优先级中断&lt;/li&gt;
&lt;li&gt;可能影响系统响应时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;延迟处理（Deferred Processing）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将中断处理分为上半部和下半部&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上半部&lt;/strong&gt;：快速处理紧急部分，清除中断源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;下半部&lt;/strong&gt;：延后处理耗时的非紧急部分&lt;/li&gt;
&lt;li&gt;Linux中的软中断（softirq）和工作队列（workqueue）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中断合并（Interrupt Coalescing）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将多个相同类型的中断合并处理&lt;/li&gt;
&lt;li&gt;减少中断处理开销&lt;/li&gt;
&lt;li&gt;提高系统吞吐量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;中断控制器&#34;&gt;中断控制器
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可编程中断控制器（PIC）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理多个中断源&lt;/li&gt;
&lt;li&gt;设置中断优先级&lt;/li&gt;
&lt;li&gt;屏蔽特定中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高级可编程中断控制器（APIC）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持多处理器系统&lt;/li&gt;
&lt;li&gt;提供更灵活的中断路由&lt;/li&gt;
&lt;li&gt;支持中断重定向和负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;现代操作系统的优化&#34;&gt;现代操作系统的优化
&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中断线程化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将中断处理程序作为内核线程运行&lt;/li&gt;
&lt;li&gt;提高系统的实时性和可预测性&lt;/li&gt;
&lt;li&gt;便于调试和性能分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中断亲和性（Interrupt Affinity）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将特定中断绑定到特定CPU核心&lt;/li&gt;
&lt;li&gt;提高缓存利用率和性能&lt;/li&gt;
&lt;li&gt;减少处理器间通信开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态中断分配&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据系统负载动态调整中断处理&lt;/li&gt;
&lt;li&gt;实现负载均衡&lt;/li&gt;
&lt;li&gt;适应不同的工作负载模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;io&#34;&gt;I/O
&lt;/h3&gt;&lt;h4 id=&#34;io基本介绍&#34;&gt;I/O基本介绍
&lt;/h4&gt;&lt;h5 id=&#34;从系统调用到设备的io过程&#34;&gt;从系统调用到设备的I/O过程
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统调用访问&lt;/strong&gt;：程序使用系统调用访问系统资源
&lt;ul&gt;
&lt;li&gt;如文件、网络等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备访问转换&lt;/strong&gt;：操作系统将其转换为设备访问并发出I/O请求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O请求传输&lt;/strong&gt;：I/O请求发送到设备驱动程序，然后到控制器
&lt;ul&gt;
&lt;li&gt;如读取磁盘块、发送/接收数据包等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;等待处理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同步I/O&lt;/strong&gt;：OS让程序等待&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步I/O&lt;/strong&gt;：OS不等待直接返回给程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程切换&lt;/strong&gt;：当请求者等待时，OS可能切换到另一个程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O完成&lt;/strong&gt;：I/O完成后控制器中断OS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理结果&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同步I/O&lt;/strong&gt;：OS处理I/O然后唤醒程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步I/O&lt;/strong&gt;：OS发送信号给程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;中断驱动的io循环&#34;&gt;中断驱动的I/O循环
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;操作系统通常是&lt;strong&gt;中断驱动&lt;/strong&gt;的&lt;/li&gt;
&lt;li&gt;中断传输控制到中断服务程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断向量&lt;/strong&gt;：包含所有服务程序地址的表格&lt;/li&gt;
&lt;li&gt;在服务另一个中断时，传入的中断被禁用以防止中断丢失&lt;/li&gt;
&lt;li&gt;中断处理程序必须保存（被中断的）执行状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;中断处理详细流程&#34;&gt;中断处理详细流程
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;中断识别&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;硬件产生中断信号&lt;/li&gt;
&lt;li&gt;CPU在每个指令周期结束时检查中断请求&lt;/li&gt;
&lt;li&gt;确定中断源和中断类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现场保护&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;操作系统保存CPU的执行状态&lt;/li&gt;
&lt;li&gt;保存寄存器和程序计数器(PC)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断分发&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;OS确定哪个设备造成了中断&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轮询(Polling)&lt;strong&gt;或&lt;/strong&gt;向量中断系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断处理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;OS通过调用设备驱动程序处理中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现场恢复&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;OS将CPU执行恢复到保存的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;存储结构&#34;&gt;存储结构
&lt;/h3&gt;&lt;h4 id=&#34;存储层次结构&#34;&gt;存储层次结构
&lt;/h4&gt;&lt;h5 id=&#34;主存储器&#34;&gt;主存储器
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主内存&lt;/strong&gt;：CPU能够直接访问的唯一大容量存储
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;随机访问&lt;/strong&gt;，通常是&lt;strong&gt;易失性&lt;/strong&gt;的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;辅助存储&lt;/strong&gt;：大容量非易失性存储
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;磁盘&lt;/strong&gt;是最常见的辅助存储设备(HDD)&lt;/li&gt;
&lt;li&gt;由覆盖磁性记录材料的刚性金属或玻璃盘片组成&lt;/li&gt;
&lt;li&gt;磁盘表面逻辑上分为&lt;strong&gt;磁道&lt;/strong&gt;和&lt;strong&gt;扇区&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;磁盘控制器决定OS和设备之间的交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;存储系统层次结构&#34;&gt;存储系统层次结构
&lt;/h5&gt;&lt;p&gt;存储系统可以按层次组织，考虑以下因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;速度(Speed)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本(Cost)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易失性(Volatility)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;存储性能层次（从快到慢）&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU寄存器&lt;/li&gt;
&lt;li&gt;CPU缓存(L1/L2/L3)&lt;/li&gt;
&lt;li&gt;主内存(RAM)&lt;/li&gt;
&lt;li&gt;辅助存储(SSD/HDD)&lt;/li&gt;
&lt;li&gt;光学存储/磁带&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;缓存&#34;&gt;缓存
&lt;/h3&gt;&lt;h4 id=&#34;缓存基本概念&#34;&gt;缓存基本概念
&lt;/h4&gt;&lt;h5 id=&#34;缓存原理&#34;&gt;缓存原理
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;/strong&gt;：将信息复制到更快存储系统中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主内存&lt;/strong&gt;可以看作是辅助存储的缓存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU缓存&lt;/strong&gt;是主内存的缓存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存是在多个级别执行的重要原理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;硬件、操作系统、用户程序等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;缓存工作机制&#34;&gt;缓存工作机制
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据复制&lt;/strong&gt;：使用中的数据从较慢存储临时复制到较快存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存检查&lt;/strong&gt;：首先检查较快存储(缓存)以确定数据是否存在&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存命中&lt;/strong&gt;：如果在缓存中，直接从缓存使用数据(快速)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存未命中&lt;/strong&gt;：如果不在缓存中，先将数据复制到缓存然后使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存特点&lt;/strong&gt;：缓存通常比被缓存的存储小&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;缓存管理&#34;&gt;缓存管理
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存管理&lt;/strong&gt;是重要的设计问题
&lt;ul&gt;
&lt;li&gt;缓存大小&lt;/li&gt;
&lt;li&gt;替换策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多任务环境&lt;/strong&gt;必须小心使用最新值，无论它存储在存储层次的哪里&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多处理器环境&lt;/strong&gt;必须在硬件中提供缓存一致性，确保所有CPU在其缓存中都有最新值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;虚拟缓存-vs-物理缓存&#34;&gt;虚拟缓存 vs 物理缓存
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;虚拟缓存&lt;/strong&gt;：使用虚拟地址进行缓存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理缓存&lt;/strong&gt;：使用物理地址进行缓存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存一致性&lt;/strong&gt;：多处理器必须保证缓存一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;计算机系统架构&#34;&gt;计算机系统架构
&lt;/h3&gt;&lt;h4 id=&#34;系统分类&#34;&gt;系统分类
&lt;/h4&gt;&lt;p&gt;根据通用处理器数量分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单处理器系统&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多处理器系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;单处理器系统&#34;&gt;单处理器系统
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;大多数老系统只有一个通用处理器
&lt;ul&gt;
&lt;li&gt;如智能手机、PC、服务器、主机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大多数系统也有专用处理器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多处理器系统&#34;&gt;多处理器系统
&lt;/h4&gt;&lt;h5 id=&#34;基本特征&#34;&gt;基本特征
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;别名&lt;/strong&gt;：并行系统、紧耦合系统&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增加吞吐量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规模经济&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增加可靠性&lt;/strong&gt;：优雅降级或容错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;多处理器类型&#34;&gt;多处理器类型
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非对称多处理(Asymmetric Multiprocessing)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对称多处理(SMP, Symmetric Multiprocessing)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多核设计&#34;&gt;多核设计
&lt;/h4&gt;&lt;h5 id=&#34;多核-vs-超线程&#34;&gt;多核 vs 超线程
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多核&lt;/strong&gt;：单个芯片中多个CPU核心&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;超线程&lt;/strong&gt;：两个程序可以同时使用一个执行单元(在一个核心内)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能依赖&lt;/strong&gt;：操作系统、编译器、应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;numa架构&#34;&gt;NUMA架构
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非统一内存访问系统(Non-Uniform Memory Access)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本地内存访问快速&lt;/strong&gt;，可扩展性好&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集群系统&#34;&gt;集群系统
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多个系统&lt;/strong&gt;通过高速网络协同工作&lt;/li&gt;
&lt;li&gt;通常通过**存储区域网络(SAN)**共享存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高可用性服务&lt;/strong&gt;，可以在故障中生存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非对称集群&lt;/strong&gt;：一台机器处于热备用模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对称集群&lt;/strong&gt;：多个节点运行应用程序，相互监控&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高性能计算(HPC)&lt;/strong&gt;：应用程序必须编写以使用并行化&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分布式系统&#34;&gt;分布式系统
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;独立系统集合&lt;/strong&gt;，可能是异构的，通过网络互连&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络OS&lt;/strong&gt;允许系统交换消息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式系统&lt;/strong&gt;创建单一系统的错觉&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;特殊用途系统&#34;&gt;特殊用途系统
&lt;/h4&gt;&lt;h5 id=&#34;实时嵌入式系统&#34;&gt;实时嵌入式系统
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;最普遍的计算机形式&lt;/li&gt;
&lt;li&gt;变化很大&lt;/li&gt;
&lt;li&gt;使用特殊用途(有限用途)实时OS&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;多媒体系统&#34;&gt;多媒体系统
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;数据流必须根据时间限制传送&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;手持系统&#34;&gt;手持系统
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;如PDA、智能手机&lt;/li&gt;
&lt;li&gt;CPU、内存和电源有限&lt;/li&gt;
&lt;li&gt;过去使用功能简化的OS&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;点对点计算&#34;&gt;点对点计算
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分布式系统的另一种模型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P2P不区分客户端和服务器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;所有节点都被视为对等体&lt;/li&gt;
&lt;li&gt;可以充当客户端、服务器或两者&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节点必须加入P2P网络&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;向中央查找服务注册其服务，或&lt;/li&gt;
&lt;li&gt;通过发现协议广播请求和响应服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：BitTorrent、Napster、Gnutella和区块链平台&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;操作系统操作&#34;&gt;操作系统操作
&lt;/h3&gt;&lt;h4 id=&#34;多道程序设计multiprogramming&#34;&gt;多道程序设计(Multiprogramming)
&lt;/h4&gt;&lt;h5 id=&#34;基本概念&#34;&gt;基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多道程序设计&lt;/strong&gt;对于效率是必要的&lt;/li&gt;
&lt;li&gt;单个用户无法始终保持CPU和I/O设备忙碌&lt;/li&gt;
&lt;li&gt;用户的计算任务被组织为&lt;strong&gt;作业&lt;/strong&gt;(代码和数据)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;工作机制&#34;&gt;工作机制
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作业调度&lt;/strong&gt;：内核调度作业，使CPU始终有事可做&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存管理&lt;/strong&gt;：系统中作业的子集保存在内存中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作业切换&lt;/strong&gt;：当作业必须等待(如I/O)时，内核切换到另一个作业&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多任务multitasking&#34;&gt;多任务(Multitasking)
&lt;/h4&gt;&lt;h5 id=&#34;时间共享概念&#34;&gt;时间共享概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;**时间共享(多任务)**扩展了多道程序设计&lt;/li&gt;
&lt;li&gt;OS频繁切换作业，用户可以与每个正在运行的作业交互&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应时间&lt;/strong&gt;应该&amp;lt; 1秒&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;特征&#34;&gt;特征
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每个用户&lt;/strong&gt;至少有一个程序在内存中执行(&lt;strong&gt;进程&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU调度&lt;/strong&gt;：如果几个作业同时准备运行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟/物理内存&lt;/strong&gt;：使程序员更容易&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;双模式操作&#34;&gt;双模式操作
&lt;/h4&gt;&lt;h5 id=&#34;基本概念-1&#34;&gt;基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作系统通常是中断驱动的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率&lt;/strong&gt;，重新获得控制(定时器中断)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双模式操作&lt;/strong&gt;允许OS保护自身和其他系统组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;模式类型&#34;&gt;模式类型
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户模式&lt;/strong&gt;和&lt;strong&gt;内核模式&lt;/strong&gt;(或其他名称)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模式位&lt;/strong&gt;区分CPU是在运行用户代码还是内核代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特权指令&lt;/strong&gt;：一些指令被指定为特权的，只能在内核中执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统调用&lt;/strong&gt;：将模式改为内核，从调用返回将其重置为用户&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;模式间转换&#34;&gt;模式间转换
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统调用、异常、中断&lt;/strong&gt;导致内核/用户模式之间的转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;定时器timer&#34;&gt;定时器(Timer)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;防止无限循环&lt;/strong&gt;或进程占用资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启用定时器&lt;/strong&gt;：设置硬件在某个时间段后中断&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OS设置定时器&lt;/strong&gt;：在调度进程之前设置定时器以重新获得控制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调度定时器&lt;/strong&gt;：通常是周期性的(如250Hz)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无滴答内核&lt;/strong&gt;：按需定时器中断(Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;资源管理&#34;&gt;资源管理
&lt;/h3&gt;&lt;h4 id=&#34;进程管理&#34;&gt;进程管理
&lt;/h4&gt;&lt;h5 id=&#34;进程基本概念&#34;&gt;进程基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;是正在执行的程序
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序&lt;/strong&gt;是被动实体，&lt;strong&gt;进程&lt;/strong&gt;是活动实体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统有许多进程并发运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;从程序到进程&#34;&gt;从程序到进程
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序&lt;/strong&gt;：存储在磁盘上的被动代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;：程序装载到内存后的活动实体&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程需要资源&lt;/strong&gt;来完成其任务：
&lt;ul&gt;
&lt;li&gt;CPU、内存、I/O、文件、初始化数据等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源回收&lt;/strong&gt;：进程终止时，OS回收所有可重用资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;进程管理活动&#34;&gt;进程管理活动
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程创建和终止&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程挂起和恢复&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程同步原语&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程通信原语&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;死锁处理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;从进程到线程&#34;&gt;从进程到线程
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单线程进程&lt;/strong&gt;有一个程序计数器
&lt;ul&gt;
&lt;li&gt;程序计数器指定下一条要执行的指令的位置&lt;/li&gt;
&lt;li&gt;处理器按顺序执行指令，一次一条，直到完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多线程进程&lt;/strong&gt;每个线程有一个程序计数器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程的好处&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;创建开销小&lt;/li&gt;
&lt;li&gt;上下文切换快&lt;/li&gt;
&lt;li&gt;共享内存空间&lt;/li&gt;
&lt;li&gt;并发执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内存管理&#34;&gt;内存管理
&lt;/h4&gt;&lt;h5 id=&#34;内存管理基本概念&#34;&gt;内存管理基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内存&lt;/strong&gt;是CPU可直接访问的主要存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据处理前后&lt;/strong&gt;都需要保存在内存中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有指令&lt;/strong&gt;都应该在内存中才能执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;内存管理目标&#34;&gt;内存管理目标
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优化CPU利用率和响应时间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为程序员提供虚拟内存视图&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;内存管理活动&#34;&gt;内存管理活动
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;跟踪&lt;/strong&gt;内存的哪些部分正在被使用以及被谁使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;决定&lt;/strong&gt;哪些进程和数据移入和移出内存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配和释放&lt;/strong&gt;根据需要分配和释放内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件系统管理&#34;&gt;文件系统管理
&lt;/h4&gt;&lt;h5 id=&#34;文件系统基本概念&#34;&gt;文件系统基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OS提供统一的逻辑数据存储视图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件&lt;/strong&gt;是抽象物理属性的逻辑存储单元&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件&lt;/strong&gt;通常组织到&lt;strong&gt;目录&lt;/strong&gt;中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问控制&lt;/strong&gt;决定谁可以访问文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;文件系统管理活动&#34;&gt;文件系统管理活动
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建和删除&lt;/strong&gt;文件和目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作原语&lt;/strong&gt;来操作文件和目录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;映射文件&lt;/strong&gt;到辅助存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;备份文件&lt;/strong&gt;到稳定(非易失性)存储介质&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;大容量存储管理&#34;&gt;大容量存储管理
&lt;/h4&gt;&lt;h5 id=&#34;基本概念-2&#34;&gt;基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;磁盘子系统&lt;/strong&gt;管理大容量存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;磁盘用于存储&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;不适合主内存的数据&lt;/li&gt;
&lt;li&gt;必须保存&amp;quot;长&amp;quot;时间的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;整个系统速度&lt;/strong&gt;取决于磁盘子系统及其算法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;某些存储不需要快速&lt;/strong&gt;(如光存储或磁带)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;大容量存储管理活动&#34;&gt;大容量存储管理活动
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;空闲空间管理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储分配&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;磁盘调度&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;数据迁移通过存储层&#34;&gt;数据迁移通过存储层
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统必须使用最新值&lt;/strong&gt;，无论它存储在哪里&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多级数据一致性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多处理器的缓存一致性&lt;/strong&gt;(缓存窥探)：由硬件实现&lt;/li&gt;
&lt;li&gt;所有CPU在其缓存中都有最新值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多进程或多线程的同步&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式环境情况更复杂&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一个数据可能存在多个副本：如何同步更改？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;io系统管理&#34;&gt;I/O系统管理
&lt;/h4&gt;&lt;h5 id=&#34;io子系统职责&#34;&gt;I/O子系统职责
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I/O子系统&lt;/strong&gt;向用户隐藏硬件设备的特性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O子系统负责&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管理I/O内存&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓冲&lt;/strong&gt;：在数据传输时临时存储数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;/strong&gt;：在更快存储中存储数据部分以提高性能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;假脱机&lt;/strong&gt;：一个作业的输出与其他作业的输入重叠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;设备驱动程序接口&#34;&gt;设备驱动程序接口
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OS可能提供通用设备驱动程序接口&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：对程序员好：面向对象设计模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：从安全角度看：大量使用函数指针&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;操作系统设计原则&#34;&gt;操作系统设计原则
&lt;/h3&gt;&lt;h4 id=&#34;策略与机制分离&#34;&gt;策略与机制分离
&lt;/h4&gt;&lt;h5 id=&#34;基本概念-3&#34;&gt;基本概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;机制(Mechanism)&lt;/strong&gt;：关于系统&amp;quot;如何&amp;quot;的问题
&lt;ul&gt;
&lt;li&gt;操作系统如何执行上下文切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略(Policy)&lt;/strong&gt;：&amp;ldquo;哪个&amp;quot;问题
&lt;ul&gt;
&lt;li&gt;应该切换到哪个进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;其他示例&#34;&gt;其他示例
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;机制示例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如何分配内存&lt;/li&gt;
&lt;li&gt;如何调度CPU&lt;/li&gt;
&lt;li&gt;如何处理中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略示例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;哪个进程获得内存&lt;/li&gt;
&lt;li&gt;哪个进程优先运行&lt;/li&gt;
&lt;li&gt;哪个中断优先处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;优势与劣势&#34;&gt;优势与劣势
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;灵活性：可以更改策略而不改变机制&lt;/li&gt;
&lt;li&gt;模块化：清晰的分层设计&lt;/li&gt;
&lt;li&gt;可维护性：更容易理解和修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劣势&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;性能开销：额外的抽象层&lt;/li&gt;
&lt;li&gt;复杂性：需要更仔细的设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;虚拟化&#34;&gt;虚拟化
&lt;/h4&gt;&lt;h5 id=&#34;虚拟化概念&#34;&gt;虚拟化概念
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;抽象单个计算机的硬件&lt;/strong&gt;(CPU/内存/IO等)到不同环境&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟机&lt;/strong&gt;：提供与底层硬件相同接口的软件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;好处&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;资源共享&lt;/li&gt;
&lt;li&gt;隔离性&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;li&gt;易于管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;虚拟化类型&#34;&gt;虚拟化类型
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;完全虚拟化&lt;/strong&gt;：完全模拟硬件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;半虚拟化&lt;/strong&gt;：修改客户OS以与虚拟机监控器协作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件辅助虚拟化&lt;/strong&gt;：硬件支持虚拟化&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;抽象&#34;&gt;抽象
&lt;/h4&gt;&lt;h5 id=&#34;抽象的重要性&#34;&gt;抽象的重要性
&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;抽象是我们在计算机科学中所做的一切的基础&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;抽象使以下成为可能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编写大型程序&lt;/strong&gt;：将其分为小而可理解的片段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用高级语言&lt;/strong&gt;：如C语言编写而不考虑汇编&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;汇编编程&lt;/strong&gt;：而不考虑逻辑门&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建处理器&lt;/strong&gt;：使用门而不过多考虑晶体管&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;抽象层次&#34;&gt;抽象层次
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;应用程序层&lt;/strong&gt;：用户程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高级语言层&lt;/strong&gt;：C/C++/Java等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;汇编语言层&lt;/strong&gt;：汇编指令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指令集架构层&lt;/strong&gt;：机器指令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微架构层&lt;/strong&gt;：CPU内部实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逻辑门层&lt;/strong&gt;：数字逻辑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;晶体管层&lt;/strong&gt;：物理实现&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;操作系统框架&#34;&gt;操作系统框架
&lt;/h2&gt;&lt;h3 id=&#34;操作系统服务组成&#34;&gt;操作系统服务组成
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户可见服务
&lt;ul&gt;
&lt;li&gt;用户界面(UI)
&lt;ul&gt;
&lt;li&gt;包括：CLI(Command-Line, 命令行), GUI(Graphic User Line, 图形化用户界面), batch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序运行&lt;/li&gt;
&lt;li&gt;I/O操作&lt;/li&gt;
&lt;li&gt;文件系统操作&lt;/li&gt;
&lt;li&gt;通信&lt;/li&gt;
&lt;li&gt;错误检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统可见服务
&lt;ul&gt;
&lt;li&gt;资源分配
&lt;ul&gt;
&lt;li&gt;包括：CPU调度，内存分配和管理，I/O设备分配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统保护&lt;/li&gt;
&lt;li&gt;会计统计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统调用system-call&#34;&gt;系统调用(System Call)
&lt;/h3&gt;&lt;h4 id=&#34;定义&#34;&gt;定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;系统调用指的是访问操作系统服务的编程接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;示例&#34;&gt;示例
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Linux的复制指令
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cp in.txt out.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;就是一个调用系统调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;调用&#34;&gt;调用
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一般一个系统调用被与一个数字联系起来，这个数字被称为&lt;strong&gt;系统调用号(System Call Number)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;例如Linux中read()可能是编号0，write()可能是编号1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统调用接口表
&lt;ul&gt;
&lt;li&gt;系统调用接口维护着一个表格，这个表格被这些编号索引，表格中存储着对应系统调用处理函数的地址，类似于您文档中提到的中断向量表观念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux系统调用数量示例
&lt;ul&gt;
&lt;li&gt;Linux有大约340个系统调用，不同架构的系统调用数量略有差异。x86架构有349个系统调用，而ARM架构有345个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统调用的核心原理&#34;&gt;系统调用的核心原理
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;内核执行系统调用并返回结果&lt;/li&gt;
&lt;li&gt;用户程序无需了解系统调用细节&lt;/li&gt;
&lt;li&gt;用户只需使用API并理解其功能&lt;/li&gt;
&lt;li&gt;API隐藏操作系统接口的大部分细节&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统调用传参&#34;&gt;系统调用传参
&lt;/h4&gt;&lt;h5 id=&#34;寄存器法&#34;&gt;寄存器法
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;工作原理
&lt;ul&gt;
&lt;li&gt;参数直接存储在CPU寄存器中&lt;/li&gt;
&lt;li&gt;系统调用时，内核直接从寄存器读取参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优势
&lt;ul&gt;
&lt;li&gt;速度最快&lt;/li&gt;
&lt;li&gt;实现简单&lt;/li&gt;
&lt;li&gt;开销最小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;劣势
&lt;ul&gt;
&lt;li&gt;参数数量首先&lt;/li&gt;
&lt;li&gt;不适合复杂调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存块法&lt;/li&gt;
&lt;li&gt;工作原理
&lt;ul&gt;
&lt;li&gt;参数存储在内存块（或表）中&lt;/li&gt;
&lt;li&gt;内存块的地址作为参数传递给寄存器&lt;/li&gt;
&lt;li&gt;内核通过地址访问内存块获取所有参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优势
&lt;ul&gt;
&lt;li&gt;参数数量不受限制：内存块可以很大&lt;/li&gt;
&lt;li&gt;适合复杂数据结构：可以传递结构体、数组等&lt;/li&gt;
&lt;li&gt;组织性好：参数集中管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;劣势
&lt;ul&gt;
&lt;li&gt;需要额外内存访问&lt;/li&gt;
&lt;li&gt;实现稍复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;栈法
&lt;ul&gt;
&lt;li&gt;工作原理
&lt;ul&gt;
&lt;li&gt;参数被程序推入栈中&lt;/li&gt;
&lt;li&gt;操作系统从栈中弹出参数&lt;/li&gt;
&lt;li&gt;利用栈的后进先出特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优势
&lt;ul&gt;
&lt;li&gt;参数数量不受限制&lt;/li&gt;
&lt;li&gt;自然的调用约定&lt;/li&gt;
&lt;li&gt;易于实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;劣势
&lt;ul&gt;
&lt;li&gt;栈操作开销&lt;/li&gt;
&lt;li&gt;栈空间管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;linuxx86架构下execve系统调用的实现&#34;&gt;Linux/x86架构下execve系统调用的实现
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;存储系统调用信号到eax寄存器&lt;/li&gt;
&lt;li&gt;参数存储到指定寄存器&lt;/li&gt;
&lt;li&gt;执行系统调用指令&lt;/li&gt;
&lt;li&gt;完整汇编代码如下
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;.data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;/&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;arg1&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;arg2&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;arg2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;envp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;_start&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;_start:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;filename&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;argv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;envp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0x80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0x80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统调用列举&#34;&gt;系统调用列举
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;进程控制
&lt;ul&gt;
&lt;li&gt;Types of System Calls&lt;/li&gt;
&lt;li&gt;Process control&lt;/li&gt;
&lt;li&gt;create process, terminate process&lt;/li&gt;
&lt;li&gt;end, abort&lt;/li&gt;
&lt;li&gt;load, execute&lt;/li&gt;
&lt;li&gt;get process attributes, set process attributes&lt;/li&gt;
&lt;li&gt;wait for time&lt;/li&gt;
&lt;li&gt;wait event, signal event&lt;/li&gt;
&lt;li&gt;allocate and free memory&lt;/li&gt;
&lt;li&gt;Dump memory if error&lt;/li&gt;
&lt;li&gt;Debugger for determining bugs, single step execution&lt;/li&gt;
&lt;li&gt;Locks for managing access to shared data between processes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件管理
&lt;ul&gt;
&lt;li&gt;create file, delete file&lt;/li&gt;
&lt;li&gt;open, close file&lt;/li&gt;
&lt;li&gt;read, write, reposition&lt;/li&gt;
&lt;li&gt;get and set file attributes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设备管理
&lt;ul&gt;
&lt;li&gt;request device, release device&lt;/li&gt;
&lt;li&gt;read, write, reposition&lt;/li&gt;
&lt;li&gt;get device attributes, set device attributes&lt;/li&gt;
&lt;li&gt;logically attach or detach devices&lt;/li&gt;
&lt;li&gt;can be combined with file management system call&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信息维护
&lt;ul&gt;
&lt;li&gt;get time or date, set time or date&lt;/li&gt;
&lt;li&gt;get system data, set system data&lt;/li&gt;
&lt;li&gt;get and set process, file, or device attributes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通信
&lt;ul&gt;
&lt;li&gt;create, delete communication connection&lt;/li&gt;
&lt;li&gt;send, receive messages: message passing model to host name or process name
&lt;ul&gt;
&lt;li&gt;From client to server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shared-memory model create and gain access to memory regions&lt;/li&gt;
&lt;li&gt;transfer status information&lt;/li&gt;
&lt;li&gt;attach and detach remote devices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保护
&lt;ul&gt;
&lt;li&gt;Control access to resources&lt;/li&gt;
&lt;li&gt;Get and set permissions&lt;/li&gt;
&lt;li&gt;Allow and deny user access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;应用程序接口application-programming-interface-api&#34;&gt;应用程序接口(Application Programming Interface, API)
&lt;/h4&gt;&lt;h5 id=&#34;定义-1&#34;&gt;定义：
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;应用程序编程接口，是预先定义的函数/集合的集合&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;常用的api&#34;&gt;常用的API
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Win32： Windows&lt;/li&gt;
&lt;li&gt;POSIX： UNIX, Linux&lt;/li&gt;
&lt;li&gt;Java: Java虚拟机&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;链接器linker与加载器loader&#34;&gt;链接器(Linker)与加载器(Loader)
&lt;/h2&gt;&lt;h3 id=&#34;基本概念-4&#34;&gt;基本概念
&lt;/h3&gt;&lt;h4 id=&#34;链接器&#34;&gt;链接器
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;功能：将目标文件转换为可执行文件&lt;/li&gt;
&lt;li&gt;作用：解决符号引用，合并代码段和数据段、&lt;/li&gt;
&lt;li&gt;时机：编译时或程序启动时&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;加载器&#34;&gt;加载器
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;功能：将程序转换为进程&lt;/li&gt;
&lt;li&gt;作用：将可执行文件加载到内存并启动执行&lt;/li&gt;
&lt;li&gt;时机：程序执行时&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;工作方式和内容&#34;&gt;工作方式和内容
&lt;/h4&gt;&lt;h5 id=&#34;编译链接过程&#34;&gt;编译链接过程
&lt;/h5&gt;&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;images/os1.png&#34; alt=&#34;编译过程&#34; width=&#34;100%&#34;&gt;
&lt;/p&gt;
&lt;h5 id=&#34;链接类型对比&#34;&gt;链接类型对比
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;静态链接
&lt;ul&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;链接时机：编译时完成所有链接&lt;/li&gt;
&lt;li&gt;文件大小：较大，包含所有依赖库&lt;/li&gt;
&lt;li&gt;运行依赖：无外部依赖，独立运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;运行时无依赖&lt;/li&gt;
&lt;li&gt;加载速度快&lt;/li&gt;
&lt;li&gt;部署简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;文件体积大&lt;/li&gt;
&lt;li&gt;内存占用多&lt;/li&gt;
&lt;li&gt;库更新需要重新编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态链接
&lt;ul&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;链接时机：运行时动态链接&lt;/li&gt;
&lt;li&gt;文件大小：较小，只包含引用信息&lt;/li&gt;
&lt;li&gt;运行依赖：需要动态链接库(DLL/SO)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;文件体积小&lt;/li&gt;
&lt;li&gt;内存共享&lt;/li&gt;
&lt;li&gt;库更新无需重新编译&lt;/li&gt;
&lt;li&gt;节省磁盘空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;运行时有依赖&lt;/li&gt;
&lt;li&gt;加载稍慢&lt;/li&gt;
&lt;li&gt;部署复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注：延迟绑定(Lazy Binding)
&lt;ul&gt;
&lt;li&gt;概念
&lt;ul&gt;
&lt;li&gt;定义：动态链接库中的函数在第一次调用时才进行地址解析&lt;/li&gt;
&lt;li&gt;目的：减少程序启动时间，只解析实际使用的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;操作系统架构&#34;&gt;操作系统架构
&lt;/h2&gt;&lt;h3 id=&#34;已有的操作系统架构&#34;&gt;已有的操作系统架构
&lt;/h3&gt;&lt;h4 id=&#34;ms-dos&#34;&gt;MS-DOS
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;架构特点&lt;/strong&gt;：简单的单体结构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;应用程序可以直接访问硬件&lt;/li&gt;
&lt;li&gt;没有明确的用户模式和内核模式分离&lt;/li&gt;
&lt;li&gt;程序运行在单一地址空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;系统开销小&lt;/li&gt;
&lt;li&gt;执行效率高&lt;/li&gt;
&lt;li&gt;实现简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;系统不稳定，一个程序崩溃可能导致整个系统崩溃&lt;/li&gt;
&lt;li&gt;安全性差&lt;/li&gt;
&lt;li&gt;不支持多任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;original-unix&#34;&gt;Original-UNIX
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;架构特点&lt;/strong&gt;：经典的分层单体内核&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;内核和用户程序分离&lt;/li&gt;
&lt;li&gt;系统调用作为内核和用户程序的接口&lt;/li&gt;
&lt;li&gt;&amp;ldquo;一切皆文件&amp;quot;的设计理念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;简洁而强大的设计&lt;/li&gt;
&lt;li&gt;良好的可移植性&lt;/li&gt;
&lt;li&gt;多用户多任务支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;内核代码耦合度高&lt;/li&gt;
&lt;li&gt;难以扩展和维护&lt;/li&gt;
&lt;li&gt;单体内核的性能瓶颈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分层方法layered-approach&#34;&gt;分层方法(Layered Approach)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;操作系统被划分为多个层次(levels)&lt;/li&gt;
&lt;li&gt;每一层都建立在较低层之上&lt;/li&gt;
&lt;li&gt;最底层(第0层)是硬件，最高层(第N层)是用户界面&lt;/li&gt;
&lt;li&gt;每一层只使用较低层的函数和服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;THE操作系统分层示例&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第5层: 用户程序
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第4层: 输入/输出管理
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第3层: 操作员-进程通信
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第2层: 内存管理
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第1层: 进程调度
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第0层: 硬件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;模块化设计，便于调试和维护&lt;/li&gt;
&lt;li&gt;层次清晰，易于理解&lt;/li&gt;
&lt;li&gt;易于验证系统正确性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;性能开销大(多层调用)&lt;/li&gt;
&lt;li&gt;层次划分困难&lt;/li&gt;
&lt;li&gt;严格分层限制系统灵活性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;微内核方法microkernel-approach&#34;&gt;微内核方法(Microkernel Approach)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;将尽可能多的功能从内核移到用户空间&lt;/li&gt;
&lt;li&gt;内核只保留最基本的功能&lt;/li&gt;
&lt;li&gt;其他系统服务作为用户级进程运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微内核核心功能&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;进程间通信(IPC)&lt;/li&gt;
&lt;li&gt;基本进程管理&lt;/li&gt;
&lt;li&gt;低级内存管理&lt;/li&gt;
&lt;li&gt;基本I/O和中断管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户空间服务&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;文件系统服务器&lt;/li&gt;
&lt;li&gt;网络协议栈&lt;/li&gt;
&lt;li&gt;设备驱动程序&lt;/li&gt;
&lt;li&gt;虚拟内存管理器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;系统稳定性高(服务崩溃不影响内核)&lt;/li&gt;
&lt;li&gt;安全性好(服务运行在隔离的地址空间)&lt;/li&gt;
&lt;li&gt;易于扩展和维护&lt;/li&gt;
&lt;li&gt;支持分布式系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;IPC开销大，性能较低&lt;/li&gt;
&lt;li&gt;系统调用开销增加&lt;/li&gt;
&lt;li&gt;设计和实现复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模块化方法modular-approach&#34;&gt;模块化方法(Modular Approach)
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;结合单体内核和微内核的优点&lt;/li&gt;
&lt;li&gt;内核提供核心服务&lt;/li&gt;
&lt;li&gt;其他功能通过可装载模块实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特征&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;模块可以动态加载和卸载&lt;/li&gt;
&lt;li&gt;模块运行在内核空间&lt;/li&gt;
&lt;li&gt;通过定义良好的接口通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux模块示例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;文件系统模块(ext4, ntfs)&lt;/li&gt;
&lt;li&gt;网络协议模块(TCP/IP)&lt;/li&gt;
&lt;li&gt;设备驱动模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;灵活性高&lt;/li&gt;
&lt;li&gt;内存使用效率高&lt;/li&gt;
&lt;li&gt;易于维护和扩展&lt;/li&gt;
&lt;li&gt;性能好(避免用户空间切换)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;模块错误可能影响整个内核&lt;/li&gt;
&lt;li&gt;接口设计需要谨慎&lt;/li&gt;
&lt;li&gt;依赖关系管理复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;混合系统架构&#34;&gt;混合系统架构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;结合多种架构方法的优点&lt;/li&gt;
&lt;li&gt;针对不同功能采用最适合的架构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现代操作系统实例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows NT&lt;/strong&gt;：混合微内核架构
&lt;ul&gt;
&lt;li&gt;内核模式：HAL、内核、执行体&lt;/li&gt;
&lt;li&gt;用户模式：子系统、应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;：基于Mach微内核的混合架构
&lt;ul&gt;
&lt;li&gt;Mach微内核 + BSD层 + I/O Kit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;：模块化单体内核
&lt;ul&gt;
&lt;li&gt;单体内核 + 可装载模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统调用实例&#34;&gt;系统调用实例
&lt;/h3&gt;&lt;h4 id=&#34;进程管理系统调用示例&#34;&gt;进程管理系统调用示例
&lt;/h4&gt;&lt;h5 id=&#34;fork系统调用&#34;&gt;fork系统调用
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：创建新进程的方式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特殊之处&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;新创建的进程是调用进程的完全副本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回两次&lt;/strong&gt;：在父进程和子进程中分别返回&lt;/li&gt;
&lt;li&gt;新进程拥有自己的内存地址空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回值&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在父进程中：返回子进程的PID&lt;/li&gt;
&lt;li&gt;在子进程中：返回0&lt;/li&gt;
&lt;li&gt;出错时：返回-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;fork--wait组合&#34;&gt;fork + wait组合
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;wait系统调用&lt;/strong&gt;：父进程等待子进程执行完毕&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;避免僵尸进程&lt;/li&gt;
&lt;li&gt;获取子进程退出状态&lt;/li&gt;
&lt;li&gt;进程同步控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型使用模式&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 子进程代码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 父进程代码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 等待子进程结束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;fork--wait--exec组合&#34;&gt;fork + wait + exec组合
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;exec系统调用特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用于运行与调用程序不同的程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exec永不返回&lt;/strong&gt;(成功时)&lt;/li&gt;
&lt;li&gt;完全替换当前进程映像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为什么分离fork和exec&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建UNIX shell的基础&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;允许在fork后、exec前进行特殊操作&lt;/li&gt;
&lt;li&gt;提供更大的灵活性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shell工作原理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Shell是一个用户程序&lt;/li&gt;
&lt;li&gt;等待用户输入&lt;/li&gt;
&lt;li&gt;执行命令：fork创建子进程 → exec加载新程序 → wait等待完成&lt;/li&gt;
&lt;li&gt;分离设计使shell功能更强大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;调试相关系统调用&#34;&gt;调试相关系统调用
&lt;/h4&gt;&lt;h5 id=&#34;ptrace系统调用&#34;&gt;ptrace系统调用
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本概念&lt;/strong&gt;：进程追踪系统调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主要功能&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;一个进程可以控制另一个进程的执行&lt;/li&gt;
&lt;li&gt;检查和修改被追踪进程的内存和寄存器&lt;/li&gt;
&lt;li&gt;实现断点调试功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;调试器实现&lt;/strong&gt;：gdb、strace等工具的基础&lt;/li&gt;
&lt;li&gt;进程监控和分析&lt;/li&gt;
&lt;li&gt;安全分析工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;调试器debugger工作原理&#34;&gt;调试器(Debugger)工作原理
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：用于测试和调试其他程序的计算机程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基本操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;附加到进程&lt;/strong&gt;(Attaching to a process)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基本控制&lt;/strong&gt;(Basic Control)：暂停、继续、单步执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置断点&lt;/strong&gt;(Setting a breakpoint)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命中断点&lt;/strong&gt;(Hitting a breakpoint)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ptrace在调试中的应用&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过ptrace系统调用实现进程控制&lt;/li&gt;
&lt;li&gt;监控被调试程序的每个系统调用&lt;/li&gt;
&lt;li&gt;提供程序执行状态的实时查看&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统调用实践要点&#34;&gt;系统调用实践要点
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程创建模式&lt;/strong&gt;：fork + exec是UNIX系统进程创建的标准模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shell实现&lt;/strong&gt;：所有UNIX shell都基于fork/exec/wait三个系统调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试工具&lt;/strong&gt;：现代调试器和追踪工具都依赖ptrace系统调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手册参考&lt;/strong&gt;：使用man page查看详细的系统调用文档和使用方法&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
