<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Splay树 on Example Site</title>
        <link>https://example.com/tags/splay%E6%A0%91/</link>
        <description>Recent content in Splay树 on Example Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Tue, 12 Aug 2025 10:58:00 +0800</lastBuildDate><atom:link href="https://example.com/tags/splay%E6%A0%91/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>自平衡二叉树</title>
        <link>https://example.com/p/%E8%87%AA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
        <pubDate>Tue, 12 Aug 2025 10:58:00 +0800</pubDate>
        
        <guid>https://example.com/p/%E8%87%AA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
        <description>&lt;h1 id=&#34;自平衡二叉搜索树&#34;&gt;自平衡二叉搜索树
&lt;/h1&gt;&lt;h2 id=&#34;avl树一种自平衡搜索二叉树&#34;&gt;AVL树——一种自平衡搜索二叉树
&lt;/h2&gt;&lt;h3 id=&#34;核心目标&#34;&gt;核心目标
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;解决普通搜索二叉树再操作时退化成链表，导致查询、删除插入等操作的时间复杂度由O(log n)退化到O(n)的问题。AVL树通过自动维护树的高度平衡来确保最坏情况下操作的时间复杂度仍然是O(log n)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;概念&#34;&gt;概念
&lt;/h3&gt;&lt;h4 id=&#34;平衡因子&#34;&gt;平衡因子
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：对于一个节点node，  其平衡因子等于左子树的高度减去右子树的高度&lt;/li&gt;
&lt;li&gt;关键性质：再一个AVL树中，每个节点的平衡因子只能是-1，0，1三个值之一&lt;/li&gt;
&lt;li&gt;意义：BF直观地反映了该节点左右子树的高度差。BF=1表示左子树比右子树高一层；BF=0表示两子树等高；BF=-1表示右子树比左子树高一层。限制|BF| &amp;lt;=1就保证了局部的高度平衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;高度&#34;&gt;高度
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：树中一个节点的高度（Height） 是指从该节点到其子树中最远叶子节点的最长路径上的边数&lt;/li&gt;
&lt;li&gt;约定
&lt;ul&gt;
&lt;li&gt;空树的高度定义为-1&lt;/li&gt;
&lt;li&gt;单个叶子节点的高度定义为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;avl树的递归定义&#34;&gt;AVL树的递归定义
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基础：一颗空的二叉树是高度平衡的&lt;/li&gt;
&lt;li&gt;递归步骤：一棵非空的二叉树T，以其左子树T_L和右子树T_R作为子树，是AVL树当且仅当：
&lt;ul&gt;
&lt;li&gt;T_L是AVL树&lt;/li&gt;
&lt;li&gt;T_R是AVL树&lt;/li&gt;
&lt;li&gt;|height(T_L) - height(T_R)| &amp;lt;= 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;简单地说：当插入或删除破坏平衡时（检测到某个节点的|BF|=2），需要根据不平衡节点（A）、导致问题的子树方向以及问题节点（通常是新插入或删除位置附近的节点）的BF来决定执行哪种旋转。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四种基本旋转操作&#34;&gt;四种基本旋转操作
&lt;/h3&gt;&lt;h4 id=&#34;1-ll型旋转左左型右旋转&#34;&gt;1. LL型旋转（左左型，右旋转）
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：不平衡节点A的BF = 2，且A的左子树B的BF = 1（或0）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：将B提升为新的根，A成为B的右子树，B的原右子树成为A的左子树&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示意图&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    A(BF=2)           B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   /                 / \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  B(BF=1)     →     C   A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /                     /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C                     D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;2-rr型旋转右右型左旋转&#34;&gt;2. RR型旋转（右右型，左旋转）
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：不平衡节点A的BF = -2，且A的右子树B的BF = -1（或0）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：将B提升为新的根，A成为B的左子树，B的原左子树成为A的右子树&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示意图&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A(BF=-2)              B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    \                / \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     B(BF=-1)   →   A   C
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      \             \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       C             D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;3-lr型旋转左右型先左旋后右旋&#34;&gt;3. LR型旋转（左右型，先左旋后右旋）
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：不平衡节点A的BF = 2，且A的左子树B的BF = -1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;对B进行左旋转（RR旋转）&lt;/li&gt;
&lt;li&gt;对A进行右旋转（LL旋转）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示意图&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    A(BF=2)        A           C
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   /              /           / \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  B(BF=-1)  →    C      →    B   A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   \            /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    C          B
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;4-rl型旋转右左型先右旋后左旋&#34;&gt;4. RL型旋转（右左型，先右旋后左旋）
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：不平衡节点A的BF = -2，且A的右子树B的BF = 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;对B进行右旋转（LL旋转）&lt;/li&gt;
&lt;li&gt;对A进行左旋转（RR旋转）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示意图&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A(BF=-2)           A               C
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    \               \             / \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     B(BF=1)   →     C      →    A   B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /                 \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   C                   B
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;avl树的插入操作&#34;&gt;AVL树的插入操作
&lt;/h3&gt;&lt;h4 id=&#34;插入步骤&#34;&gt;插入步骤
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标准BST插入&lt;/strong&gt;：按照二叉搜索树的规则插入新节点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回溯更新高度&lt;/strong&gt;：从插入位置向上回溯，更新每个祖先节点的高度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查平衡性&lt;/strong&gt;：计算每个节点的平衡因子&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行旋转&lt;/strong&gt;：如果发现不平衡（|BF| = 2），根据情况执行相应的旋转操作&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;时间复杂度&#34;&gt;时间复杂度
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;查找位置：O(log n)&lt;/li&gt;
&lt;li&gt;旋转操作：O(1)&lt;/li&gt;
&lt;li&gt;总体：O(log n)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;avl树的删除操作&#34;&gt;AVL树的删除操作
&lt;/h3&gt;&lt;h4 id=&#34;删除步骤&#34;&gt;删除步骤
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标准BST删除&lt;/strong&gt;：按照二叉搜索树的规则删除节点
&lt;ul&gt;
&lt;li&gt;叶子节点：直接删除&lt;/li&gt;
&lt;li&gt;只有一个子树：用子树替换&lt;/li&gt;
&lt;li&gt;有两个子树：用中序后继（或前驱）替换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回溯更新高度&lt;/strong&gt;：从删除位置向上回溯，更新每个祖先节点的高度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查平衡性&lt;/strong&gt;：计算每个节点的平衡因子&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行旋转&lt;/strong&gt;：如果发现不平衡，执行相应的旋转操作&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;时间复杂度-1&#34;&gt;时间复杂度
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;查找节点：O(log n)&lt;/li&gt;
&lt;li&gt;删除操作：O(1)&lt;/li&gt;
&lt;li&gt;旋转操作：O(1)&lt;/li&gt;
&lt;li&gt;总体：O(log n)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;avl树的性质与优势&#34;&gt;AVL树的性质与优势
&lt;/h3&gt;&lt;h4 id=&#34;关键性质&#34;&gt;关键性质
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;高度保证&lt;/strong&gt;：对于n个节点的AVL树，树高h满足：log₂(n+1) ≤ h ≤ 1.44log₂(n+2)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;平衡性&lt;/strong&gt;：任何节点的两个子树高度差最多为1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作复杂度&lt;/strong&gt;：查找、插入、删除操作都是O(log n)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;优势&#34;&gt;优势
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定的性能&lt;/strong&gt;：保证最坏情况下仍有良好的时间复杂度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动维护&lt;/strong&gt;：无需手动调整，自动保持平衡状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用范围广&lt;/strong&gt;：适合频繁查找、插入、删除的应用场景&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;劣势&#34;&gt;劣势
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;空间开销&lt;/strong&gt;：需要存储额外的高度或平衡因子信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;旋转开销&lt;/strong&gt;：插入和删除时可能需要进行旋转操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现复杂&lt;/strong&gt;：相比普通BST，实现较为复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用场景&#34;&gt;应用场景
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据库索引&lt;/strong&gt;：需要频繁查询和更新的索引结构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存管理&lt;/strong&gt;：操作系统中的虚拟内存管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译器&lt;/strong&gt;：符号表的维护&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图形学&lt;/strong&gt;：空间数据结构的基础&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络路由&lt;/strong&gt;：路由表的高效查找&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;与其他平衡树的比较&#34;&gt;与其他平衡树的比较
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特性&lt;/th&gt;
          &lt;th&gt;AVL树&lt;/th&gt;
          &lt;th&gt;红黑树&lt;/th&gt;
          &lt;th&gt;B树&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;平衡性&lt;/td&gt;
          &lt;td&gt;严格平衡&lt;/td&gt;
          &lt;td&gt;近似平衡&lt;/td&gt;
          &lt;td&gt;多路平衡&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;查找性能&lt;/td&gt;
          &lt;td&gt;最优&lt;/td&gt;
          &lt;td&gt;良好&lt;/td&gt;
          &lt;td&gt;良好&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;插入/删除&lt;/td&gt;
          &lt;td&gt;较多旋转&lt;/td&gt;
          &lt;td&gt;较少旋转&lt;/td&gt;
          &lt;td&gt;复杂分裂/合并&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;应用场景&lt;/td&gt;
          &lt;td&gt;查找密集&lt;/td&gt;
          &lt;td&gt;通用场景&lt;/td&gt;
          &lt;td&gt;磁盘存储&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;splay树伸展树另一种自平衡的二叉搜索树&#34;&gt;Splay树（伸展树）————另一种自平衡的二叉搜索树
&lt;/h2&gt;&lt;h3 id=&#34;核心思想&#34;&gt;核心思想
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Splay树的核心思想是“最近被访问过的元素很可能被再次访问），通过伸展操作调整高访问频率的节点的位置（靠近根节点）来提高访问速度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;伸展操作splaying&#34;&gt;伸展操作(Splaying)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;伸展：每次对树进行访问后，Splay树都会经过一系列旋转将被访问节点移动到靠近根节点的位置&lt;/li&gt;
&lt;li&gt;目标
&lt;ul&gt;
&lt;li&gt;平衡&lt;/li&gt;
&lt;li&gt;自适应&lt;/li&gt;
&lt;li&gt;简化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作
&lt;ul&gt;
&lt;li&gt;zig/zag（单旋转）
&lt;ul&gt;
&lt;li&gt;场景：p是根节点&lt;/li&gt;
&lt;li&gt;操作：进行一次标准BST单旋
&lt;ul&gt;
&lt;li&gt;如果p是左节点，右旋&lt;/li&gt;
&lt;li&gt;如果p是右节点，左旋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;结果：p取代根节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;zig—zig/zag-zag（单向双旋转）
&lt;ul&gt;
&lt;li&gt;场景：p和p的父节点都是左子节点&lt;/li&gt;
&lt;li&gt;操作：p的父节点先进行一个标准BST单旋，p再进行一次标准BST单旋&lt;/li&gt;
&lt;li&gt;结果：p取代p的祖父节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;zig-zag/zag-zig（异向双旋转）
&lt;ul&gt;
&lt;li&gt;场景：x和p的方向相反&lt;/li&gt;
&lt;li&gt;操作：先对x和p进行一次旋转，再对x和g进行一次旋转
&lt;ul&gt;
&lt;li&gt;结果：x移动到原来g的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;摊还分析amortized-analysis&#34;&gt;摊还分析（Amortized Analysis）
&lt;/h2&gt;&lt;h3 id=&#34;定义与核心思想&#34;&gt;定义与核心思想
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：摊还分析是一种分析算法复杂度的技术，它不关注单次操作的最坏情况时间复杂度，而是分析一系列操作的平均时间复杂度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心思想&lt;/strong&gt;：某些操作虽然单次执行可能代价很高，但在一系列操作中，高代价操作的频率较低，因此平均下来每次操作的代价是可接受的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与平均情况分析的区别&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;平均情况分析：基于输入的概率分布&lt;/li&gt;
&lt;li&gt;摊还分析：基于操作序列，不依赖概率分布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三种摊还分析方法&#34;&gt;三种摊还分析方法
&lt;/h3&gt;&lt;h4 id=&#34;1-聚合方法aggregate-method&#34;&gt;1. 聚合方法（Aggregate Method）
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本思路&lt;/strong&gt;：分析n次操作的总代价，然后除以n得到平均代价&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;步骤&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;证明n次操作的总代价为T(n)&lt;/li&gt;
&lt;li&gt;摊还代价 = T(n) / n&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：栈的多重弹出操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// MultiPop操作：弹出k个元素或栈为空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MultiPop&lt;/span&gt;(Stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; s, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;s.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s.pop();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        k&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单次MultiPop最坏O(n)&lt;/li&gt;
&lt;li&gt;n次操作中，每个元素最多被push一次，pop一次&lt;/li&gt;
&lt;li&gt;总代价：O(n)&lt;/li&gt;
&lt;li&gt;摊还代价：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-会计方法accounting-method&#34;&gt;2. 会计方法（Accounting Method）
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本思路&lt;/strong&gt;：为每种操作分配摊还代价，建立&amp;quot;银行账户&amp;quot;概念&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原则&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;摊还代价 ≥ 实际代价（保证账户余额非负）&lt;/li&gt;
&lt;li&gt;某些操作预付费用，为将来的高代价操作储备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：动态数组扩容&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DynamicArray&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; arr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; capacity;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; push_back(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; capacity) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 扩容：代价为O(size)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; new_capacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; capacity &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; new_arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[new_capacity];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                new_arr[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[i];  &lt;span style=&#34;color:#75715e&#34;&gt;// 复制代价
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;[] arr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_arr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            capacity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_capacity;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        arr[size&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val;  &lt;span style=&#34;color:#75715e&#34;&gt;// 实际插入代价O(1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;摊还代价设为3：插入(1) + 预付将来复制自己(1) + 预付将来复制之前元素(1)&lt;/li&gt;
&lt;li&gt;扩容时使用预付的费用，无需额外支付&lt;/li&gt;
&lt;li&gt;摊还代价：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-势能方法potential-method&#34;&gt;3. 势能方法（Potential Method）
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本思路&lt;/strong&gt;：定义势能函数Φ(Di)，表示数据结构在状态Di时的&amp;quot;势能&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;摊还代价公式&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;ĉᵢ = cᵢ + Φ(Dᵢ) - Φ(Dᵢ₋₁)&lt;/li&gt;
&lt;li&gt;其中：ĉᵢ是摊还代价，cᵢ是实际代价&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;势能函数要求&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Φ(D₀) = 0（初始状态势能为0）&lt;/li&gt;
&lt;li&gt;Φ(Dᵢ) ≥ 0（势能非负）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;：二进制计数器递增&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BinaryCounter&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; bits;  &lt;span style=&#34;color:#75715e&#34;&gt;// bits[i] = 0 or 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; increment() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; bits.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bits[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            bits[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// 翻转代价
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#75715e&#34;&gt;//全部置0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; bits.size()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            bits.push_back(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            bits[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//置1和延伸
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;势能函数：Φ(D) = 二进制表示中1的个数&lt;/li&gt;
&lt;li&gt;设翻转了t个1，则：
&lt;ul&gt;
&lt;li&gt;实际代价：cᵢ = t + 1&lt;/li&gt;
&lt;li&gt;势能变化：Φ(Dᵢ) - Φ(Dᵢ₋₁) = 1 - t&lt;/li&gt;
&lt;li&gt;摊还代价：ĉᵢ = (t + 1) + (1 - t) = 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;摊还代价：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;splay树的摊还分析&#34;&gt;Splay树的摊还分析
&lt;/h3&gt;&lt;h4 id=&#34;访问定理access-theorem&#34;&gt;访问定理（Access Theorem）
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;定理&lt;/strong&gt;：在一棵有n个节点的Splay树中，从空树开始的m次操作的总时间复杂度为O(m log n + n log n)&lt;/p&gt;
&lt;h4 id=&#34;势能函数定义&#34;&gt;势能函数定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对于节点x，定义：
&lt;ul&gt;
&lt;li&gt;size(x) = x子树中的节点数&lt;/li&gt;
&lt;li&gt;rank(x) = ⌊log₂ size(x)⌋&lt;/li&gt;
&lt;li&gt;势能函数：Φ(T) = Σ rank(x) for all x in T&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;伸展操作的摊还分析&#34;&gt;伸展操作的摊还分析
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt;：伸展操作将节点x移动到根的摊还代价最多为3(rank(root) - rank(x)) + 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证明思路&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Zig步骤&lt;/strong&gt;（x的父节点是根）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;摊还代价 ≤ 1 + 3(rank&amp;rsquo;(x) - rank(x))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Zig-Zig步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;摊还代价 ≤ 3(rank&amp;rsquo;(x) - rank(x))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Zig-Zag步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;摊还代价 ≤ 2(rank&amp;rsquo;(x) - rank(x))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;重要结论&#34;&gt;重要结论
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;单次操作&lt;/strong&gt;：摊还代价为O(log n)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;m次操作&lt;/strong&gt;：总摊还代价为O(m log n)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态最优性&lt;/strong&gt;：Splay树在访问模式具有局部性时表现优异&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;摊还分析的应用场景&#34;&gt;摊还分析的应用场景
&lt;/h3&gt;&lt;h4 id=&#34;1-数据结构操作&#34;&gt;1. 数据结构操作
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态数组&lt;/strong&gt;：插入操作的摊还复杂度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;哈希表&lt;/strong&gt;：带扩容的插入操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;堆&lt;/strong&gt;：斐波那契堆的decrease-key操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-算法分析&#34;&gt;2. 算法分析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;并查集&lt;/strong&gt;：路径压缩的摊还分析&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最小生成树&lt;/strong&gt;：Kruskal算法中的并查集操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图算法&lt;/strong&gt;：某些最短路径算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-实际系统&#34;&gt;3. 实际系统
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内存管理&lt;/strong&gt;：垃圾回收的摊还代价&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;：B+树的分裂和合并操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译器&lt;/strong&gt;：词法分析器的缓冲区管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;摊还分析与splay树的优势&#34;&gt;摊还分析与Splay树的优势
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自适应性&lt;/strong&gt;：频繁访问的节点自动上移&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单实现&lt;/strong&gt;：相比AVL树，实现更简单&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间效率&lt;/strong&gt;：不需要存储额外的平衡信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存友好&lt;/strong&gt;：局部性原理的体现&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实际应用中的考虑&#34;&gt;实际应用中的考虑
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;访问模式&lt;/strong&gt;：如果访问完全随机，Splay树优势不明显&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最坏情况&lt;/strong&gt;：单次操作可能需要O(n)时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实际性能&lt;/strong&gt;：在具有局部性的应用中表现优异&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;摊还分析的局限性&#34;&gt;摊还分析的局限性
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;不保证单次操作的性能&lt;/strong&gt;：某些关键实时系统可能不适用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析复杂&lt;/strong&gt;：相比最坏情况分析，证明更复杂&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖操作序列&lt;/strong&gt;：分析结果依赖于具体的操作模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;摊还分析是理解Splay树等自适应数据结构性能的关键工具。它告诉我们：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Splay树虽然单次操作可能较慢，但长期表现优异&lt;/li&gt;
&lt;li&gt;通过势能方法可以严格证明其O(log n)的摊还复杂度&lt;/li&gt;
&lt;li&gt;在具有访问局部性的应用中，Splay树是优秀的选择&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
